!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
ABORT	common/debugging/errors.h	32;"	d
ACCEPT	client/old/event.h	/^		ACCEPT,$/;"	e	enum:event::Socket_event
ACLOCAL	client/Makefile	/^ACLOCAL = ${SHELL} \/home\/mylw\/cpp\/Martial_arts\/missing aclocal-1.15$/;"	m
ACLOCAL	client/old/Makefile	/^ACLOCAL = ${SHELL} \/home\/mylw\/Martial_arts\/src\/server\/missing aclocal-1.16$/;"	m
ACLOCAL_M4	client/Makefile	/^ACLOCAL_M4 = $(top_srcdir)\/aclocal.m4$/;"	m
ACLOCAL_M4	client/old/Makefile	/^ACLOCAL_M4 = $(top_srcdir)\/aclocal.m4$/;"	m
ALPHA_OPAQUE	client/color.h	/^constexpr uint32_t ALPHA_OPAQUE = 255;$/;"	v
AMTAR	client/Makefile	/^AMTAR = $${TAR-tar}$/;"	m
AMTAR	client/old/Makefile	/^AMTAR = $${TAR-tar}$/;"	m
AM_CXXFLAGS	client/Makefile	/^AM_CXXFLAGS = -std=c++17$/;"	m
AM_CXXFLAGS	client/old/Makefile	/^AM_CXXFLAGS = -std=c++1z -pthread -Wall -Wextra -Werror=non-virtual-dtor -Wno-unused-local-typedefs -Wno-maybe-uninitialized -Wold-style-cast -Wtrampolines$/;"	m
AM_DEFAULT_VERBOSITY	client/Makefile	/^AM_DEFAULT_VERBOSITY = 1$/;"	m
AM_DEFAULT_VERBOSITY	client/old/Makefile	/^AM_DEFAULT_VERBOSITY = 1$/;"	m
AM_V_CC	client/Makefile	/^AM_V_CC = $(am__v_CC_$(V))$/;"	m
AM_V_CCLD	client/Makefile	/^AM_V_CCLD = $(am__v_CCLD_$(V))$/;"	m
AM_V_CXX	client/Makefile	/^AM_V_CXX = $(am__v_CXX_$(V))$/;"	m
AM_V_CXX	client/old/Makefile	/^AM_V_CXX = $(am__v_CXX_$(V))$/;"	m
AM_V_CXXLD	client/Makefile	/^AM_V_CXXLD = $(am__v_CXXLD_$(V))$/;"	m
AM_V_CXXLD	client/old/Makefile	/^AM_V_CXXLD = $(am__v_CXXLD_$(V))$/;"	m
AM_V_GEN	client/Makefile	/^AM_V_GEN = $(am__v_GEN_$(V))$/;"	m
AM_V_GEN	client/old/Makefile	/^AM_V_GEN = $(am__v_GEN_$(V))$/;"	m
AM_V_P	client/Makefile	/^AM_V_P = $(am__v_P_$(V))$/;"	m
AM_V_P	client/old/Makefile	/^AM_V_P = $(am__v_P_$(V))$/;"	m
AM_V_at	client/Makefile	/^AM_V_at = $(am__v_at_$(V))$/;"	m
AM_V_at	client/old/Makefile	/^AM_V_at = $(am__v_at_$(V))$/;"	m
API_EXPORT	common/define.h	80;"	d
API_EXPORT	common/define.h	83;"	d
API_EXPORT	common/define.h	89;"	d
API_IMPORT	common/define.h	81;"	d
API_IMPORT	common/define.h	84;"	d
API_IMPORT	common/define.h	90;"	d
APPENDER_CONSOLE	common/logging/log_common.h	/^	APPENDER_CONSOLE,$/;"	e	enum:uint8_t
APPENDER_DB	common/logging/log_common.h	/^	APPENDER_DB$/;"	e	enum:uint8_t
APPENDER_FILE	common/logging/log_common.h	/^	APPENDER_FILE,$/;"	e	enum:uint8_t
APPENDER_FLAGS_MAKE_FILE_BACKUP	common/logging/log_common.h	/^	APPENDER_FLAGS_MAKE_FILE_BACKUP = 0x10,  \/\/ 只有file_appender使用$/;"	e	enum:appender_flags
APPENDER_FLAGS_NONE	common/logging/log_common.h	/^	APPENDER_FLAGS_NONE = 0x00,$/;"	e	enum:appender_flags
APPENDER_FLAGS_PREFIX_LOGFILTERTYPE	common/logging/log_common.h	/^	APPENDER_FLAGS_PREFIX_LOGFILTERTYPE = 0x04,$/;"	e	enum:appender_flags
APPENDER_FLAGS_PREFIX_LOGLEVEL	common/logging/log_common.h	/^	APPENDER_FLAGS_PREFIX_LOGLEVEL = 0x02,$/;"	e	enum:appender_flags
APPENDER_FLAGS_PREFIX_THREAD	common/logging/log_common.h	/^	APPENDER_FLAGS_PREFIX_THREAD = 0x16$/;"	e	enum:appender_flags
APPENDER_FLAGS_PREFIX_TIMESTAMP	common/logging/log_common.h	/^	APPENDER_FLAGS_PREFIX_TIMESTAMP = 0x01,$/;"	e	enum:appender_flags
APPENDER_FLAGS_USE_TIMESTAMP	common/logging/log_common.h	/^	APPENDER_FLAGS_USE_TIMESTAMP = 0x08, \/\/ 只有file_appender使用$/;"	e	enum:appender_flags
APPENDER_NONE	common/logging/log_common.h	/^	APPENDER_NONE,$/;"	e	enum:uint8_t
ARCHIVED	server/database/update/update_fetcher.h	/^		ARCHIVED \/\/ 已封存$/;"	e	enum:update_fetcher::state
ARRAY	client/config.h	/^	ARRAY,$/;"	m	class:Type
ASSERT	common/debugging/errors.h	24;"	d
ASSERT_NOTNULL	common/debugging/errors.h	41;"	d
ASYNC_LOG	common/logging/old_logging/async_log.h	79;"	d
ASYNC_SERVER_H	client/old/server.h	6;"	d
ATTR_DEPRECATED	common/define.h	71;"	d
ATTR_DEPRECATED	common/define.h	75;"	d
ATTR_NORETURN	common/define.h	69;"	d
ATTR_NORETURN	common/define.h	73;"	d
ATTR_PRINTF	common/define.h	70;"	d
ATTR_PRINTF	common/define.h	74;"	d
AUTOCONF	client/Makefile	/^AUTOCONF = ${SHELL} \/home\/mylw\/cpp\/Martial_arts\/missing autoconf$/;"	m
AUTOCONF	client/old/Makefile	/^AUTOCONF = ${SHELL} \/home\/mylw\/Martial_arts\/src\/server\/missing autoconf$/;"	m
AUTOHEADER	client/Makefile	/^AUTOHEADER = ${SHELL} \/home\/mylw\/cpp\/Martial_arts\/missing autoheader$/;"	m
AUTOHEADER	client/old/Makefile	/^AUTOHEADER = ${SHELL} \/home\/mylw\/Martial_arts\/src\/server\/missing autoheader$/;"	m
AUTOMAKE	client/Makefile	/^AUTOMAKE = ${SHELL} \/home\/mylw\/cpp\/Martial_arts\/missing automake-1.15$/;"	m
AUTOMAKE	client/old/Makefile	/^AUTOMAKE = ${SHELL} \/home\/mylw\/Martial_arts\/src\/server\/missing automake-1.16$/;"	m
AUTOMAKE_OPTIONS	client/Makefile	/^AUTOMAKE_OPTIONS = foreign subdir-objects$/;"	m
AUTOMAKE_OPTIONS	client/old/Makefile	/^AUTOMAKE_OPTIONS = foreign subdir-objects$/;"	m
AWK	client/Makefile	/^AWK = mawk$/;"	m
AWK	client/old/Makefile	/^AWK = mawk$/;"	m
Acceptor	client/net/acceptor.cpp	/^Acceptor::Acceptor(Event_loop* loop, const Inet_address& listen_addr, bool reuseport)$/;"	f	class:net::Acceptor
Acceptor	client/net/acceptor.h	/^class Acceptor$/;"	c	namespace:net
AccountInfo	server/game/server/world_tcp_socket.cpp	/^    explicit AccountInfo(field* fields)$/;"	f	struct:AccountInfo
AccountInfo	server/game/server/world_tcp_socket.cpp	/^struct AccountInfo$/;"	s	file:
Active_timer	client/net/timer_queue.h	/^	typedef std::pair<Timer*, int64_t> Active_timer;$/;"	t	class:net::Timer_queue
Active_timer	server/shared/networking/timer_queue.h	/^	typedef std::pair<timer*, int64_t> Active_timer;$/;"	t	class:timer_queue
Active_timer_set	client/net/timer_queue.h	/^	typedef std::set<Active_timer> Active_timer_set;$/;"	t	class:net::Timer_queue
Active_timer_set	server/shared/networking/timer_queue.h	/^	typedef std::set<Active_timer> Active_timer_set;$/;"	t	class:timer_queue
Adopt_lock_t	client/thread/mutex.h	/^struct Adopt_lock_t { explicit Adopt_lock_t() = delete; };$/;"	s
Append_file	common/logging/old_logging/log_file.cpp	/^Append_file::Append_file(const std::string& filename) : $/;"	f	class:lg::Append_file
Append_file	common/logging/old_logging/log_file.h	/^class Append_file$/;"	c	namespace:lg
Array	client/json.h	/^	Array,$/;"	m	class:Type
Array	client/json.h	/^	typedef std::vector<Value> Array;$/;"	t	class:Format::Value
Async_log	common/logging/old_logging/async_log.cpp	/^Async_log::Async_log() : running_(false), \/\/latch_(1),$/;"	f	class:lg::Async_log
Async_log	common/logging/old_logging/async_log.h	/^class Async_log$/;"	c	namespace:lg
At_thread_exit_elt	client/thread/condition_variable.h	/^struct At_thread_exit_elt$/;"	s
Audio_lock	client/sound.cpp	/^	struct Audio_lock$/;"	s	namespace:__anon29	file:
BAD_TEXT	client/font/marked-up_text.cpp	/^	  GRAY_TEXT = '|', GOOD_TEXT = '@', BAD_TEXT = '#', GREEN_TEXT = '@',$/;"	v
BIGENDIAN	common/define.h	34;"	d
BIND	client/old/event.h	/^		BIND,$/;"	e	enum:event::Socket_event
BLACK	common/logging/appender_console.h	/^	BLACK,$/;"	e	enum:uint8_t
BLACK_TEXT	client/font/marked-up_text.cpp	/^	  NORMAL_TEXT = '{', NULL_MARKUP = '^', BLACK_TEXT = '}', $/;"	v
BLUE	common/logging/appender_console.h	/^	BLUE,$/;"	e	enum:uint8_t
BOLD_TEXT	client/font/marked-up_text.cpp	/^const char LARGE_TEXT = '*', SMALL_TEXT = '`', BOLD_TEXT = '~',$/;"	v
BOOLEAN	client/config.h	/^	BOOLEAN,$/;"	m	class:Type
BROWN	common/logging/appender_console.h	/^	BROWN,$/;"	e	enum:uint8_t
BYTE_BUFFER_H	client/old/byte_buffer.h	6;"	d
BattleNet	server/game/server/world_tcp_socket.cpp	/^    } BattleNet;$/;"	m	struct:AccountInfo	typeref:struct:AccountInfo::__anon9	file:
Binary_paths_manager	client/filesystem.cpp	/^	Binary_paths_manager::Binary_paths_manager() : paths_() {}$/;"	f	class:filesystem::Binary_paths_manager
Binary_paths_manager	client/filesystem.cpp	/^	Binary_paths_manager::Binary_paths_manager()$/;"	f	class:filesystem::Binary_paths_manager
Binary_paths_manager	client/filesystem.cpp	/^	Binary_paths_manager::Binary_paths_manager(const Config& cfg) : paths_()$/;"	f	class:filesystem::Binary_paths_manager
Binary_paths_manager	client/filesystem.h	/^	struct Binary_paths_manager$/;"	s	namespace:filesystem
Bool_cache	client/image.h	/^	typedef Cache_type<bool> Bool_cache;$/;"	t	namespace:image
Buffer	client/net/buffer.h	/^	explicit Buffer(size_t init_size = initial_size) $/;"	f	class:net::Buffer
Buffer	client/net/buffer.h	/^class Buffer$/;"	c	namespace:net
Buffer	common/logging/old_logging/async_log.h	/^	typedef Log_buffer<large_buffer> Buffer;$/;"	t	class:lg::Async_log
Buffer	common/logging/old_logging/log_stream.h	/^	typedef Log_buffer<small_buffer> Buffer;$/;"	t	class:lg::Log_stream
Buffer_ptr	common/logging/old_logging/async_log.h	/^	typedef Buffer_vector::value_type Buffer_ptr;$/;"	t	class:lg::Async_log
Buffer_vector	common/logging/old_logging/async_log.h	/^	typedef std::vector<std::unique_ptr<Buffer>> Buffer_vector;$/;"	t	class:lg::Async_log
Build_index_tuple	client/thread/thread.h	/^struct Build_index_tuple : $/;"	s
Build_index_tuple	client/thread/thread.h	/^struct Build_index_tuple<0>$/;"	s
Build_index_tuple	client/thread/thread.h	/^struct Build_index_tuple<1>$/;"	s
Byte_buffer	client/old/byte_buffer.cpp	/^Byte_buffer::Byte_buffer(Byte_buffer&& buf): $/;"	f	class:Byte_buffer
Byte_buffer	client/old/byte_buffer.cpp	/^Byte_buffer::Byte_buffer(const Byte_buffer& buf) : read_pos_(buf.read_pos_),$/;"	f	class:Byte_buffer
Byte_buffer	client/old/byte_buffer.cpp	/^Byte_buffer::Byte_buffer(size_t size) : read_pos_(0), write_pos_(0)$/;"	f	class:Byte_buffer
Byte_buffer	client/old/byte_buffer.h	/^class Byte_buffer$/;"	c
CAT	client/utils/make_enum.h	8;"	d
CAT_I	client/utils/make_enum.h	9;"	d
CC	client/Makefile	/^CC = gcc$/;"	m
CC	client/old/Makefile	/^CC = gcc$/;"	m
CCDEPMODE	client/Makefile	/^CCDEPMODE = depmode=gcc3$/;"	m
CCDEPMODE	client/old/Makefile	/^CCDEPMODE = depmode=gcc3$/;"	m
CCLD	client/Makefile	/^CCLD = $(CC)$/;"	m
CFG_BUILTIN_CONFiG_H	common/configuration/builtin_config.h	6;"	d
CFG_INI_CONFIG_H	common/configuration/config.h	6;"	d
CFG_INI_PARSER_H	common/configuration/ini_parser.h	6;"	d
CFG_REVISION_DATA_H	common/configuration/revision_data.h	6;"	d
CFG_REVISION_H	common/configuration/revision.h	6;"	d
CFLAGS	client/Makefile	/^CFLAGS = -g -O2$/;"	m
CFLAGS	client/old/Makefile	/^CFLAGS = -g -O2$/;"	m
CHANNEL_H	client/net/channel.h	6;"	d
CHECK_NOTNULL	common/logging/old_logging/logging.h	59;"	d
CLIENTS_H	client/old/clients.h	6;"	d
CLIENT_HANDLER_H	client/old/client_handler.h	6;"	d
CLIENT_TO_SERVER	server/game/server/protocol/packet_log.h	/^	CLIENT_TO_SERVER,$/;"	e	enum:direction
CLOSE_WINDOW	client/gui/core/event/handler.h	/^			CLOSE_WINDOW,		\/\/ 关闭当前窗口的请求$/;"	e	enum:gui::event::Ui_event
CLOSE_WINDOW_EVENT	client/events.h	18;"	d
CMDLN_H	client/cmdln.h	6;"	d
CMD_CMDLINE_H	common/cmdline/cmdline.h	6;"	d
CMD_OPTION_DESCRIPTION_H	common/cmdline/option_description.h	6;"	d
CMD_OPTION_H	common/cmdline/option.h	6;"	d
CMD_VARIABLES_MAP_H	common/cmdline/variables_map.h	6;"	d
COLOR_H	client/color.h	6;"	d
COLOR_TEXT	client/font/marked-up_text.cpp	/^	  RED_TEXT = '#', COLOR_TEXT = '<', IMAGE = '&';$/;"	v
COMMANDLINE_OPTIONS_H	client/commandline_options.h	6;"	d
COMMON_API	common/define.h	94;"	d
COMMON_API	common/define.h	96;"	d
COMMON_SYSTEM_INFO_H	common/utility/system_info.h	6;"	d
COMM_START_PROCESS	common/utility/start_process.h	6;"	d
COMM_UTIL_H	common/utility/util.h	6;"	d
COMPILE	client/Makefile	/^COMPILE = $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) \\$/;"	m
COMPILER	common/compiler_defs.h	31;"	d
COMPILER	common/compiler_defs.h	33;"	d
COMPILER	common/compiler_defs.h	35;"	d
COMPILER	common/compiler_defs.h	37;"	d
COMPILER_BORLAND	common/compiler_defs.h	27;"	d
COMPILER_DEFS_H	common/compiler_defs.h	6;"	d
COMPILER_GNU	common/compiler_defs.h	26;"	d
COMPILER_INTEL	common/compiler_defs.h	28;"	d
COMPILER_MICROSOFT	common/compiler_defs.h	25;"	d
COMP_TYPE	client/version.cpp	/^enum COMP_TYPE$/;"	g	file:
CONDITION_VARIABLE_H	client/thread/condition_variable.h	6;"	d
CONFIG_CLEAN_FILES	client/Makefile	/^CONFIG_CLEAN_FILES =$/;"	m
CONFIG_CLEAN_FILES	client/old/Makefile	/^CONFIG_CLEAN_FILES =$/;"	m
CONFIG_CLEAN_VPATH_FILES	client/Makefile	/^CONFIG_CLEAN_VPATH_FILES =$/;"	m
CONFIG_CLEAN_VPATH_FILES	client/old/Makefile	/^CONFIG_CLEAN_VPATH_FILES =$/;"	m
CONFIG_H	client/config.h	6;"	d
CONFIG_HEADER	client/Makefile	/^CONFIG_HEADER = $(top_builddir)\/config.h$/;"	m
CONFIG_HEADER	client/old/Makefile	/^CONFIG_HEADER = $(top_builddir)\/config.h$/;"	m
CONFIG_MGR	common/configuration/config.h	145;"	d
CONNECT	client/game_launcher.h	/^		enum class Selection { CONNECT, HOST, LOCAL };$/;"	m	class:Game_launcher::Selection
CONNECT	client/old/event.h	/^		CONNECT,$/;"	e	enum:event::Socket_event
CONNECTION_ASYNC	server/database/database/mysql_connection.h	/^	CONNECTION_ASYNC = 0x01,$/;"	e	enum:connection_flags
CONNECTION_BOTH	server/database/database/mysql_connection.h	/^	CONNECTION_BOTH = CONNECTION_ASYNC | CONNECTION_SYNCH$/;"	e	enum:connection_flags
CONNECTION_POOL_H	client/old/connection_pool.h	6;"	d
CONNECTION_SYNCH	server/database/database/mysql_connection.h	/^	CONNECTION_SYNCH = 0x02,$/;"	e	enum:connection_flags
CONNECTION_TYPE_DEFAULT	server/game/server/protocol/opcodes.h	/^	CONNECTION_TYPE_DEFAULT = -1$/;"	e	enum:int8_t
CONNECTION_TYPE_INSTANCE	server/game/server/protocol/opcodes.h	/^	CONNECTION_TYPE_INSTANCE = 1,$/;"	e	enum:int8_t
CONNECTION_TYPE_REALM	server/game/server/protocol/opcodes.h	/^	CONNECTION_TYPE_REALM = 0,$/;"	e	enum:int8_t
CONNECTION_TYPE_REALM	server/game/server/world_tcp_socket.cpp	/^	type_(CONNECTION_TYPE_REALM), $/;"	v
CONSTANTS_H	client/font/constants.h	6;"	d
CPP	client/Makefile	/^CPP = gcc -E$/;"	m
CPP	client/old/Makefile	/^CPP = gcc -E$/;"	m
CPPFLAGS	client/Makefile	/^CPPFLAGS = $/;"	m
CPPFLAGS	client/old/Makefile	/^CPPFLAGS = $/;"	m
CRY_BIG_NUMBER_H	common/cryptography/big_number.h	6;"	d
CTAGS	client/Makefile	/^CTAGS = ctags$/;"	m
CTAGS	client/old/Makefile	/^CTAGS = ctags$/;"	m
CURSOR_H	client/cursor.h	6;"	d
CXX	client/Makefile	/^CXX = g++$/;"	m
CXX	client/old/Makefile	/^CXX = g++$/;"	m
CXXCOMPILE	client/Makefile	/^CXXCOMPILE = $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) \\$/;"	m
CXXCOMPILE	client/old/Makefile	/^CXXCOMPILE = $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) \\$/;"	m
CXXDEPMODE	client/Makefile	/^CXXDEPMODE = depmode=gcc3$/;"	m
CXXDEPMODE	client/old/Makefile	/^CXXDEPMODE = depmode=gcc3$/;"	m
CXXFLAGS	client/Makefile	/^CXXFLAGS = -O2$/;"	m
CXXFLAGS	client/old/Makefile	/^CXXFLAGS = -O3$/;"	m
CXXFLAGS	gtest/makefile	/^CXXFLAGS = -pthread -Wall -Wno-attributes $(INC_DIR)$/;"	m
CXXLD	client/Makefile	/^CXXLD = $(CXX)$/;"	m
CXXLD	client/old/Makefile	/^CXXLD = $(CXX)$/;"	m
CXXLINK	client/Makefile	/^CXXLINK = $(CXXLD) $(AM_CXXFLAGS) $(CXXFLAGS) $(AM_LDFLAGS) $(LDFLAGS) \\$/;"	m
CXXLINK	client/old/Makefile	/^CXXLINK = $(CXXLD) $(AM_CXXFLAGS) $(CXXFLAGS) $(AM_LDFLAGS) $(LDFLAGS) \\$/;"	m
CYAN	common/logging/appender_console.h	/^	CYAN,$/;"	e	enum:uint8_t
CYGPATH_W	client/Makefile	/^CYGPATH_W = echo$/;"	m
CYGPATH_W	client/old/Makefile	/^CYGPATH_W = echo$/;"	m
Cache_item	client/image.cpp	/^struct Cache_item$/;"	s	file:
Cache_type	client/image.cpp	/^			Cache_type() : content_() {}$/;"	f	class:image::Cache_type
Cache_type	client/image.cpp	/^	class Cache_type$/;"	c	namespace:image	file:
Cahce_item	client/image.cpp	/^	Cahce_item(const T& item) : item(item), loaded(true) {}$/;"	f	struct:Cache_item
Channel	client/net/channel.cpp	/^Channel::Channel(Event_loop* loop, int fd) : $/;"	f	class:net::Channel
Channel	client/net/channel.h	/^class Channel$/;"	c	namespace:net
Channel_group	client/sound.h	/^	enum class Channel_group : uint8_t$/;"	c	namespace:sound
Channel_list	client/net/event_loop.h	/^  	typedef std::vector<Channel*> Channel_list;$/;"	t	class:net::Event_loop
Channel_list	client/net/poller.h	/^	typedef std::vector<Channel*> Channel_list;$/;"	t	class:net::Poller
Channel_map	client/net/poller.h	/^	typedef std::map<int, Channel*> Channel_map;$/;"	t	class:net::Poller
Char	client/serialization/unicode_type.h	/^	typedef char Char;$/;"	t	namespace:utf8
Char	client/serialization/unicode_type.h	/^	typedef uint32_t Char;$/;"	t	namespace:ucs4
Char	client/serialization/unicode_type.h	/^	typedef wchar_t Char;$/;"	t	namespace:utf16
Character	client/old/player.h	/^		Character(const std::string& name, Sex sex, int age) :$/;"	f	class:Character
Character	client/old/player.h	/^class Character$/;"	c
CheckNotNull	common/logging/old_logging/logging.h	/^T* CheckNotNull(const fs::path& file, int line, const char *names, T* ptr)$/;"	f
Client_handler	client/old/client_handler.h	/^class Client_handler : public Event_handler$/;"	c
Clients	client/old/clients.h	/^class Clients$/;"	c
Close_callback	client/net/net_utils.h	/^typedef std::function<void (const Tcp_connection_ptr&)> Close_callback;$/;"	t	namespace:net
Cmd_option	client/cmdln.cpp	/^	Cmd_option(const std::string& long_opt, $/;"	f	struct:Cmd_option
Cmd_option	client/cmdln.cpp	/^struct Cmd_option$/;"	s	file:
Cmd_param	client/cmdln.h	/^	Cmd_param(const std::string& param, $/;"	f	struct:Cmd_param
Cmd_param	client/cmdln.h	/^struct Cmd_param$/;"	s
Cmd_param_pos	client/cmdln.cpp	/^	Cmd_param_pos(const std::vector<std::string>::iterator& par_iter,$/;"	f	struct:Cmd_param_pos
Cmd_param_pos	client/cmdln.cpp	/^struct Cmd_param_pos$/;"	s	file:
Color	client/color.h	/^	Color() : r(255), g(255), b(255), a(ALPHA_OPAQUE) {}$/;"	f	struct:Color
Color	client/color.h	/^	Color(uint8_t r_val, uint8_t g_val, uint8_t b_val, $/;"	f	struct:Color
Color	client/color.h	/^struct Color$/;"	s
Commandline	client/cmdln.cpp	/^Commandline::Commandline() : program_name_(), $/;"	f	class:Commandline
Commandline	client/cmdln.h	/^ class Commandline$/;"	c
Commandline_options	client/commandline_options.cpp	/^Commandline_options::Commandline_options(const std::vector<std::string>& $/;"	f	class:Commandline_options
Commandline_options	client/commandline_options.h	/^class Commandline_options$/;"	c
CompressPacket	server/game/server/world_tcp_socket.cpp	/^uint32_t world_tcp_socket::CompressPacket(uint8_t* buffer, world_packet const& packet)$/;"	f	class:world_tcp_socket
Condition_variable	client/thread/condition_variable.cpp	/^Condition_variable::Condition_variable()$/;"	f	class:Condition_variable
Condition_variable	client/thread/condition_variable.h	/^class Condition_variable$/;"	c
Config	client/config.cpp	/^Config::Config() : root_(nullptr)$/;"	f	class:Config
Config	client/config.cpp	/^Config::Config(const std::string& file) : root_(nullptr), file_(file)$/;"	f	class:Config
Config	client/config.h	/^class Config$/;"	c
Connection_callback	client/net/net_utils.h	/^typedef std::function<void (const Tcp_connection_ptr&)> Connection_callback;$/;"	t	namespace:net
Connection_factory	client/old/mysql_pool.cpp	/^	Connection_factory::Connection_factory(const std::string& host, $/;"	f	class:db::Connection_factory
Connection_factory	client/old/mysql_pool.h	/^	class Connection_factory$/;"	c	namespace:db
Connection_map	client/net/tcp_server.h	/^	typedef std::map<std::string, Tcp_connection_ptr> Connection_map;$/;"	t	class:net::Tcp_server
Connection_map	server/shared/networking/tcp_server.h	/^	typedef std::map<std::string, Tcp_connection_ptr> Connection_map;$/;"	t	class:net::Tcp_server
Connection_pool	client/old/connection_pool.h	/^		Connection_pool(size_t pool_size, Mysql_connection_factory* factory) : pool_size_(size), factory_(factory)$/;"	f	class:Connection_pool
Connection_pool	client/old/connection_pool.h	/^class Connection_pool$/;"	c
Connection_pool	client/old/mysql_pool.cpp	/^	Connection_pool::Connection_pool() : size_(0) {}$/;"	f	class:db::Connection_pool
Connection_pool	client/old/mysql_pool.cpp	/^	Connection_pool::Connection_pool(size_t size) : size_(size)$/;"	f	class:db::Connection_pool
Connection_pool	client/old/mysql_pool.h	/^	class Connection_pool$/;"	c	namespace:db
Context	client/events.h	/^	        Context() : handlers(), focused_handler(handlers.end()), $/;"	f	struct:events::Context
Context	client/events.h	/^        struct Context$/;"	s	namespace:events
Context	client/old/event.h	/^		Context() : handlers() {}$/;"	f	struct:event::Context
Context	client/old/event.h	/^	struct Context$/;"	s	namespace:event
Convert_impl	client/serialization/ucs4_convert_impl.h	/^		struct Convert_impl<ucs4::Char>$/;"	s	namespace:ucs4_convert_impl
Convert_impl	client/serialization/ucs4_convert_impl.h	/^		struct Convert_impl<utf16::Char>$/;"	s	namespace:ucs4_convert_impl
Convert_impl	client/serialization/ucs4_convert_impl.h	/^        struct Convert_impl {};$/;"	s	namespace:ucs4_convert_impl
Convert_impl	client/serialization/ucs4_convert_impl.h	/^        struct Convert_impl<utf8::Char>$/;"	s	namespace:ucs4_convert_impl
Cursor_data	client/cursor.cpp	/^		struct Cursor_data$/;"	s	namespace:cursor::__anon26	file:
Cursor_type	client/cursor.h	/^	enum Cursor_type$/;"	g	namespace:cursor
DATABASE_API	common/define.h	106;"	d
DATABASE_API	common/define.h	108;"	d
DATABASE_CHARACTER	server/database/database/database_loader.h	/^		DATABASE_CHARACTER = 2,$/;"	e	enum:database_loader::database_type_flags
DATABASE_DB_UPDATE_H	server/database/update/db_update.h	6;"	d
DATABASE_FIELD_H	server/database/database/field.h	6;"	d
DATABASE_H	client/old/database.h	6;"	d
DATABASE_HOTFIX	server/database/database/database_loader.h	/^		DATABASE_HOTFIX = 8,$/;"	e	enum:database_loader::database_type_flags
DATABASE_LOGIN	server/database/database/database_loader.h	/^		DATABASE_LOGIN = 1,$/;"	e	enum:database_loader::database_type_flags
DATABASE_MASK_ALL	server/database/database/database_loader.h	/^		DATABASE_MASK_ALL = DATABASE_LOGIN | DATABASE_CHARACTER | DATABASE_WORLD | DATABASE_HOTFIX$/;"	e	enum:database_loader::database_type_flags
DATABASE_MYSQL_CONNECTION_H	server/database/database/mysql_connection.h	6;"	d
DATABASE_NONE	server/database/database/database_loader.h	/^		DATABASE_NONE = 0,$/;"	e	enum:database_loader::database_type_flags
DATABASE_QUERY_RESULT_H	server/database/database/query_result.h	6;"	d
DATABASE_SQL_OPERATION_H	server/database/database/sql_operation.h	6;"	d
DATABASE_WORLD	server/database/database/database_loader.h	/^		DATABASE_WORLD = 4,$/;"	e	enum:database_loader::database_type_flags
DBG_AUDIO	client/sound.cpp	14;"	d	file:
DBG_FS	client/filesystem.cpp	12;"	d	file:
DBG_FT	client/font/font_config.cpp	10;"	d	file:
DBG_FT	client/font/sdl_ttf.cpp	11;"	d	file:
DBG_G	client/hotkey/hotkey_command.cpp	13;"	d	file:
DBG_G	client/hotkey/hotkey_item.cpp	14;"	d	file:
DBG_GENERAL	client/game_launcher.cpp	15;"	d	file:
DBG_RND	client/random.cpp	11;"	d	file:
DB_ADHOC_STATEMENT_H	server/database/database/adhoc_statement.h	6;"	d
DB_APPENDERDB_H	server/database/logging/appender_DB.h	4;"	d
DB_CHARACTER_DATABASE_H	server/database/database/implementation/character_database.h	6;"	d
DB_DATABASE_ENV_FWD_H	server/database/database/database_env_fwd.h	6;"	d
DB_DATABASE_ENV_H	server/database/database/database_env.h	6;"	d
DB_DATABASE_LOADER_H	server/database/database/database_loader.h	6;"	d
DB_DATABASE_WORKER_H	server/database/database/database_worker.h	6;"	d
DB_DATABASE_WORKER_POOL_H	server/database/database/database_worker_pool.h	6;"	d
DB_HOTFIX_DATABASE_H	server/database/database/implementation/hotfix_database.h	6;"	d
DB_LOGIN_DATABASE_H	server/database/database/implementation/login_database.h	6;"	d
DB_MYSQL_PREPARED_STATEMENT_H	server/database/database/mysql_prepared_statement.h	6;"	d
DB_MYSQL_THREADING_H	server/database/database/mysql_threading.h	6;"	d
DB_PREPARED_STATEMENT_H	server/database/database/prepared_statement.h	6;"	d
DB_QUERY_CALLBACK_H	server/database/database/query_callback.h	6;"	d
DB_QUERY_CALLBACK_PROCESSOR_H	server/database/database/query_callback_processor.h	6;"	d
DB_QUERY_HOLDER_H	server/database/database/query_holder.h	6;"	d
DB_TRANSACTION_H	server/database/database/transaction.h	6;"	d
DB_UPDATE_FETCHER_H	server/database/update/update_fetcher.h	6;"	d
DB_WORLD_DATABASE_H	server/database/database/implementation/world_database.h	6;"	d
DEBUG	common/define.h	63;"	d
DEBUG	common/logging/old_logging/logging.h	/^		DEBUG,$/;"	e	enum:Logger::Log_level
DEB_DEBUGGING_ERRORS_H	common/debugging/errors.h	6;"	d
DECLSPEC_DEPRECATED	common/define.h	51;"	d
DECLSPEC_DEPRECATED	common/define.h	56;"	d
DECLSPEC_NORETURE	common/define.h	48;"	d
DECLSPEC_NORETURN	common/define.h	55;"	d
DEFAULT_INCLUDES	client/Makefile	/^DEFAULT_INCLUDES = -I. -I$(top_builddir)$/;"	m
DEFAULT_INCLUDES	client/old/Makefile	/^DEFAULT_INCLUDES = -I. -I$(top_builddir)$/;"	m
DEFINE_HANDLER	server/game/server/protocol/opcodes.cpp	117;"	d	file:
DEFINE_HANDLER	server/game/server/protocol/opcodes.cpp	122;"	d	file:
DEFINE_SERVER_OPCODE_HANDLER	server/game/server/protocol/opcodes.cpp	124;"	d	file:
DEFINE_SERVER_OPCODE_HANDLER	server/game/server/protocol/opcodes.cpp	130;"	d	file:
DEFS	client/Makefile	/^DEFS = -DHAVE_CONFIG_H$/;"	m
DEFS	client/old/Makefile	/^DEFS = -DHAVE_CONFIG_H$/;"	m
DEPDIR	client/Makefile	/^DEPDIR = .deps$/;"	m
DEPDIR	client/old/Makefile	/^DEPDIR = .deps$/;"	m
DESTDIR	gtest/makefile	/^DESTDIR = ""$/;"	m
DISABLED_COLOR	client/font/standard_colors.h	/^        const Color DISABLED_COLOR = PETRIFIED_COLOR.inverse();$/;"	m	namespace:font
DISPATCHER_H	client/gui/core/event/dispatcher.h	6;"	d
DISPATCHER_H	client/old/dispatcher.h	6;"	d
DISTANCE_STLENT	client/sound.h	50;"	d
DISTFILES	client/Makefile	/^DISTFILES = $(DIST_COMMON) $(DIST_SOURCES) $(TEXINFOS) $(EXTRA_DIST)$/;"	m
DISTFILES	client/old/Makefile	/^DISTFILES = $(DIST_COMMON) $(DIST_SOURCES) $(TEXINFOS) $(EXTRA_DIST)$/;"	m
DISTRIBUTOR_H	client/gui/core/event/distributor.h	6;"	d
DIST_COMMON	client/Makefile	/^DIST_COMMON = $(srcdir)\/Makefile.am $(am__DIST_COMMON)$/;"	m
DIST_COMMON	client/old/Makefile	/^DIST_COMMON = $(srcdir)\/Makefile.am $(am__DIST_COMMON)$/;"	m
DIST_SOURCES	client/Makefile	/^DIST_SOURCES = $(Martial_arts_new_legend_SOURCES)$/;"	m
DIST_SOURCES	client/old/Makefile	/^DIST_SOURCES = $(world_server_SOURCES)$/;"	m
DOUBLE_CLICK_EVENT	client/events.h	14;"	d
DO_STRINGIZE	server/exceptions.h	35;"	d
DRAW	client/gui/core/event/handler.h	/^			DRAW,				\/\/ 定期重绘请求$/;"	e	enum:gui::event::Ui_event
DRAW_ALL_EVENT	client/events.h	20;"	d
DRAW_EVENT	client/events.h	17;"	d
Database	client/old/mysql_pool.cpp	/^	Database::Database() : mysql_(nullptr), mutil_statements_(true)$/;"	f	class:db::Database
Database	client/old/mysql_pool.cpp	/^	Database::Database(const std::string& host, $/;"	f	class:db::Database
Database	client/old/mysql_pool.h	/^	class Database$/;"	c	namespace:db
Default_parse_context	client/json.h	/^	Default_parse_context(Value *out) : out_(out) {}$/;"	f	class:Format::Default_parse_context
Default_parse_context	client/json.h	/^class Default_parse_context $/;"	c	class:Format
Defer_lock_t	client/thread/mutex.h	/^struct Defer_lock_t { explicit Defer_lock_t() = default; };$/;"	s
Descriptor	client/old/server.h	/^	Descriptor(Descriptor&& d) : fd(std::move(d.fd)), addr(std::move(d.addr)), timeout(std::move(d.timeout)), last_active(std::move(d.last_active)) {}$/;"	f	struct:Descriptor
Descriptor	client/old/server.h	/^	Descriptor(const Descriptor& d) : $/;"	f	struct:Descriptor
Descriptor	client/old/server.h	/^	Descriptor(int fd, sockaddr_in client_addr, uint32_t timeout) :$/;"	f	struct:Descriptor
Descriptor	client/old/server.h	/^struct Descriptor$/;"	s
Dispatcher	client/gui/core/event/dispatcher.cpp	/^		Dispatcher::Dispatcher() : mouse_behavior_(all), $/;"	f	class:gui::event::Dispatcher
Dispatcher	client/gui/core/event/dispatcher.h	/^		class Dispatcher$/;"	c	namespace:gui::event
Dispatcher	client/old/dispatcher.cpp	/^	Dispatcher::Dispatcher(int size, Event_handler* handler) : $/;"	f	class:event::Dispatcher
Dispatcher	client/old/dispatcher.h	/^	class Dispatcher$/;"	c	namespace:event
Dispatcher_implementation	client/gui/core/event/dispatcher_private.h	/^		struct Dispatcher_implementation$/;"	s	namespace:gui::event
Distributor	client/gui/core/event/distributor.h	/^		class Distributor : public Mouse_button_left, $/;"	c	namespace:gui::event
ECHO_C	client/Makefile	/^ECHO_C = $/;"	m
ECHO_C	client/old/Makefile	/^ECHO_C = $/;"	m
ECHO_N	client/Makefile	/^ECHO_N = -n$/;"	m
ECHO_N	client/old/Makefile	/^ECHO_N = -n$/;"	m
ECHO_T	client/Makefile	/^ECHO_T = $/;"	m
ECHO_T	client/old/Makefile	/^ECHO_T = $/;"	m
EGREP	client/Makefile	/^EGREP = \/bin\/grep -E$/;"	m
EGREP	client/old/Makefile	/^EGREP = \/usr\/bin\/grep -E$/;"	m
ENDIAN	common/define.h	38;"	d
ENDIAN	common/define.h	40;"	d
EPOLL_ADD	client/old/event.h	/^		EPOLL_ADD,$/;"	e	enum:event::Socket_event
EPOLL_HANDLER_H	client/old/epoll_handler.h	6;"	d
EPOLL_READ	client/old/event.h	/^		EPOLL_READ,$/;"	e	enum:event::Socket_event
EPOLL_WRITE	client/old/event.h	/^		EPOLL_WRITE$/;"	e	enum:event::Socket_event
EQUAL	client/version.cpp	/^	EQUAL,$/;"	e	enum:COMP_TYPE	file:
ERROR	common/debugging/errors.h	28;"	d
ERROR	common/logging/old_logging/logging.h	/^		ERROR,$/;"	e	enum:Logger::Log_level
ERR_AUDIO	client/sound.cpp	16;"	d	file:
ERR_AUDIO	client/sound_music_track.cpp	8;"	d	file:
ERR_CF	client/hotkey/hotkey_command.cpp	14;"	d	file:
ERR_CF	client/hotkey/hotkey_item.cpp	15;"	d	file:
ERR_CFG	client/preferences/general.cpp	9;"	d	file:
ERR_CONFIG	client/game_launcher.cpp	9;"	d	file:
ERR_DP	client/image.cpp	10;"	d	file:
ERR_FS	client/filesystem.cpp	15;"	d	file:
ERR_FS	client/preferences/general.cpp	12;"	d	file:
ERR_FT	client/font/font_config.cpp	13;"	d	file:
ERR_FT	client/font/sdl_ttf.cpp	14;"	d	file:
ERR_G	client/hotkey/hotkey_command.cpp	11;"	d	file:
ERR_G	client/hotkey/hotkey_item.cpp	12;"	d	file:
ERR_GENERAL	client/serialization/unicode.cpp	11;"	d	file:
ERR_RND	client/random.cpp	14;"	d	file:
ERR_SDL	client/sdl/texture.cpp	10;"	d	file:
ESCAPE_H	client/font/pango/escape.h	6;"	d
ETAGS	client/Makefile	/^ETAGS = etags$/;"	m
ETAGS	client/old/Makefile	/^ETAGS = etags$/;"	m
EVENTS_H	client/events.h	6;"	d
EVENT_H	client/old/event.h	6;"	d
EXCEPTIONS_H	client/exceptions.h	6;"	d
EXCEPTIONS_H	server/exceptions.h	6;"	d
EXCEPTION_H	client/sdl/exception.h	6;"	d
EXEEXT	client/Makefile	/^EXEEXT = $/;"	m
EXEEXT	client/old/Makefile	/^EXEEXT = $/;"	m
Enableif	client/serialization/unicode_cast.h	/^	struct Enableif$/;"	s	namespace:ucs4_convert_impl
Entry	client/net/timer_queue.h	/^	typedef std::pair<Timestamp, Timer*> Entry;$/;"	t	class:net::Timer_queue
Entry	server/shared/networking/timer_queue.h	/^	typedef std::pair<Timestamp, timer*> Entry;$/;"	t	class:timer_queue
Epoll_handler	client/old/epoll_handler.cpp	/^	Epoll_handler::Epoll_handler(int max) : max_(max), epollfd_(-1), events_(new epoll_event[max])$/;"	f	class:event::Epoll_handler
Epoll_handler	client/old/epoll_handler.h	/^	class Epoll_handler : public Event_handler$/;"	c	namespace:event
Epoll_handler	client/old/event.cpp	/^	Epoll_handler::Epoll_handler(int size, const Socket& fd) : epollfd_(-1),$/;"	f	class:event::Epoll_handler
Event_callback	client/net/channel.h	/^	typedef std::function<void()> Event_callback;$/;"	t	class:net::Channel
Event_context	client/events.cpp	/^        Event_context::Event_context()$/;"	f	class:events::Event_context
Event_context	client/events.h	/^        struct Event_context$/;"	s	namespace:events
Event_handler	client/old/event.h	/^	class Event_handler$/;"	c	namespace:event
Event_list	client/net/poller.h	/^	typedef std::vector<struct epoll_event> Event_list;$/;"	t	class:net::Poller
Event_loop	client/net/event_loop.cpp	/^Event_loop::Event_loop() : looping_(false), quit_(false), $/;"	f	class:net::Event_loop
Event_loop	client/net/event_loop.h	/^class Event_loop$/;"	c	namespace:net
Event_loop_thread	client/net/event_loop_thread.cpp	/^Event_loop_thread::Event_loop_thread(const Thread_init_callback& cb) :$/;"	f	class:net::Event_loop_thread
Event_loop_thread	client/net/event_loop_thread.h	/^class Event_loop_thread$/;"	c	namespace:net
Event_loop_threadpool	client/net/event_loop_threadpool.cpp	/^Event_loop_threadpool::Event_loop_threadpool(Event_loop* base_loop)$/;"	f	class:net::Event_loop_threadpool
Event_loop_threadpool	client/net/event_loop_threadpool.h	/^	class Event_loop_threadpool$/;"	c	namespace:net
Event_queue_type	client/gui/core/event/dispatcher.h	/^				enum Event_queue_type$/;"	g	class:gui::event::Dispatcher
Exception	client/sdl/exception.cpp	/^Exception::Exception(const std::string& operation, bool use_sdl_error) :$/;"	f	class:Exception
Exception	client/sdl/exception.h	/^struct Exception : public Error$/;"	s
Expansion	server/game/server/world_tcp_socket.cpp	/^        uint8_t Expansion;$/;"	m	struct:AccountInfo::__anon10	file:
FAKE	client/video.h	/^			FAKE,$/;"	m	class:Video::FAKE_TYPES
FAKE_TYPES	client/video.h	/^		enum class FAKE_TYPES$/;"	c	class:Video
FANG_SONG	client/font/font_options.h	/^		FANG_SONG,$/;"	m	class:font::Family_class
FATAL	common/debugging/errors.h	26;"	d
FATAL	common/logging/old_logging/logging.h	/^		FATAL,$/;"	e	enum:Logger::Log_level
FEMALE	client/old/player.h	/^	FEMALE,		\/\/ 女性$/;"	e	enum:Sex
FILESYSTEM_H	client/filesystem.h	6;"	d
FLOAT	client/config.h	/^	FLOAT,$/;"	m	class:Type
FONT_CONFIG_H	client/font/font_config.h	6;"	d
FONT_DESCRIPTION_H	client/font/font_description.h	6;"	d
FONT_ERROR_H	client/font/error.h	6;"	d
FONT_H	client/font/pango/font.h	6;"	d
FONT_ID_H	client/font/font_id.h	6;"	d
FONT_OPTIONS_H	client/font/font_options.h	6;"	d
FONT_STYLE	client/font/text.h	/^			enum FONT_STYLE$/;"	g	class:font::Pango_text
FULL_DATABASE	common/configuration/revision_data.h	12;"	d
F_BYTE	common/define.h	/^	F_BYTE = 'b', \/\/ uint8$/;"	e	enum:former
F_FLOAT	common/define.h	/^	F_FLOAT = 'f', \/\/ float$/;"	e	enum:former
F_INT	common/define.h	/^	F_INT = 'i', \/\/ uint32$/;"	e	enum:former
F_LONG	common/define.h	/^	F_LONG = 'l' \/\/ uint64$/;"	e	enum:former
F_SHORT	common/define.h	/^	F_SHORT = 'h', \/\/ uint16$/;"	e	enum:former
F_STRING	common/define.h	/^	F_STRING = 's',	\/\/ localizedstring*$/;"	e	enum:former
F_STRING_NOT_LOCALIZER	common/define.h	/^	F_STRING_NOT_LOCALIZER = 'S', \/\/char*$/;"	e	enum:former
Family_class	client/font/font_options.h	/^	enum class Family_class$/;"	c	namespace:font
Find_option_mode	client/cmdln.h	/^		enum class Find_option_mode$/;"	c	class:Commandline
Flush_func	common/logging/old_logging/logging.h	/^	typedef void (*Flush_func)();$/;"	t	class:Logger
Font_error	client/font/error.h	/^		Font_error(const std::string& str = "Font initialization failed") :$/;"	f	struct:font::Font_error
Font_error	client/font/error.h	/^	struct Font_error : public Error$/;"	s	namespace:font
Font_id	client/font/font_id.h	/^	explicit Font_id(Subset_id subset, int size) : subset(subset), $/;"	f	struct:Font_id
Font_id	client/font/font_id.h	/^	explicit Font_id(Subset_id subset, int size, int style) :$/;"	f	struct:Font_id
Font_id	client/font/font_id.h	/^struct Font_id$/;"	s
Format	client/json.h	/^enum class Format : uint8_t { indent_width = 2 };$/;"	c
Frame	client/old/packet_protocol.h	/^struct Frame$/;"	s
Functor	client/net/event_loop.h	/^	typedef std::function<void()> Functor;$/;"	t	class:net::Event_loop
GAME_API	common/define.h	118;"	d
GAME_API	common/define.h	120;"	d
GAME_CONFIG_H	client/game_config.h	6;"	d
GAME_LAUNCHER_H	client/game_launcher.h	6;"	d
GCC_VERSION	common/compiler_defs.h	38;"	d
GENERAL_H	client/preferences/general.h	6;"	d
GET_BYTE	client/old/packet.h	14;"	d
GET_INT	client/old/packet.h	9;"	d
GET_INT64	client/old/packet.h	16;"	d
GET_SHORT	client/old/packet.h	12;"	d
GET_UINT	client/old/packet.h	8;"	d
GET_USHORT	client/old/packet.h	11;"	d
GLIBXCC_NPROCS	client/thread/thread.cpp	10;"	d	file:
GLOBAL__HELPTIP	client/hotkey/hotkey_command.h	/^	        GLOBAL__HELPTIP,$/;"	e	enum:hotkey::Hotkey_command
GOOD_TEXT	client/font/marked-up_text.cpp	/^	  GRAY_TEXT = '|', GOOD_TEXT = '@', BAD_TEXT = '#', GREEN_TEXT = '@',$/;"	v
GRAY_TEXT	client/font/marked-up_text.cpp	/^	  GRAY_TEXT = '|', GOOD_TEXT = '@', BAD_TEXT = '#', GREEN_TEXT = '@',$/;"	v
GREEN	common/logging/appender_console.h	/^	GREEN,$/;"	e	enum:uint8_t
GREEN_TEXT	client/font/marked-up_text.cpp	/^	  GRAY_TEXT = '|', GOOD_TEXT = '@', BAD_TEXT = '#', GREEN_TEXT = '@',$/;"	v
GREP	client/Makefile	/^GREP = \/bin\/grep$/;"	m
GREP	client/old/Makefile	/^GREP = \/usr\/bin\/grep$/;"	m
GREY	common/logging/appender_console.h	/^	GREY,$/;"	e	enum:uint8_t
GT	client/version.cpp	/^	GT$/;"	e	enum:COMP_TYPE	file:
GUI_CORE_PLACER_H	client/gui/core/placer.h	6;"	d
Game	server/game/server/world_tcp_socket.cpp	/^    } Game;$/;"	m	struct:AccountInfo	typeref:struct:AccountInfo::__anon10	file:
Game_launcher	client/game_launcher.cpp	/^Game_launcher::Game_launcher(const Commandline_options& cmdline_opts, $/;"	f	class:Game_launcher
Game_launcher	client/game_launcher.h	/^class Game_launcher$/;"	c
HANDLER_H	client/gui/core/event/handler.h	6;"	d
HKCAT_CHAT	client/hotkey/hotkey_command.h	/^	        HKCAT_CHAT,$/;"	e	enum:hotkey::Hotkey_category
HKCAT_CLIPBOARD	client/hotkey/hotkey_command.h	/^	        HKCAT_CLIPBOARD,$/;"	e	enum:hotkey::Hotkey_category
HKCAT_CUSTOM	client/hotkey/hotkey_command.h	/^	        HKCAT_CUSTOM,$/;"	e	enum:hotkey::Hotkey_category
HKCAT_DEBUG	client/hotkey/hotkey_command.h	/^	        HKCAT_DEBUG,$/;"	e	enum:hotkey::Hotkey_category
HKCAT_GENERAL	client/hotkey/hotkey_command.h	/^		HKCAT_GENERAL,$/;"	e	enum:hotkey::Hotkey_category
HKCAT_MAP	client/hotkey/hotkey_command.h	/^	        HKCAT_MAP,$/;"	e	enum:hotkey::Hotkey_category
HKCAT_PALETTE	client/hotkey/hotkey_command.h	/^	        HKCAT_PALETTE,$/;"	e	enum:hotkey::Hotkey_category
HKCAT_PLACEHOLDER	client/hotkey/hotkey_command.h	/^                HKCAT_PLACEHOLDER \/\/ Keep this one last$/;"	e	enum:hotkey::Hotkey_category
HKCAT_REPLAY	client/hotkey/hotkey_command.h	/^	        HKCAT_REPLAY,$/;"	e	enum:hotkey::Hotkey_category
HKCAT_SAVING	client/hotkey/hotkey_command.h	/^	        HKCAT_SAVING,$/;"	e	enum:hotkey::Hotkey_category
HKCAT_SCENARIO	client/hotkey/hotkey_command.h	/^	        HKCAT_SCENARIO,$/;"	e	enum:hotkey::Hotkey_category
HKCAT_TOOLS	client/hotkey/hotkey_command.h	/^	        HKCAT_TOOLS,$/;"	e	enum:hotkey::Hotkey_category
HKCAT_UNITS	client/hotkey/hotkey_command.h	/^	        HKCAT_UNITS,$/;"	e	enum:hotkey::Hotkey_category
HKCAT_WHITEBOARD	client/hotkey/hotkey_command.h	/^	        HKCAT_WHITEBOARD,$/;"	e	enum:hotkey::Hotkey_category
HOST	client/game_launcher.h	/^		enum class Selection { CONNECT, HOST, LOCAL };$/;"	m	class:Game_launcher::Selection
HOTFIXES_DATABASE	common/configuration/revision_data.h	13;"	d
HOTKEY_ACCELERATED	client/hotkey/hotkey_command.h	/^	        HOTKEY_FULLSCREEN, HOTKEY_SCREENSHOT, HOTKEY_MAP_SCREENSHOT, HOTKEY_ACCELERATED,$/;"	e	enum:hotkey::Hotkey_command
HOTKEY_AI_FORMULA	client/hotkey/hotkey_command.h	/^	        HOTKEY_AI_FORMULA,$/;"	e	enum:hotkey::Hotkey_command
HOTKEY_ANIMATE_MAP	client/hotkey/hotkey_command.h	/^	        HOTKEY_CHAT_LOG, HOTKEY_LANGUAGE, HOTKEY_ANIMATE_MAP,$/;"	e	enum:hotkey::Hotkey_command
HOTKEY_BEST_ENEMY_MOVES	client/hotkey/hotkey_command.h	/^	        HOTKEY_LABEL_TEAM_TERRAIN, HOTKEY_LABEL_TERRAIN, HOTKEY_CLEAR_LABELS,HOTKEY_SHOW_ENEMY_MOVES, HOTKEY_BEST_ENEMY_MOVES,$/;"	e	enum:hotkey::Hotkey_command
HOTKEY_CANCEL	client/hotkey/hotkey_command.h	/^	        HOTKEY_CANCEL, HOTKEY_OKAY,$/;"	e	enum:hotkey::Hotkey_command
HOTKEY_CHANGE_SIDE	client/hotkey/hotkey_command.h	/^	        HOTKEY_SPEAK, HOTKEY_CREATE_UNIT, HOTKEY_CHANGE_SIDE, HOTKEY_KILL_UNIT, HOTKEY_PREFERENCES,$/;"	e	enum:hotkey::Hotkey_command
HOTKEY_CHAT_LOG	client/hotkey/hotkey_command.h	/^	        HOTKEY_CHAT_LOG, HOTKEY_LANGUAGE, HOTKEY_ANIMATE_MAP,$/;"	e	enum:hotkey::Hotkey_command
HOTKEY_CLEAR_LABELS	client/hotkey/hotkey_command.h	/^	        HOTKEY_LABEL_TEAM_TERRAIN, HOTKEY_LABEL_TERRAIN, HOTKEY_CLEAR_LABELS,HOTKEY_SHOW_ENEMY_MOVES, HOTKEY_BEST_ENEMY_MOVES,$/;"	e	enum:hotkey::Hotkey_command
HOTKEY_CLEAR_MSG	client/hotkey/hotkey_command.h	/^	        HOTKEY_CLEAR_MSG,$/;"	e	enum:hotkey::Hotkey_command
HOTKEY_COMMAND_H	client/hotkey/hotkey_command.h	6;"	d
HOTKEY_CONTINUE_MOVE	client/hotkey/hotkey_command.h	/^	        HOTKEY_DELAY_SHROUD, HOTKEY_UPDATE_SHROUD, HOTKEY_CONTINUE_MOVE,$/;"	e	enum:hotkey::Hotkey_command
HOTKEY_CREATE_UNIT	client/hotkey/hotkey_command.h	/^	        HOTKEY_SPEAK, HOTKEY_CREATE_UNIT, HOTKEY_CHANGE_SIDE, HOTKEY_KILL_UNIT, HOTKEY_PREFERENCES,$/;"	e	enum:hotkey::Hotkey_command
HOTKEY_CUSTOM_CMD	client/hotkey/hotkey_command.h	/^	        HOTKEY_CUSTOM_CMD,$/;"	e	enum:hotkey::Hotkey_command
HOTKEY_CYCLE_BACK_UNITS	client/hotkey/hotkey_command.h	/^	        HOTKEY_CYCLE_UNITS, HOTKEY_CYCLE_BACK_UNITS,$/;"	e	enum:hotkey::Hotkey_command
HOTKEY_CYCLE_UNITS	client/hotkey/hotkey_command.h	/^	        HOTKEY_CYCLE_UNITS, HOTKEY_CYCLE_BACK_UNITS,$/;"	e	enum:hotkey::Hotkey_command
HOTKEY_DELAY_SHROUD	client/hotkey/hotkey_command.h	/^	        HOTKEY_DELAY_SHROUD, HOTKEY_UPDATE_SHROUD, HOTKEY_CONTINUE_MOVE,$/;"	e	enum:hotkey::Hotkey_command
HOTKEY_DELETE_UNIT	client/hotkey/hotkey_command.h	/^	        HOTKEY_UNIT_DESCRIPTION, HOTKEY_RENAME_UNIT, HOTKEY_DELETE_UNIT,$/;"	e	enum:hotkey::Hotkey_command
HOTKEY_DESELECT_HEX	client/hotkey/hotkey_command.h	/^	        HOTKEY_SELECT_HEX, HOTKEY_DESELECT_HEX,$/;"	e	enum:hotkey::Hotkey_command
HOTKEY_EDITOR_AREA_ADD	client/hotkey/hotkey_command.h	/^	        HOTKEY_EDITOR_AREA_ADD,$/;"	e	enum:hotkey::Hotkey_command
HOTKEY_EDITOR_AREA_REMOVE	client/hotkey/hotkey_command.h	/^	        HOTKEY_EDITOR_AREA_REMOVE,$/;"	e	enum:hotkey::Hotkey_command
HOTKEY_EDITOR_AREA_RENAME	client/hotkey/hotkey_command.h	/^	        HOTKEY_EDITOR_AREA_RENAME,$/;"	e	enum:hotkey::Hotkey_command
HOTKEY_EDITOR_AREA_SAVE	client/hotkey/hotkey_command.h	/^	        HOTKEY_EDITOR_AREA_SAVE,$/;"	e	enum:hotkey::Hotkey_command
HOTKEY_EDITOR_AUTO_UPDATE_TRANSITIONS	client/hotkey/hotkey_command.h	/^	        HOTKEY_EDITOR_AUTO_UPDATE_TRANSITIONS, HOTKEY_EDITOR_PARTIAL_UPDATE_TRANSITIONS, HOTKEY_EDITOR_NO_UPDATE_TRANSITIONS,$/;"	e	enum:hotkey::Hotkey_command
HOTKEY_EDITOR_BRUSH_1	client/hotkey/hotkey_command.h	/^	        HOTKEY_EDITOR_BRUSH_1, HOTKEY_EDITOR_BRUSH_2, HOTKEY_EDITOR_BRUSH_3, HOTKEY_EDITOR_BRUSH_SW_NE, HOTKEY_EDITOR_BRUSH_NW_SE,$/;"	e	enum:hotkey::Hotkey_command
HOTKEY_EDITOR_BRUSH_2	client/hotkey/hotkey_command.h	/^	        HOTKEY_EDITOR_BRUSH_1, HOTKEY_EDITOR_BRUSH_2, HOTKEY_EDITOR_BRUSH_3, HOTKEY_EDITOR_BRUSH_SW_NE, HOTKEY_EDITOR_BRUSH_NW_SE,$/;"	e	enum:hotkey::Hotkey_command
HOTKEY_EDITOR_BRUSH_3	client/hotkey/hotkey_command.h	/^	        HOTKEY_EDITOR_BRUSH_1, HOTKEY_EDITOR_BRUSH_2, HOTKEY_EDITOR_BRUSH_3, HOTKEY_EDITOR_BRUSH_SW_NE, HOTKEY_EDITOR_BRUSH_NW_SE,$/;"	e	enum:hotkey::Hotkey_command
HOTKEY_EDITOR_BRUSH_DEFAULT	client/hotkey/hotkey_command.h	/^	        HOTKEY_EDITOR_BRUSH_NEXT, HOTKEY_EDITOR_BRUSH_DEFAULT,$/;"	e	enum:hotkey::Hotkey_command
HOTKEY_EDITOR_BRUSH_NEXT	client/hotkey/hotkey_command.h	/^	        HOTKEY_EDITOR_BRUSH_NEXT, HOTKEY_EDITOR_BRUSH_DEFAULT,$/;"	e	enum:hotkey::Hotkey_command
HOTKEY_EDITOR_BRUSH_NW_SE	client/hotkey/hotkey_command.h	/^	        HOTKEY_EDITOR_BRUSH_1, HOTKEY_EDITOR_BRUSH_2, HOTKEY_EDITOR_BRUSH_3, HOTKEY_EDITOR_BRUSH_SW_NE, HOTKEY_EDITOR_BRUSH_NW_SE,$/;"	e	enum:hotkey::Hotkey_command
HOTKEY_EDITOR_BRUSH_SW_NE	client/hotkey/hotkey_command.h	/^	        HOTKEY_EDITOR_BRUSH_1, HOTKEY_EDITOR_BRUSH_2, HOTKEY_EDITOR_BRUSH_3, HOTKEY_EDITOR_BRUSH_SW_NE, HOTKEY_EDITOR_BRUSH_NW_SE,$/;"	e	enum:hotkey::Hotkey_command
HOTKEY_EDITOR_CLIPBOARD_FLIP_HORIZONTAL	client/hotkey/hotkey_command.h	/^	        HOTKEY_EDITOR_CLIPBOARD_FLIP_HORIZONTAL, HOTKEY_EDITOR_CLIPBOARD_FLIP_VERTICAL,$/;"	e	enum:hotkey::Hotkey_command
HOTKEY_EDITOR_CLIPBOARD_FLIP_VERTICAL	client/hotkey/hotkey_command.h	/^	        HOTKEY_EDITOR_CLIPBOARD_FLIP_HORIZONTAL, HOTKEY_EDITOR_CLIPBOARD_FLIP_VERTICAL,$/;"	e	enum:hotkey::Hotkey_command
HOTKEY_EDITOR_CLIPBOARD_PASTE	client/hotkey/hotkey_command.h	/^	        HOTKEY_EDITOR_CLIPBOARD_PASTE,$/;"	e	enum:hotkey::Hotkey_command
HOTKEY_EDITOR_CLIPBOARD_ROTATE_CCW	client/hotkey/hotkey_command.h	/^	        HOTKEY_EDITOR_CLIPBOARD_ROTATE_CW, HOTKEY_EDITOR_CLIPBOARD_ROTATE_CCW,$/;"	e	enum:hotkey::Hotkey_command
HOTKEY_EDITOR_CLIPBOARD_ROTATE_CW	client/hotkey/hotkey_command.h	/^	        HOTKEY_EDITOR_CLIPBOARD_ROTATE_CW, HOTKEY_EDITOR_CLIPBOARD_ROTATE_CCW,$/;"	e	enum:hotkey::Hotkey_command
HOTKEY_EDITOR_CUSTOM_TODS	client/hotkey/hotkey_command.h	/^	        HOTKEY_EDITOR_CUSTOM_TODS,$/;"	e	enum:hotkey::Hotkey_command
HOTKEY_EDITOR_DRAW_COORDINATES	client/hotkey/hotkey_command.h	/^	        HOTKEY_EDITOR_DRAW_COORDINATES, HOTKEY_EDITOR_DRAW_TERRAIN_CODES, HOTKEY_EDITOR_DRAW_NUM_OF_BITMAPS,$/;"	e	enum:hotkey::Hotkey_command
HOTKEY_EDITOR_DRAW_NUM_OF_BITMAPS	client/hotkey/hotkey_command.h	/^	        HOTKEY_EDITOR_DRAW_COORDINATES, HOTKEY_EDITOR_DRAW_TERRAIN_CODES, HOTKEY_EDITOR_DRAW_NUM_OF_BITMAPS,$/;"	e	enum:hotkey::Hotkey_command
HOTKEY_EDITOR_DRAW_TERRAIN_CODES	client/hotkey/hotkey_command.h	/^	        HOTKEY_EDITOR_DRAW_COORDINATES, HOTKEY_EDITOR_DRAW_TERRAIN_CODES, HOTKEY_EDITOR_DRAW_NUM_OF_BITMAPS,$/;"	e	enum:hotkey::Hotkey_command
HOTKEY_EDITOR_LOCAL_TIME	client/hotkey/hotkey_command.h	/^	        HOTKEY_EDITOR_LOCAL_TIME,$/;"	e	enum:hotkey::Hotkey_command
HOTKEY_EDITOR_MAP_APPLY_MASK	client/hotkey/hotkey_command.h	/^	        HOTKEY_EDITOR_MAP_GENERATE, HOTKEY_EDITOR_MAP_APPLY_MASK,$/;"	e	enum:hotkey::Hotkey_command
HOTKEY_EDITOR_MAP_CLOSE	client/hotkey/hotkey_command.h	/^	        HOTKEY_EDITOR_MAP_CLOSE,$/;"	e	enum:hotkey::Hotkey_command
HOTKEY_EDITOR_MAP_CREATE_MASK_TO	client/hotkey/hotkey_command.h	/^	        HOTKEY_EDITOR_MAP_CREATE_MASK_TO,$/;"	e	enum:hotkey::Hotkey_command
HOTKEY_EDITOR_MAP_GENERATE	client/hotkey/hotkey_command.h	/^	        HOTKEY_EDITOR_MAP_GENERATE, HOTKEY_EDITOR_MAP_APPLY_MASK,$/;"	e	enum:hotkey::Hotkey_command
HOTKEY_EDITOR_MAP_INFO	client/hotkey/hotkey_command.h	/^	        HOTKEY_EDITOR_MAP_REVERT, HOTKEY_EDITOR_MAP_INFO,$/;"	e	enum:hotkey::Hotkey_command
HOTKEY_EDITOR_MAP_LOAD	client/hotkey/hotkey_command.h	/^	        HOTKEY_EDITOR_MAP_NEW, HOTKEY_EDITOR_MAP_LOAD, HOTKEY_EDITOR_MAP_SAVE,$/;"	e	enum:hotkey::Hotkey_command
HOTKEY_EDITOR_MAP_NEW	client/hotkey/hotkey_command.h	/^	        HOTKEY_EDITOR_MAP_NEW, HOTKEY_EDITOR_MAP_LOAD, HOTKEY_EDITOR_MAP_SAVE,$/;"	e	enum:hotkey::Hotkey_command
HOTKEY_EDITOR_MAP_RESIZE	client/hotkey/hotkey_command.h	/^	        HOTKEY_EDITOR_MAP_RESIZE, HOTKEY_EDITOR_MAP_ROTATE,$/;"	e	enum:hotkey::Hotkey_command
HOTKEY_EDITOR_MAP_REVERT	client/hotkey/hotkey_command.h	/^	        HOTKEY_EDITOR_MAP_REVERT, HOTKEY_EDITOR_MAP_INFO,$/;"	e	enum:hotkey::Hotkey_command
HOTKEY_EDITOR_MAP_ROTATE	client/hotkey/hotkey_command.h	/^	        HOTKEY_EDITOR_MAP_RESIZE, HOTKEY_EDITOR_MAP_ROTATE,$/;"	e	enum:hotkey::Hotkey_command
HOTKEY_EDITOR_MAP_SAVE	client/hotkey/hotkey_command.h	/^	        HOTKEY_EDITOR_MAP_NEW, HOTKEY_EDITOR_MAP_LOAD, HOTKEY_EDITOR_MAP_SAVE,$/;"	e	enum:hotkey::Hotkey_command
HOTKEY_EDITOR_MAP_SAVE_ALL	client/hotkey/hotkey_command.h	/^	        HOTKEY_EDITOR_MAP_SAVE_AS, HOTKEY_EDITOR_MAP_SAVE_ALL,$/;"	e	enum:hotkey::Hotkey_command
HOTKEY_EDITOR_MAP_SAVE_AS	client/hotkey/hotkey_command.h	/^	        HOTKEY_EDITOR_MAP_SAVE_AS, HOTKEY_EDITOR_MAP_SAVE_ALL,$/;"	e	enum:hotkey::Hotkey_command
HOTKEY_EDITOR_MAP_SWITCH	client/hotkey/hotkey_command.h	/^	        HOTKEY_EDITOR_MAP_SWITCH,$/;"	e	enum:hotkey::Hotkey_command
HOTKEY_EDITOR_NO_UPDATE_TRANSITIONS	client/hotkey/hotkey_command.h	/^	        HOTKEY_EDITOR_AUTO_UPDATE_TRANSITIONS, HOTKEY_EDITOR_PARTIAL_UPDATE_TRANSITIONS, HOTKEY_EDITOR_NO_UPDATE_TRANSITIONS,$/;"	e	enum:hotkey::Hotkey_command
HOTKEY_EDITOR_PALETTE_DOWNSCROLL	client/hotkey/hotkey_command.h	/^	        HOTKEY_EDITOR_PALETTE_GROUPS, HOTKEY_EDITOR_PALETTE_UPSCROLL, HOTKEY_EDITOR_PALETTE_DOWNSCROLL,$/;"	e	enum:hotkey::Hotkey_command
HOTKEY_EDITOR_PALETTE_GROUPS	client/hotkey/hotkey_command.h	/^	        HOTKEY_EDITOR_PALETTE_GROUPS, HOTKEY_EDITOR_PALETTE_UPSCROLL, HOTKEY_EDITOR_PALETTE_DOWNSCROLL,$/;"	e	enum:hotkey::Hotkey_command
HOTKEY_EDITOR_PALETTE_ITEMS_CLEAR	client/hotkey/hotkey_command.h	/^	        HOTKEY_EDITOR_PALETTE_ITEM_SWAP, HOTKEY_EDITOR_PALETTE_ITEMS_CLEAR,$/;"	e	enum:hotkey::Hotkey_command
HOTKEY_EDITOR_PALETTE_ITEM_SWAP	client/hotkey/hotkey_command.h	/^	        HOTKEY_EDITOR_PALETTE_ITEM_SWAP, HOTKEY_EDITOR_PALETTE_ITEMS_CLEAR,$/;"	e	enum:hotkey::Hotkey_command
HOTKEY_EDITOR_PALETTE_UPSCROLL	client/hotkey/hotkey_command.h	/^	        HOTKEY_EDITOR_PALETTE_GROUPS, HOTKEY_EDITOR_PALETTE_UPSCROLL, HOTKEY_EDITOR_PALETTE_DOWNSCROLL,$/;"	e	enum:hotkey::Hotkey_command
HOTKEY_EDITOR_PARTIAL_UNDO	client/hotkey/hotkey_command.h	/^	        HOTKEY_EDITOR_PARTIAL_UNDO,$/;"	e	enum:hotkey::Hotkey_command
HOTKEY_EDITOR_PARTIAL_UPDATE_TRANSITIONS	client/hotkey/hotkey_command.h	/^	        HOTKEY_EDITOR_AUTO_UPDATE_TRANSITIONS, HOTKEY_EDITOR_PARTIAL_UPDATE_TRANSITIONS, HOTKEY_EDITOR_NO_UPDATE_TRANSITIONS,$/;"	e	enum:hotkey::Hotkey_command
HOTKEY_EDITOR_PLAYLIST	client/hotkey/hotkey_command.h	/^	        HOTKEY_EDITOR_PLAYLIST,$/;"	e	enum:hotkey::Hotkey_command
HOTKEY_EDITOR_REFRESH	client/hotkey/hotkey_command.h	/^	        HOTKEY_EDITOR_REFRESH,$/;"	e	enum:hotkey::Hotkey_command
HOTKEY_EDITOR_REFRESH_IMAGE_CACHE	client/hotkey/hotkey_command.h	/^	        HOTKEY_EDITOR_REFRESH_IMAGE_CACHE,$/;"	e	enum:hotkey::Hotkey_command
HOTKEY_EDITOR_REMOVE_LOCATION	client/hotkey/hotkey_command.h	/^	        HOTKEY_EDITOR_REMOVE_LOCATION,$/;"	e	enum:hotkey::Hotkey_command
HOTKEY_EDITOR_SCENARIO_EDIT	client/hotkey/hotkey_command.h	/^	        HOTKEY_EDITOR_SCENARIO_EDIT,$/;"	e	enum:hotkey::Hotkey_command
HOTKEY_EDITOR_SCENARIO_NEW	client/hotkey/hotkey_command.h	/^	        HOTKEY_EDITOR_SCENARIO_NEW,$/;"	e	enum:hotkey::Hotkey_command
HOTKEY_EDITOR_SCENARIO_SAVE_AS	client/hotkey/hotkey_command.h	/^	        HOTKEY_EDITOR_SCENARIO_SAVE_AS,$/;"	e	enum:hotkey::Hotkey_command
HOTKEY_EDITOR_SCHEDULE	client/hotkey/hotkey_command.h	/^	        HOTKEY_EDITOR_SCHEDULE,$/;"	e	enum:hotkey::Hotkey_command
HOTKEY_EDITOR_SELECTION_COPY	client/hotkey/hotkey_command.h	/^	        HOTKEY_EDITOR_SELECTION_CUT, HOTKEY_EDITOR_SELECTION_COPY,$/;"	e	enum:hotkey::Hotkey_command
HOTKEY_EDITOR_SELECTION_CUT	client/hotkey/hotkey_command.h	/^	        HOTKEY_EDITOR_SELECTION_CUT, HOTKEY_EDITOR_SELECTION_COPY,$/;"	e	enum:hotkey::Hotkey_command
HOTKEY_EDITOR_SELECTION_EXPORT	client/hotkey/hotkey_command.h	/^	        HOTKEY_EDITOR_SELECTION_EXPORT,$/;"	e	enum:hotkey::Hotkey_command
HOTKEY_EDITOR_SELECTION_FILL	client/hotkey/hotkey_command.h	/^	        HOTKEY_EDITOR_SELECTION_FILL,$/;"	e	enum:hotkey::Hotkey_command
HOTKEY_EDITOR_SELECTION_FLIP	client/hotkey/hotkey_command.h	/^	        HOTKEY_EDITOR_SELECTION_ROTATE, HOTKEY_EDITOR_SELECTION_FLIP,$/;"	e	enum:hotkey::Hotkey_command
HOTKEY_EDITOR_SELECTION_GENERATE	client/hotkey/hotkey_command.h	/^	        HOTKEY_EDITOR_SELECTION_GENERATE, HOTKEY_EDITOR_SELECTION_RANDOMIZE,$/;"	e	enum:hotkey::Hotkey_command
HOTKEY_EDITOR_SELECTION_RANDOMIZE	client/hotkey/hotkey_command.h	/^	        HOTKEY_EDITOR_SELECTION_GENERATE, HOTKEY_EDITOR_SELECTION_RANDOMIZE,$/;"	e	enum:hotkey::Hotkey_command
HOTKEY_EDITOR_SELECTION_ROTATE	client/hotkey/hotkey_command.h	/^	        HOTKEY_EDITOR_SELECTION_ROTATE, HOTKEY_EDITOR_SELECTION_FLIP,$/;"	e	enum:hotkey::Hotkey_command
HOTKEY_EDITOR_SELECT_ALL	client/hotkey/hotkey_command.h	/^	        HOTKEY_EDITOR_SELECT_ALL, HOTKEY_EDITOR_SELECT_INVERSE,	HOTKEY_EDITOR_SELECT_NONE,$/;"	e	enum:hotkey::Hotkey_command
HOTKEY_EDITOR_SELECT_INVERSE	client/hotkey/hotkey_command.h	/^	        HOTKEY_EDITOR_SELECT_ALL, HOTKEY_EDITOR_SELECT_INVERSE,	HOTKEY_EDITOR_SELECT_NONE,$/;"	e	enum:hotkey::Hotkey_command
HOTKEY_EDITOR_SELECT_NONE	client/hotkey/hotkey_command.h	/^	        HOTKEY_EDITOR_SELECT_ALL, HOTKEY_EDITOR_SELECT_INVERSE,	HOTKEY_EDITOR_SELECT_NONE,$/;"	e	enum:hotkey::Hotkey_command
HOTKEY_EDITOR_SIDE_EDIT	client/hotkey/hotkey_command.h	/^	        HOTKEY_EDITOR_SIDE_EDIT,$/;"	e	enum:hotkey::Hotkey_command
HOTKEY_EDITOR_SIDE_NEW	client/hotkey/hotkey_command.h	/^	        HOTKEY_EDITOR_SIDE_NEW,$/;"	e	enum:hotkey::Hotkey_command
HOTKEY_EDITOR_SIDE_REMOVE	client/hotkey/hotkey_command.h	/^	        HOTKEY_EDITOR_SIDE_REMOVE,$/;"	e	enum:hotkey::Hotkey_command
HOTKEY_EDITOR_TOGGLE_TRANSITIONS	client/hotkey/hotkey_command.h	/^	        HOTKEY_EDITOR_UPDATE_TRANSITIONS, HOTKEY_EDITOR_TOGGLE_TRANSITIONS,$/;"	e	enum:hotkey::Hotkey_command
HOTKEY_EDITOR_TOOL_FILL	client/hotkey/hotkey_command.h	/^	        HOTKEY_EDITOR_TOOL_PAINT, HOTKEY_EDITOR_TOOL_FILL,$/;"	e	enum:hotkey::Hotkey_command
HOTKEY_EDITOR_TOOL_ITEM	client/hotkey/hotkey_command.h	/^	        HOTKEY_EDITOR_TOOL_UNIT, HOTKEY_EDITOR_TOOL_VILLAGE, HOTKEY_EDITOR_TOOL_ITEM, HOTKEY_EDITOR_TOOL_SOUNDSOURCE,$/;"	e	enum:hotkey::Hotkey_command
HOTKEY_EDITOR_TOOL_LABEL	client/hotkey/hotkey_command.h	/^	        HOTKEY_EDITOR_TOOL_SELECT, HOTKEY_EDITOR_TOOL_STARTING_POSITION, HOTKEY_EDITOR_TOOL_LABEL,$/;"	e	enum:hotkey::Hotkey_command
HOTKEY_EDITOR_TOOL_NEXT	client/hotkey/hotkey_command.h	/^	        HOTKEY_EDITOR_TOOL_NEXT,$/;"	e	enum:hotkey::Hotkey_command
HOTKEY_EDITOR_TOOL_PAINT	client/hotkey/hotkey_command.h	/^	        HOTKEY_EDITOR_TOOL_PAINT, HOTKEY_EDITOR_TOOL_FILL,$/;"	e	enum:hotkey::Hotkey_command
HOTKEY_EDITOR_TOOL_SELECT	client/hotkey/hotkey_command.h	/^	        HOTKEY_EDITOR_TOOL_SELECT, HOTKEY_EDITOR_TOOL_STARTING_POSITION, HOTKEY_EDITOR_TOOL_LABEL,$/;"	e	enum:hotkey::Hotkey_command
HOTKEY_EDITOR_TOOL_SOUNDSOURCE	client/hotkey/hotkey_command.h	/^	        HOTKEY_EDITOR_TOOL_UNIT, HOTKEY_EDITOR_TOOL_VILLAGE, HOTKEY_EDITOR_TOOL_ITEM, HOTKEY_EDITOR_TOOL_SOUNDSOURCE,$/;"	e	enum:hotkey::Hotkey_command
HOTKEY_EDITOR_TOOL_STARTING_POSITION	client/hotkey/hotkey_command.h	/^	        HOTKEY_EDITOR_TOOL_SELECT, HOTKEY_EDITOR_TOOL_STARTING_POSITION, HOTKEY_EDITOR_TOOL_LABEL,$/;"	e	enum:hotkey::Hotkey_command
HOTKEY_EDITOR_TOOL_UNIT	client/hotkey/hotkey_command.h	/^	        HOTKEY_EDITOR_TOOL_UNIT, HOTKEY_EDITOR_TOOL_VILLAGE, HOTKEY_EDITOR_TOOL_ITEM, HOTKEY_EDITOR_TOOL_SOUNDSOURCE,$/;"	e	enum:hotkey::Hotkey_command
HOTKEY_EDITOR_TOOL_VILLAGE	client/hotkey/hotkey_command.h	/^	        HOTKEY_EDITOR_TOOL_UNIT, HOTKEY_EDITOR_TOOL_VILLAGE, HOTKEY_EDITOR_TOOL_ITEM, HOTKEY_EDITOR_TOOL_SOUNDSOURCE,$/;"	e	enum:hotkey::Hotkey_command
HOTKEY_EDITOR_UNIT_CHANGE_ID	client/hotkey/hotkey_command.h	/^	        HOTKEY_EDITOR_UNIT_CHANGE_ID, HOTKEY_EDITOR_UNIT_TOGGLE_LOYAL,$/;"	e	enum:hotkey::Hotkey_command
HOTKEY_EDITOR_UNIT_FACING	client/hotkey/hotkey_command.h	/^	        HOTKEY_EDITOR_UNIT_FACING,$/;"	e	enum:hotkey::Hotkey_command
HOTKEY_EDITOR_UNIT_RECRUIT_ASSIGN	client/hotkey/hotkey_command.h	/^	        HOTKEY_EDITOR_UNIT_RECRUIT_ASSIGN,$/;"	e	enum:hotkey::Hotkey_command
HOTKEY_EDITOR_UNIT_TOGGLE_CANRECRUIT	client/hotkey/hotkey_command.h	/^	        HOTKEY_EDITOR_UNIT_TOGGLE_CANRECRUIT, HOTKEY_EDITOR_UNIT_TOGGLE_RENAMEABLE,$/;"	e	enum:hotkey::Hotkey_command
HOTKEY_EDITOR_UNIT_TOGGLE_LOYAL	client/hotkey/hotkey_command.h	/^	        HOTKEY_EDITOR_UNIT_CHANGE_ID, HOTKEY_EDITOR_UNIT_TOGGLE_LOYAL,$/;"	e	enum:hotkey::Hotkey_command
HOTKEY_EDITOR_UNIT_TOGGLE_RENAMEABLE	client/hotkey/hotkey_command.h	/^	        HOTKEY_EDITOR_UNIT_TOGGLE_CANRECRUIT, HOTKEY_EDITOR_UNIT_TOGGLE_RENAMEABLE,$/;"	e	enum:hotkey::Hotkey_command
HOTKEY_EDITOR_UPDATE_TRANSITIONS	client/hotkey/hotkey_command.h	/^	        HOTKEY_EDITOR_UPDATE_TRANSITIONS, HOTKEY_EDITOR_TOGGLE_TRANSITIONS,$/;"	e	enum:hotkey::Hotkey_command
HOTKEY_ENDTURN	client/hotkey/hotkey_command.h	/^	        HOTKEY_RECRUIT, HOTKEY_REPEAT_RECRUIT, HOTKEY_RECALL, HOTKEY_ENDTURN,$/;"	e	enum:hotkey::Hotkey_command
HOTKEY_END_UNIT_TURN	client/hotkey/hotkey_command.h	/^	        HOTKEY_END_UNIT_TURN, HOTKEY_LEADER,$/;"	e	enum:hotkey::Hotkey_command
HOTKEY_FULLSCREEN	client/hotkey/hotkey_command.h	/^	        HOTKEY_FULLSCREEN, HOTKEY_SCREENSHOT, HOTKEY_MAP_SCREENSHOT, HOTKEY_ACCELERATED,$/;"	e	enum:hotkey::Hotkey_command
HOTKEY_HELP	client/hotkey/hotkey_command.h	/^	        HOTKEY_SEARCH, HOTKEY_SPEAK_ALLY, HOTKEY_SPEAK_ALL, HOTKEY_HELP,$/;"	e	enum:hotkey::Hotkey_command
HOTKEY_ITEM_H	client/hotkey/hotkey_item.h	6;"	d
HOTKEY_KILL_UNIT	client/hotkey/hotkey_command.h	/^	        HOTKEY_SPEAK, HOTKEY_CREATE_UNIT, HOTKEY_CHANGE_SIDE, HOTKEY_KILL_UNIT, HOTKEY_PREFERENCES,$/;"	e	enum:hotkey::Hotkey_command
HOTKEY_LABEL_SETTINGS	client/hotkey/hotkey_command.h	/^	        HOTKEY_LABEL_SETTINGS,$/;"	e	enum:hotkey::Hotkey_command
HOTKEY_LABEL_TEAM_TERRAIN	client/hotkey/hotkey_command.h	/^	        HOTKEY_LABEL_TEAM_TERRAIN, HOTKEY_LABEL_TERRAIN, HOTKEY_CLEAR_LABELS,HOTKEY_SHOW_ENEMY_MOVES, HOTKEY_BEST_ENEMY_MOVES,$/;"	e	enum:hotkey::Hotkey_command
HOTKEY_LABEL_TERRAIN	client/hotkey/hotkey_command.h	/^	        HOTKEY_LABEL_TEAM_TERRAIN, HOTKEY_LABEL_TERRAIN, HOTKEY_CLEAR_LABELS,HOTKEY_SHOW_ENEMY_MOVES, HOTKEY_BEST_ENEMY_MOVES,$/;"	e	enum:hotkey::Hotkey_command
HOTKEY_LANGUAGE	client/hotkey/hotkey_command.h	/^	        HOTKEY_CHAT_LOG, HOTKEY_LANGUAGE, HOTKEY_ANIMATE_MAP,$/;"	e	enum:hotkey::Hotkey_command
HOTKEY_LEADER	client/hotkey/hotkey_command.h	/^	        HOTKEY_END_UNIT_TURN, HOTKEY_LEADER,$/;"	e	enum:hotkey::Hotkey_command
HOTKEY_LOAD_GAME	client/hotkey/hotkey_command.h	/^	        HOTKEY_SAVE_GAME, HOTKEY_SAVE_REPLAY, HOTKEY_SAVE_MAP, HOTKEY_LOAD_GAME,$/;"	e	enum:hotkey::Hotkey_command
HOTKEY_MAP_SCREENSHOT	client/hotkey/hotkey_command.h	/^	        HOTKEY_FULLSCREEN, HOTKEY_SCREENSHOT, HOTKEY_MAP_SCREENSHOT, HOTKEY_ACCELERATED,$/;"	e	enum:hotkey::Hotkey_command
HOTKEY_MINIMAP_CODING_TERRAIN	client/hotkey/hotkey_command.h	/^	        HOTKEY_MINIMAP_CODING_TERRAIN, HOTKEY_MINIMAP_CODING_UNIT,$/;"	e	enum:hotkey::Hotkey_command
HOTKEY_MINIMAP_CODING_UNIT	client/hotkey/hotkey_command.h	/^	        HOTKEY_MINIMAP_CODING_TERRAIN, HOTKEY_MINIMAP_CODING_UNIT,$/;"	e	enum:hotkey::Hotkey_command
HOTKEY_MINIMAP_DRAW_TERRAIN	client/hotkey/hotkey_command.h	/^	        HOTKEY_MINIMAP_DRAW_UNITS, HOTKEY_MINIMAP_DRAW_VILLAGES, HOTKEY_MINIMAP_DRAW_TERRAIN,$/;"	e	enum:hotkey::Hotkey_command
HOTKEY_MINIMAP_DRAW_UNITS	client/hotkey/hotkey_command.h	/^	        HOTKEY_MINIMAP_DRAW_UNITS, HOTKEY_MINIMAP_DRAW_VILLAGES, HOTKEY_MINIMAP_DRAW_TERRAIN,$/;"	e	enum:hotkey::Hotkey_command
HOTKEY_MINIMAP_DRAW_VILLAGES	client/hotkey/hotkey_command.h	/^	        HOTKEY_MINIMAP_DRAW_UNITS, HOTKEY_MINIMAP_DRAW_VILLAGES, HOTKEY_MINIMAP_DRAW_TERRAIN,$/;"	e	enum:hotkey::Hotkey_command
HOTKEY_MOUSE_SCROLL	client/hotkey/hotkey_command.h	/^	        HOTKEY_TOGGLE_ELLIPSES, HOTKEY_TOGGLE_GRID, HOTKEY_STATUS_TABLE, HOTKEY_MUTE, HOTKEY_MOUSE_SCROLL,$/;"	e	enum:hotkey::Hotkey_command
HOTKEY_MOVE_ACTION	client/hotkey/hotkey_command.h	/^	        HOTKEY_MOVE_ACTION, HOTKEY_SELECT_AND_ACTION,$/;"	e	enum:hotkey::Hotkey_command
HOTKEY_MUTE	client/hotkey/hotkey_command.h	/^	        HOTKEY_TOGGLE_ELLIPSES, HOTKEY_TOGGLE_GRID, HOTKEY_STATUS_TABLE, HOTKEY_MUTE, HOTKEY_MOUSE_SCROLL,$/;"	e	enum:hotkey::Hotkey_command
HOTKEY_NULL	client/hotkey/hotkey_command.h	/^                HOTKEY_NULL$/;"	e	enum:hotkey::Hotkey_command
HOTKEY_OBJECTIVES	client/hotkey/hotkey_command.h	/^	        HOTKEY_OBJECTIVES, HOTKEY_UNIT_LIST, HOTKEY_STATISTICS, HOTKEY_STOP_NETWORK, HOTKEY_START_NETWORK, HOTKEY_SURRENDER, HOTKEY_QUIT_GAME, HOTKEY_QUIT_TO_DESKTOP,$/;"	e	enum:hotkey::Hotkey_command
HOTKEY_OKAY	client/hotkey/hotkey_command.h	/^	        HOTKEY_CANCEL, HOTKEY_OKAY,$/;"	e	enum:hotkey::Hotkey_command
HOTKEY_PREFERENCES	client/hotkey/hotkey_command.h	/^	        HOTKEY_SPEAK, HOTKEY_CREATE_UNIT, HOTKEY_CHANGE_SIDE, HOTKEY_KILL_UNIT, HOTKEY_PREFERENCES,$/;"	e	enum:hotkey::Hotkey_command
HOTKEY_QUIT_GAME	client/hotkey/hotkey_command.h	/^	        HOTKEY_OBJECTIVES, HOTKEY_UNIT_LIST, HOTKEY_STATISTICS, HOTKEY_STOP_NETWORK, HOTKEY_START_NETWORK, HOTKEY_SURRENDER, HOTKEY_QUIT_GAME, HOTKEY_QUIT_TO_DESKTOP,$/;"	e	enum:hotkey::Hotkey_command
HOTKEY_QUIT_TO_DESKTOP	client/hotkey/hotkey_command.h	/^	        HOTKEY_OBJECTIVES, HOTKEY_UNIT_LIST, HOTKEY_STATISTICS, HOTKEY_STOP_NETWORK, HOTKEY_START_NETWORK, HOTKEY_SURRENDER, HOTKEY_QUIT_GAME, HOTKEY_QUIT_TO_DESKTOP,$/;"	e	enum:hotkey::Hotkey_command
HOTKEY_RECALL	client/hotkey/hotkey_command.h	/^	        HOTKEY_RECRUIT, HOTKEY_REPEAT_RECRUIT, HOTKEY_RECALL, HOTKEY_ENDTURN,$/;"	e	enum:hotkey::Hotkey_command
HOTKEY_RECRUIT	client/hotkey/hotkey_command.h	/^	        HOTKEY_RECRUIT, HOTKEY_REPEAT_RECRUIT, HOTKEY_RECALL, HOTKEY_ENDTURN,$/;"	e	enum:hotkey::Hotkey_command
HOTKEY_REDO	client/hotkey/hotkey_command.h	/^	        HOTKEY_UNDO, HOTKEY_REDO,$/;"	e	enum:hotkey::Hotkey_command
HOTKEY_RENAME_UNIT	client/hotkey/hotkey_command.h	/^	        HOTKEY_UNIT_DESCRIPTION, HOTKEY_RENAME_UNIT, HOTKEY_DELETE_UNIT,$/;"	e	enum:hotkey::Hotkey_command
HOTKEY_REPEAT_RECRUIT	client/hotkey/hotkey_command.h	/^	        HOTKEY_RECRUIT, HOTKEY_REPEAT_RECRUIT, HOTKEY_RECALL, HOTKEY_ENDTURN,$/;"	e	enum:hotkey::Hotkey_command
HOTKEY_REPLAY_EXIT	client/hotkey/hotkey_command.h	/^	        HOTKEY_REPLAY_EXIT,$/;"	e	enum:hotkey::Hotkey_command
HOTKEY_REPLAY_NEXT_MOVE	client/hotkey/hotkey_command.h	/^	        HOTKEY_REPLAY_NEXT_SIDE, HOTKEY_REPLAY_NEXT_MOVE, HOTKEY_REPLAY_SHOW_EVERYTHING,$/;"	e	enum:hotkey::Hotkey_command
HOTKEY_REPLAY_NEXT_SIDE	client/hotkey/hotkey_command.h	/^	        HOTKEY_REPLAY_NEXT_SIDE, HOTKEY_REPLAY_NEXT_MOVE, HOTKEY_REPLAY_SHOW_EVERYTHING,$/;"	e	enum:hotkey::Hotkey_command
HOTKEY_REPLAY_NEXT_TURN	client/hotkey/hotkey_command.h	/^	        HOTKEY_REPLAY_PLAY, HOTKEY_REPLAY_RESET, HOTKEY_REPLAY_STOP, HOTKEY_REPLAY_NEXT_TURN,$/;"	e	enum:hotkey::Hotkey_command
HOTKEY_REPLAY_PLAY	client/hotkey/hotkey_command.h	/^	        HOTKEY_REPLAY_PLAY, HOTKEY_REPLAY_RESET, HOTKEY_REPLAY_STOP, HOTKEY_REPLAY_NEXT_TURN,$/;"	e	enum:hotkey::Hotkey_command
HOTKEY_REPLAY_RESET	client/hotkey/hotkey_command.h	/^	        HOTKEY_REPLAY_PLAY, HOTKEY_REPLAY_RESET, HOTKEY_REPLAY_STOP, HOTKEY_REPLAY_NEXT_TURN,$/;"	e	enum:hotkey::Hotkey_command
HOTKEY_REPLAY_SHOW_EACH	client/hotkey/hotkey_command.h	/^	        HOTKEY_REPLAY_SHOW_EACH, HOTKEY_REPLAY_SHOW_TEAM1,$/;"	e	enum:hotkey::Hotkey_command
HOTKEY_REPLAY_SHOW_EVERYTHING	client/hotkey/hotkey_command.h	/^	        HOTKEY_REPLAY_NEXT_SIDE, HOTKEY_REPLAY_NEXT_MOVE, HOTKEY_REPLAY_SHOW_EVERYTHING,$/;"	e	enum:hotkey::Hotkey_command
HOTKEY_REPLAY_SHOW_TEAM1	client/hotkey/hotkey_command.h	/^	        HOTKEY_REPLAY_SHOW_EACH, HOTKEY_REPLAY_SHOW_TEAM1,$/;"	e	enum:hotkey::Hotkey_command
HOTKEY_REPLAY_SKIP_ANIMATION	client/hotkey/hotkey_command.h	/^	        HOTKEY_REPLAY_SKIP_ANIMATION,$/;"	e	enum:hotkey::Hotkey_command
HOTKEY_REPLAY_STOP	client/hotkey/hotkey_command.h	/^	        HOTKEY_REPLAY_PLAY, HOTKEY_REPLAY_RESET, HOTKEY_REPLAY_STOP, HOTKEY_REPLAY_NEXT_TURN,$/;"	e	enum:hotkey::Hotkey_command
HOTKEY_SAVE_GAME	client/hotkey/hotkey_command.h	/^	        HOTKEY_SAVE_GAME, HOTKEY_SAVE_REPLAY, HOTKEY_SAVE_MAP, HOTKEY_LOAD_GAME,$/;"	e	enum:hotkey::Hotkey_command
HOTKEY_SAVE_MAP	client/hotkey/hotkey_command.h	/^	        HOTKEY_SAVE_GAME, HOTKEY_SAVE_REPLAY, HOTKEY_SAVE_MAP, HOTKEY_LOAD_GAME,$/;"	e	enum:hotkey::Hotkey_command
HOTKEY_SAVE_REPLAY	client/hotkey/hotkey_command.h	/^	        HOTKEY_SAVE_GAME, HOTKEY_SAVE_REPLAY, HOTKEY_SAVE_MAP, HOTKEY_LOAD_GAME,$/;"	e	enum:hotkey::Hotkey_command
HOTKEY_SCREENSHOT	client/hotkey/hotkey_command.h	/^	        HOTKEY_FULLSCREEN, HOTKEY_SCREENSHOT, HOTKEY_MAP_SCREENSHOT, HOTKEY_ACCELERATED,$/;"	e	enum:hotkey::Hotkey_command
HOTKEY_SCROLL_DOWN	client/hotkey/hotkey_command.h	/^	        HOTKEY_SCROLL_UP, HOTKEY_SCROLL_DOWN, HOTKEY_SCROLL_LEFT, HOTKEY_SCROLL_RIGHT,$/;"	e	enum:hotkey::Hotkey_command
HOTKEY_SCROLL_LEFT	client/hotkey/hotkey_command.h	/^	        HOTKEY_SCROLL_UP, HOTKEY_SCROLL_DOWN, HOTKEY_SCROLL_LEFT, HOTKEY_SCROLL_RIGHT,$/;"	e	enum:hotkey::Hotkey_command
HOTKEY_SCROLL_RIGHT	client/hotkey/hotkey_command.h	/^	        HOTKEY_SCROLL_UP, HOTKEY_SCROLL_DOWN, HOTKEY_SCROLL_LEFT, HOTKEY_SCROLL_RIGHT,$/;"	e	enum:hotkey::Hotkey_command
HOTKEY_SCROLL_UP	client/hotkey/hotkey_command.h	/^	        HOTKEY_SCROLL_UP, HOTKEY_SCROLL_DOWN, HOTKEY_SCROLL_LEFT, HOTKEY_SCROLL_RIGHT,$/;"	e	enum:hotkey::Hotkey_command
HOTKEY_SEARCH	client/hotkey/hotkey_command.h	/^	        HOTKEY_SEARCH, HOTKEY_SPEAK_ALLY, HOTKEY_SPEAK_ALL, HOTKEY_HELP,$/;"	e	enum:hotkey::Hotkey_command
HOTKEY_SELECT_AND_ACTION	client/hotkey/hotkey_command.h	/^	        HOTKEY_MOVE_ACTION, HOTKEY_SELECT_AND_ACTION,$/;"	e	enum:hotkey::Hotkey_command
HOTKEY_SELECT_HEX	client/hotkey/hotkey_command.h	/^	        HOTKEY_SELECT_HEX, HOTKEY_DESELECT_HEX,$/;"	e	enum:hotkey::Hotkey_command
HOTKEY_SHOW_ENEMY_MOVES	client/hotkey/hotkey_command.h	/^	        HOTKEY_LABEL_TEAM_TERRAIN, HOTKEY_LABEL_TERRAIN, HOTKEY_CLEAR_LABELS,HOTKEY_SHOW_ENEMY_MOVES, HOTKEY_BEST_ENEMY_MOVES,$/;"	e	enum:hotkey::Hotkey_command
HOTKEY_SPEAK	client/hotkey/hotkey_command.h	/^	        HOTKEY_SPEAK, HOTKEY_CREATE_UNIT, HOTKEY_CHANGE_SIDE, HOTKEY_KILL_UNIT, HOTKEY_PREFERENCES,$/;"	e	enum:hotkey::Hotkey_command
HOTKEY_SPEAK_ALL	client/hotkey/hotkey_command.h	/^	        HOTKEY_SEARCH, HOTKEY_SPEAK_ALLY, HOTKEY_SPEAK_ALL, HOTKEY_HELP,$/;"	e	enum:hotkey::Hotkey_command
HOTKEY_SPEAK_ALLY	client/hotkey/hotkey_command.h	/^	        HOTKEY_SEARCH, HOTKEY_SPEAK_ALLY, HOTKEY_SPEAK_ALL, HOTKEY_HELP,$/;"	e	enum:hotkey::Hotkey_command
HOTKEY_START_NETWORK	client/hotkey/hotkey_command.h	/^	        HOTKEY_OBJECTIVES, HOTKEY_UNIT_LIST, HOTKEY_STATISTICS, HOTKEY_STOP_NETWORK, HOTKEY_START_NETWORK, HOTKEY_SURRENDER, HOTKEY_QUIT_GAME, HOTKEY_QUIT_TO_DESKTOP,$/;"	e	enum:hotkey::Hotkey_command
HOTKEY_STATISTICS	client/hotkey/hotkey_command.h	/^	        HOTKEY_OBJECTIVES, HOTKEY_UNIT_LIST, HOTKEY_STATISTICS, HOTKEY_STOP_NETWORK, HOTKEY_START_NETWORK, HOTKEY_SURRENDER, HOTKEY_QUIT_GAME, HOTKEY_QUIT_TO_DESKTOP,$/;"	e	enum:hotkey::Hotkey_command
HOTKEY_STATUS_TABLE	client/hotkey/hotkey_command.h	/^	        HOTKEY_TOGGLE_ELLIPSES, HOTKEY_TOGGLE_GRID, HOTKEY_STATUS_TABLE, HOTKEY_MUTE, HOTKEY_MOUSE_SCROLL,$/;"	e	enum:hotkey::Hotkey_command
HOTKEY_STOP_NETWORK	client/hotkey/hotkey_command.h	/^	        HOTKEY_OBJECTIVES, HOTKEY_UNIT_LIST, HOTKEY_STATISTICS, HOTKEY_STOP_NETWORK, HOTKEY_START_NETWORK, HOTKEY_SURRENDER, HOTKEY_QUIT_GAME, HOTKEY_QUIT_TO_DESKTOP,$/;"	e	enum:hotkey::Hotkey_command
HOTKEY_SURRENDER	client/hotkey/hotkey_command.h	/^	        HOTKEY_OBJECTIVES, HOTKEY_UNIT_LIST, HOTKEY_STATISTICS, HOTKEY_STOP_NETWORK, HOTKEY_START_NETWORK, HOTKEY_SURRENDER, HOTKEY_QUIT_GAME, HOTKEY_QUIT_TO_DESKTOP,$/;"	e	enum:hotkey::Hotkey_command
HOTKEY_TERRAIN_DESCRIPTION	client/hotkey/hotkey_command.h	/^	        HOTKEY_TERRAIN_DESCRIPTION,$/;"	e	enum:hotkey::Hotkey_command
HOTKEY_TOGGLE_ELLIPSES	client/hotkey/hotkey_command.h	/^	        HOTKEY_TOGGLE_ELLIPSES, HOTKEY_TOGGLE_GRID, HOTKEY_STATUS_TABLE, HOTKEY_MUTE, HOTKEY_MOUSE_SCROLL,$/;"	e	enum:hotkey::Hotkey_command
HOTKEY_TOGGLE_GRID	client/hotkey/hotkey_command.h	/^	        HOTKEY_TOGGLE_ELLIPSES, HOTKEY_TOGGLE_GRID, HOTKEY_STATUS_TABLE, HOTKEY_MUTE, HOTKEY_MOUSE_SCROLL,$/;"	e	enum:hotkey::Hotkey_command
HOTKEY_UNDO	client/hotkey/hotkey_command.h	/^	        HOTKEY_UNDO, HOTKEY_REDO,$/;"	e	enum:hotkey::Hotkey_command
HOTKEY_UNIT_DESCRIPTION	client/hotkey/hotkey_command.h	/^	        HOTKEY_UNIT_DESCRIPTION, HOTKEY_RENAME_UNIT, HOTKEY_DELETE_UNIT,$/;"	e	enum:hotkey::Hotkey_command
HOTKEY_UNIT_HOLD_POSITION	client/hotkey/hotkey_command.h	/^	        HOTKEY_UNIT_HOLD_POSITION,$/;"	e	enum:hotkey::Hotkey_command
HOTKEY_UNIT_LIST	client/hotkey/hotkey_command.h	/^	        HOTKEY_OBJECTIVES, HOTKEY_UNIT_LIST, HOTKEY_STATISTICS, HOTKEY_STOP_NETWORK, HOTKEY_START_NETWORK, HOTKEY_SURRENDER, HOTKEY_QUIT_GAME, HOTKEY_QUIT_TO_DESKTOP,$/;"	e	enum:hotkey::Hotkey_command
HOTKEY_UPDATE_SHROUD	client/hotkey/hotkey_command.h	/^	        HOTKEY_DELAY_SHROUD, HOTKEY_UPDATE_SHROUD, HOTKEY_CONTINUE_MOVE,$/;"	e	enum:hotkey::Hotkey_command
HOTKEY_USER_CMD	client/hotkey/hotkey_command.h	/^	        HOTKEY_USER_CMD,$/;"	e	enum:hotkey::Hotkey_command
HOTKEY_WB_BUMP_DOWN_ACTION	client/hotkey/hotkey_command.h	/^	        HOTKEY_WB_BUMP_UP_ACTION, HOTKEY_WB_BUMP_DOWN_ACTION,$/;"	e	enum:hotkey::Hotkey_command
HOTKEY_WB_BUMP_UP_ACTION	client/hotkey/hotkey_command.h	/^	        HOTKEY_WB_BUMP_UP_ACTION, HOTKEY_WB_BUMP_DOWN_ACTION,$/;"	e	enum:hotkey::Hotkey_command
HOTKEY_WB_DELETE_ACTION	client/hotkey/hotkey_command.h	/^	        HOTKEY_WB_DELETE_ACTION,$/;"	e	enum:hotkey::Hotkey_command
HOTKEY_WB_EXECUTE_ACTION	client/hotkey/hotkey_command.h	/^	        HOTKEY_WB_EXECUTE_ACTION, HOTKEY_WB_EXECUTE_ALL_ACTIONS,$/;"	e	enum:hotkey::Hotkey_command
HOTKEY_WB_EXECUTE_ALL_ACTIONS	client/hotkey/hotkey_command.h	/^	        HOTKEY_WB_EXECUTE_ACTION, HOTKEY_WB_EXECUTE_ALL_ACTIONS,$/;"	e	enum:hotkey::Hotkey_command
HOTKEY_WB_SUPPOSE_DEAD	client/hotkey/hotkey_command.h	/^	        HOTKEY_WB_SUPPOSE_DEAD,$/;"	e	enum:hotkey::Hotkey_command
HOTKEY_WB_TOGGLE	client/hotkey/hotkey_command.h	/^	        HOTKEY_WB_TOGGLE,$/;"	e	enum:hotkey::Hotkey_command
HOTKEY_WML	client/hotkey/hotkey_command.h	/^	        HOTKEY_WML,$/;"	e	enum:hotkey::Hotkey_command
HOTKEY_ZOOM_DEFAULT	client/hotkey/hotkey_command.h	/^	        HOTKEY_ZOOM_IN, HOTKEY_ZOOM_OUT, HOTKEY_ZOOM_DEFAULT,$/;"	e	enum:hotkey::Hotkey_command
HOTKEY_ZOOM_IN	client/hotkey/hotkey_command.h	/^	        HOTKEY_ZOOM_IN, HOTKEY_ZOOM_OUT, HOTKEY_ZOOM_DEFAULT,$/;"	e	enum:hotkey::Hotkey_command
HOTKEY_ZOOM_OUT	client/hotkey/hotkey_command.h	/^	        HOTKEY_ZOOM_IN, HOTKEY_ZOOM_OUT, HOTKEY_ZOOM_DEFAULT,$/;"	e	enum:hotkey::Hotkey_command
HOVER_REMOVE_POPUP_EVENT	client/events.h	16;"	d
HYPERLINK_H	client/font/pango/hyperlink.h	6;"	d
HandleAuthContinuedSession	server/game/server/world_tcp_socket.cpp	/^void world_tcp_socket::HandleAuthContinuedSession(std::shared_ptr<world_packets::Auth::AuthContinuedSession> authSession)$/;"	f	class:world_tcp_socket
HandleAuthContinuedSessionCallback	server/game/server/world_tcp_socket.cpp	/^void world_tcp_socket::HandleAuthContinuedSessionCallback(std::shared_ptr<world_packets::Auth::AuthContinuedSession> authSession, prepared_query_result result)$/;"	f	class:world_tcp_socket
HandleAuthSession	server/game/server/world_tcp_socket.cpp	/^void world_tcp_socket::HandleAuthSession(std::shared_ptr<world_packets::Auth::AuthSession> authSession)$/;"	f	class:world_tcp_socket
HandleAuthSessionCallback	server/game/server/world_tcp_socket.cpp	/^void world_tcp_socket::HandleAuthSessionCallback(std::shared_ptr<world_packets::Auth::AuthSession> authSession, prepared_query_result result)$/;"	f	class:world_tcp_socket
HandleConnectToFailed	server/game/server/world_tcp_socket.cpp	/^void world_tcp_socket::HandleConnectToFailed(world_packets::Auth::ConnectToFailed& connectToFailed)$/;"	f	class:world_tcp_socket
Handler_list	client/events.h	/^	typedef std::list<Sdl_handler*> Handler_list;$/;"	t	namespace:events
Handler_list	client/old/event.h	/^	typedef vector<Event_handler*> Handler_list;$/;"	t	namespace:event
High_water_mark_callback	client/net/net_utils.h	/^typedef std::function<void (const Tcp_connection_ptr&, size_t)> High_water_mark_callback;$/;"	t	namespace:net
Hk_scopes	client/hotkey/hotkey_command.h	/^	typedef std::bitset<Scope_count> Hk_scopes;$/;"	t	namespace:hotkey
Hotke_void	client/hotkey/hotkey_item.h	/^			Hotke_void() : Hotkey_base() {}$/;"	f	class:hotkey::Hotkey_void
Hotkey_base	client/hotkey/hotkey_item.h	/^			Hotkey_base() : command_("null"), is_default_(true), $/;"	f	class:hotkey::Hotkey_base
Hotkey_base	client/hotkey/hotkey_item.h	/^	class Hotkey_base$/;"	c	namespace:hotkey
Hotkey_category	client/hotkey/hotkey_command.h	/^	enum Hotkey_category$/;"	g	namespace:hotkey
Hotkey_command	client/hotkey/hotkey_command.cpp	/^	Hotkey_command::Hotkey_command(Hotekey_command cmd, $/;"	f	class:hotkey::Hotkey_command
Hotkey_command	client/hotkey/hotkey_command.h	/^	enum Hotkey_command$/;"	g	namespace:hotkey
Hotkey_command	client/hotkey/hotkey_command.h	/^	struct Hotkey_command$/;"	s	namespace:hotkey
Hotkey_command_temp	client/hotkey/hotkey_command.h	/^	struct Hotkey_command_temp$/;"	s	namespace:hotkey
Hotkey_function	client/gui/core/event/dispatcher.h	/^				hotkey::Hotkey_command id)> Hotkey_function;$/;"	t	namespace:gui::event
Hotkey_keyboard	client/hotkey/hotkey_item.h	/^			Hotkey_keyboard() : Hotkey_base(), keycode_(SDLK_UNKNOWN), text_("") {}$/;"	f	class:hotkey::Hotkey_keyboard
Hotkey_keyboard	client/hotkey/hotkey_item.h	/^	class Hotkey_keyboard : public Hotkey_base$/;"	c	namespace:hotkey
Hotkey_keyboard_ptr	client/hotkey/hotkey_item.h	/^	typedef std::shared_ptrr<Hotkey_keyboard> Hotkey_keyboard_ptr;$/;"	t	namespace:hotkey
Hotkey_list	client/hotkey/hotkey_item.h	/^	typedef std::vector<hotkey::Hotkey_ptr> Hotkey_list;$/;"	t	namespace:hotkey
Hotkey_list_iter	client/hotkey/hotkey_item.h	/^	typedef std::vector<hotkey::Hotkey_ptr>::iterator Hotkey_list_iter;$/;"	t	namespace:hotkey
Hotkey_mouse	client/hotkey/hotkey_item.h	/^			Hotkey_mouse() : Hotkey_base(), button_(0) {}$/;"	f	class:hotkey::Hotkey_mouse
Hotkey_mouse	client/hotkey/hotkey_item.h	/^	class Hotkey_mouse : public Hotkey_base$/;"	c	namespace:hotkey
Hotkey_mouse_ptr	client/hotkey/hotkey_item.h	/^	typedef std::shared_ptr<Hotkey_mouse> Hotkey_mouse_ptr;$/;"	t	namespace:hotkey
Hotkey_ptr	client/hotkey/hotkey_item.h	/^	typedef std::shared_ptr<Hotkey_base> Hotkey_ptr;$/;"	t	namespace:hotkey
Hotkey_void	client/hotkey/hotkey_item.h	/^	class Hotkey_void : public Hotkey_base$/;"	c	namespace:hotkey
IDX_ASYNC	server/database/database/database_worker_pool.h	/^		IDX_ASYNC,$/;"	e	enum:database_worker_pool::internal_index
IDX_SIZE	server/database/database/database_worker_pool.h	/^		IDX_SIZE$/;"	e	enum:database_worker_pool::internal_index
IDX_SYNCH	server/database/database/database_worker_pool.h	/^		IDX_SYNCH,$/;"	e	enum:database_worker_pool::internal_index
IMAGE	client/font/marked-up_text.cpp	/^	  RED_TEXT = '#', COLOR_TEXT = '<', IMAGE = '&';$/;"	v
IMAGE_H	client/image.h	6;"	d
IMPLEMENT_EVENT_SIGNAL	client/gui/core/event/dispatcher_private.h	22;"	d
IMPLEMENT_EVENT_SIGNAL	client/gui/core/event/dispatcher_private.h	54;"	d
IMPLEMENT_EVENT_SIGNAL_WRAPPER	client/gui/core/event/dispatcher_private.h	40;"	d
IMPLEMENT_EVENT_SIGNAL_WRAPPER	client/gui/core/event/dispatcher_private.h	53;"	d
IMPLEMENT_RUNTIME_EVENT_SIGNAL_CHECK	client/gui/core/event/dispatcher_private.h	56;"	d
IMPLEMENT_RUNTIME_EVENT_SIGNAL_CHECK	client/gui/core/event/dispatcher_private.h	83;"	d
INC_DIR	gtest/makefile	/^INC_DIR = -I .\/src -I .\/src\/gtest -I .\/src\/server -I .\/src\/server\/shared$/;"	m
INET_ADDRESS_H	client/net/inet_address.h	6;"	d
INFO	common/logging/old_logging/logging.h	/^		INFO,$/;"	e	enum:Logger::Log_level
INLINE	common/define.h	60;"	d
INLINE	common/define.h	65;"	d
INPUT_MAX	client/events.cpp	660;"	d	file:
INPUT_MIN	client/events.cpp	659;"	d	file:
INSTALL	client/Makefile	/^INSTALL = \/usr\/bin\/install -c$/;"	m
INSTALL	client/old/Makefile	/^INSTALL = \/usr\/bin\/install -c$/;"	m
INSTALL_DATA	client/Makefile	/^INSTALL_DATA = ${INSTALL} -m 644$/;"	m
INSTALL_DATA	client/old/Makefile	/^INSTALL_DATA = ${INSTALL} -m 644$/;"	m
INSTALL_HEADER	client/Makefile	/^INSTALL_HEADER = $(INSTALL_DATA)$/;"	m
INSTALL_HEADER	client/old/Makefile	/^INSTALL_HEADER = $(INSTALL_DATA)$/;"	m
INSTALL_PROGRAM	client/Makefile	/^INSTALL_PROGRAM = ${INSTALL}$/;"	m
INSTALL_PROGRAM	client/old/Makefile	/^INSTALL_PROGRAM = ${INSTALL}$/;"	m
INSTALL_SCRIPT	client/Makefile	/^INSTALL_SCRIPT = ${INSTALL}$/;"	m
INSTALL_SCRIPT	client/old/Makefile	/^INSTALL_SCRIPT = ${INSTALL}$/;"	m
INSTALL_STRIP_PROGRAM	client/Makefile	/^INSTALL_STRIP_PROGRAM = $(install_sh) -c -s$/;"	m
INSTALL_STRIP_PROGRAM	client/old/Makefile	/^INSTALL_STRIP_PROGRAM = $(install_sh) -c -s$/;"	m
INTEGER	client/config.h	/^	INTEGER,$/;"	m	class:Type
INVOKE_FUNCTION_EVENT	client/events.h	21;"	d
IP_ADDRESS_H	server/shared/networking/ip/address.h	6;"	d
IP_ADDRESS_V4_H	server/shared/networking/ip/address_v4.h	6;"	d
IP_ADDRESS_V6_H	server/shared/networking/ip/address_v6.h	6;"	d
IP_BASIC_ENDPOINT_H	server/shared/networking/ip/basic_endpoint.h	6;"	d
IP_ENDPOINT_H	server/shared/networking/ip/endpoint.h	6;"	d
IP_SOCKET_TYPES_H	server/shared/networking/socket_types.h	6;"	d
Id	client/thread/thread.h	/^				Id() : thread_() {}$/;"	f	class:Thread::Id
Id	client/thread/thread.h	/^				explicit Id(Native_handle_type id): thread_(id) {}$/;"	f	class:Thread::Id
Id	client/thread/thread.h	/^		class Id$/;"	c	class:Thread
Id	server/game/server/world_tcp_socket.cpp	/^        uint32_t Id;$/;"	m	struct:AccountInfo::__anon10	file:
Id	server/game/server/world_tcp_socket.cpp	/^        uint32_t Id;$/;"	m	struct:AccountInfo::__anon9	file:
Ignore	client/serialization/unicode_cast.h	/^		typedef Check Ignore;$/;"	t	struct:ucs4_convert_impl::Enableif
Image_cache	client/image.h	/^	typedef Cache_type<Surface> Image_cache;$/;"	t	namespace:image
Img_type	client/image.h	/^	enum Img_type{unscaled, scaled_to_zoom, hexed, scaled_to_hex, tod_colored, brightened};$/;"	g	namespace:image
Index_tuple	client/thread/thread.h	/^template<size_t... I> struct Index_tuple {};$/;"	s
Indices	client/thread/thread.h	/^			->decltype(std::declval<Invoker&>().invoke_s(Indices()))$/;"	f	struct:Thread::Invoker
Inet_address	client/net/inet_address.cpp	/^	Inet_address::Inet_address()$/;"	f	class:net::Inet_address
Inet_address	client/net/inet_address.cpp	/^	Inet_address::Inet_address(Inet_address&& other) : $/;"	f	class:net::Inet_address
Inet_address	client/net/inet_address.cpp	/^	Inet_address::Inet_address(const Inet_address& other) : $/;"	f	class:net::Inet_address
Inet_address	client/net/inet_address.cpp	/^	Inet_address::Inet_address(const std::string& str, uint16_t port)$/;"	f	class:net::Inet_address
Inet_address	client/net/inet_address.cpp	/^Inet_address::Inet_address(const sockaddr_in& addr) $/;"	f	class:net::Inet_address
Inet_address	client/net/inet_address.h	/^	class Inet_address$/;"	c	namespace:net
Info	client/sdl/texture.cpp	/^Texture::Info::Info(SDL_Texture* t) : format(0), access(0), w(0), h(0)$/;"	f	class:Texture::Info
Info	client/sdl/texture.h	/^		struct Info$/;"	s	class:Texture
Input	client/json.h	/^	Input(const Iter& first, const Iter& last) : $/;"	f	class:Format::Input
Input	client/json.h	/^class Input $/;"	c	class:Format
Invalid_utf8_exception	client/serialization/unicode_type.h	/^	class Invalid_utf8_exception : public std::exception {};$/;"	c	namespace:utf8
Invoked_function_data	client/events.cpp	/^		Invoked_function_data(bool finished_, $/;"	f	struct:__anon30::Invoked_function_data
Invoked_function_data	client/events.cpp	/^	struct Invoked_function_data$/;"	s	namespace:__anon30	file:
Invoker	client/thread/thread.h	/^		struct Invoker$/;"	s	class:Thread
Io_exception	client/filesystem.h	/^		Io_exception() : Error("") {}$/;"	f	struct:filesystem::Io_exception
Io_exception	client/filesystem.h	/^		Io_exception(const std::string& msg) : Error(msg) {}$/;"	f	struct:filesystem::Io_exception
Io_exception	client/filesystem.h	/^	struct Io_exception : public Error$/;"	s	namespace:filesystem
IsBanned	server/game/server/world_tcp_socket.cpp	/^        bool IsBanned;$/;"	m	struct:AccountInfo::__anon10	file:
IsBanned	server/game/server/world_tcp_socket.cpp	/^        bool IsBanned;$/;"	m	struct:AccountInfo::__anon9	file:
IsBanned	server/game/server/world_tcp_socket.cpp	/^    bool IsBanned() const { return BattleNet.IsBanned || Game.IsBanned; }$/;"	f	struct:AccountInfo
IsLockedToIP	server/game/server/world_tcp_socket.cpp	/^        bool IsLockedToIP;$/;"	m	struct:AccountInfo::__anon9	file:
IsRectuiter	server/game/server/world_tcp_socket.cpp	/^        bool IsRectuiter;$/;"	m	struct:AccountInfo::__anon10	file:
Iterator	client/serialization/unicode.h	/^			ucs4_convert_impl::Convert_impl<Char>::Type> Iterator;$/;"	t	namespace:utf16
Iterator	client/serialization/unicode.h	/^			ucs4_convert_impl::Convert_impl<Char>::Type> Iterator;$/;"	t	namespace:utf8
Iterator_base	client/serialization/ucs4_iterator_base.h	/^		        Iterator_base(const String_type& str) : $/;"	f	class:ucs4::Iterator_base
Iterator_base	client/serialization/ucs4_iterator_base.h	/^		        Iterator_base(typename String_type::const_iterator const& begin, $/;"	f	class:ucs4::Iterator_base
Iterator_base	client/serialization/ucs4_iterator_base.h	/^        class Iterator_base$/;"	c	namespace:ucs4
Iterator_writer	client/serialization/unicode_cast.h	/^		Iterator_writer(Iter& out) : out_(out) {}$/;"	f	struct:ucs4_convert_impl::Iterator_writer
Iterator_writer	client/serialization/unicode_cast.h	/^	struct Iterator_writer$/;"	s	namespace:ucs4_convert_impl
Itup_cat	client/thread/thread.h	/^struct Itup_cat<Index_tuple<I1...>, Index_tuple<I2...>>$/;"	s
KEY_H	client/key.h	6;"	d
Key	client/key.cpp	/^Key::Key() : key_list_(SDL_GetKeyboardState(nullptr)) {}$/;"	f	class:Key
KeyData	server/game/server/world_tcp_socket.cpp	/^        std::array<uint8_t, 64> KeyData;$/;"	m	struct:AccountInfo::__anon10	file:
LARGE_TEXT	client/font/marked-up_text.cpp	/^const char LARGE_TEXT = '*', SMALL_TEXT = '`', BOLD_TEXT = '~',$/;"	v
LBLUE	common/logging/appender_console.h	/^	LBLUE,$/;"	e	enum:uint8_t
LCYAN	common/logging/appender_console.h	/^	LCYAN,$/;"	e	enum:uint8_t
LDFLAGS	client/Makefile	/^LDFLAGS = $/;"	m
LDFLAGS	client/old/Makefile	/^LDFLAGS = $/;"	m
LDFLAGS	gtest/makefile	/^LDFLAGS = -lstdc++fs -pthread \/usr\/local\/lib\/libgtest.a$/;"	m
LEFT_BUTTON_CLICK	client/gui/core/event/handler.h	/^			LEFT_BUTTON_CLICK,		\/\/ 鼠标左键单击小部件事件$/;"	e	enum:gui::event::Ui_event
LEFT_BUTTON_DOUBLE_CLICK	client/gui/core/event/handler.h	/^			LEFT_BUTTON_DOUBLE_CLICK,	\/\/ 鼠标左键双击小部件事件$/;"	e	enum:gui::event::Ui_event
LEFT_BUTTON_DOWN	client/gui/core/event/handler.h	/^			LEFT_BUTTON_DOWN,		\/\/ 鼠标左键按下小部件事件$/;"	e	enum:gui::event::Ui_event
LEFT_BUTTON_UP	client/gui/core/event/handler.h	/^			LEFT_BUTTON_UP,			\/\/ 鼠标松开左健按上的小部件的事件$/;"	e	enum:gui::event::Ui_event
LGREEN	common/logging/appender_console.h	/^	LGREEN,$/;"	e	enum:uint8_t
LIBOBJS	client/Makefile	/^LIBOBJS = $/;"	m
LIBOBJS	client/old/Makefile	/^LIBOBJS = $/;"	m
LIBS	client/Makefile	/^LIBS = -lpango-1.0 -lSDL2_ttf -lSDL2_mixer -lSDL2_image -lSDL2 $/;"	m
LIBS	client/old/Makefile	/^LIBS = $/;"	m
LINEAR	client/image.h	/^	enum Scale_quality {NEAREST, LINEAR};$/;"	e	enum:image::Scale_quality
LINK	client/Makefile	/^LINK = $(CCLD) $(AM_CFLAGS) $(CFLAGS) $(AM_LDFLAGS) $(LDFLAGS) -o $@$/;"	m
LISTEN	client/old/event.h	/^		LISTEN,$/;"	e	enum:event::Socket_event
LISTEN_HANDLER_H	client/old/listen_handler.h	6;"	d
LITTLEENDIAN	common/define.h	33;"	d
LMAGENTA	common/logging/appender_console.h	/^	LMAGENTA,$/;"	e	enum:uint8_t
LOCATION_DOWNLOAD	server/database/update/db_update.h	/^	LOCATION_DOWNLOAD \/\/ 位置下载$/;"	e	enum:base_location
LOCATION_REPOSITORY	server/database/update/db_update.h	/^	LOCATION_REPOSITORY, \/\/ 位置存储$/;"	e	enum:base_location
LOG	common/logging/log.h	100;"	d
LOGGER_ROOT	common/logging/log.h	14;"	d
LOGGING_LOG_H	common/logging/log.h	6;"	d
LOGIN_SEL_REALMLIST	server/database/database/implementation/login_database.h	/^	LOGIN_SEL_REALMLIST,$/;"	e	enum:uint32_t
LOG_APPENDER_CONSOLE_H	common/logging/appender_console.h	6;"	d
LOG_APPENDER_FILE_H	common/logging/appender_file.h	6;"	d
LOG_APPENDER_H	common/logging/appender.h	6;"	d
LOG_ASYNC_LOG_H	common/logging/old_logging/async_log.h	6;"	d
LOG_AUDIO	client/sound.cpp	15;"	d	file:
LOG_AUDIO	client/sound_music_track.cpp	9;"	d	file:
LOG_COMMON_H	common/logging/log_common.h	6;"	d
LOG_CONFIG	client/game_launcher.cpp	11;"	d	file:
LOG_CONFIG	client/main.cpp	14;"	d	file:
LOG_DEBUG	common/logging/log.h	136;"	d
LOG_DP	client/image.cpp	11;"	d	file:
LOG_ERROR	common/logging/log.h	145;"	d
LOG_EXCEPTION_FREE	common/logging/log.h	102;"	d
LOG_FATAL	common/logging/log.h	148;"	d
LOG_FS	client/filesystem.cpp	13;"	d	file:
LOG_FT	client/font/font_config.cpp	11;"	d	file:
LOG_FT	client/font/sdl_ttf.cpp	12;"	d	file:
LOG_G	client/hotkey/hotkey_command.cpp	12;"	d	file:
LOG_G	client/hotkey/hotkey_item.cpp	13;"	d	file:
LOG_GENERAL	client/game_launcher.cpp	13;"	d	file:
LOG_GENERAL	client/main.cpp	15;"	d	file:
LOG_H	client/log.h	6;"	d
LOG_HEADER	client/gui/core/event/distributor.cpp	39;"	d	file:
LOG_INFO	common/logging/log.h	139;"	d
LOG_INIT	common/logging/old_logging/log_stream.h	51;"	d
LOG_LEVEL_DEBUG	common/logging/log_common.h	/^	LOG_LEVEL_DEBUG = 2,$/;"	e	enum:log_level
LOG_LEVEL_DISABLED	common/logging/log_common.h	/^	LOG_LEVEL_DISABLED = 0,$/;"	e	enum:log_level
LOG_LEVEL_ERROR	common/logging/log_common.h	/^	LOG_LEVEL_ERROR = 5,$/;"	e	enum:log_level
LOG_LEVEL_FATAL	common/logging/log_common.h	/^	LOG_LEVEL_FATAL = 6,$/;"	e	enum:log_level
LOG_LEVEL_INFO	common/logging/log_common.h	/^	LOG_LEVEL_INFO = 3,$/;"	e	enum:log_level
LOG_LEVEL_TRACE	common/logging/log_common.h	/^	LOG_LEVEL_TRACE = 1,$/;"	e	enum:log_level
LOG_LEVEL_WARN	common/logging/log_common.h	/^	LOG_LEVEL_WARN = 4,$/;"	e	enum:log_level
LOG_LOGGER_H	common/logging/logger.h	6;"	d
LOG_LOGING_H	common/logging/old_logging/logging.h	6;"	d
LOG_LOG_BUFFER_H	common/logging/old_logging/log_buffer.h	6;"	d
LOG_LOG_FILE_H	common/logging/old_logging/log_file.h	6;"	d
LOG_LOG_STREAM_H	common/logging/old_logging/log_stream.h	6;"	d
LOG_MESSAGE_BODY	common/logging/log.h	116;"	d
LOG_MESSAGE_BODY	common/logging/log.h	121;"	d
LOG_MESSAGE_H	common/logging/log_message.h	6;"	d
LOG_OPERATION_H	common/logging/log_operation.h	6;"	d
LOG_RND	client/random.cpp	12;"	d	file:
LOG_STREAM	client/log.h	129;"	d
LOG_TRACE	common/logging/log.h	133;"	d
LOG_WARN	common/logging/log.h	142;"	d
LOSE_KEYBOARD_FOCUS	client/gui/core/event/handler.h	/^			LOSE_KEYBOARD_FOCUS,	\/\/ 小部件失去键盘焦点$/;"	e	enum:gui::event::Ui_event
LRED	common/logging/appender_console.h	/^	LRED,$/;"	e	enum:uint8_t
LT	client/version.cpp	/^	LT,$/;"	e	enum:COMP_TYPE	file:
LTLIBOBJS	client/Makefile	/^LTLIBOBJS = $/;"	m
LTLIBOBJS	client/old/Makefile	/^LTLIBOBJS = $/;"	m
LUA_CONSOLE	client/hotkey/hotkey_command.h	/^	        LUA_CONSOLE,$/;"	e	enum:hotkey::Hotkey_command
LastIP	server/game/server/world_tcp_socket.cpp	/^        std::string LastIP;$/;"	m	struct:AccountInfo::__anon9	file:
Listen_handler	client/old/listen_handler.h	/^		Listen_handler(Socket fd) : fd_(fd) {}$/;"	f	class:Listen_handler
Listen_handler	client/old/listen_handler.h	/^class Listen_handler : public Event_handler$/;"	c
LoadSessionPermissionsCallback	server/game/server/world_tcp_socket.cpp	/^void world_tcp_socket::LoadSessionPermissionsCallback(prepared_query_result result)$/;"	f	class:world_tcp_socket
Locale	server/game/server/world_tcp_socket.cpp	/^        LocaleConstant Locale;$/;"	m	struct:AccountInfo::__anon9	file:
Locator	client/image.cpp	/^	Locator::Locator() : index_(-1), val_() {}$/;"	f	class:image::Locator
Locator	client/image.cpp	/^	Locator::Locator(const Locator& a, const std::string& mods) :$/;"	f	class:image::Locator
Locator	client/image.cpp	/^	Locator::Locator(const char* filename) : index_(-1), val_(filename)$/;"	f	class:image::Locator
Locator	client/image.cpp	/^	Locator::Locator(const std::string& filename) : index_(-1), val_(filename)$/;"	f	class:image::Locator
Locator	client/image.cpp	/^	Locator::Locator(const std::string& filename, const std::string& modifications) : index_(-1), val_(filename, modifications)$/;"	f	class:image::Locator
Locator	client/image.h	/^	class Locator$/;"	c	namespace:image
Locator_finder	client/image.h	/^			typedef std::unordered_map<Value, int> Locator_finder;$/;"	t	class:image::Locator
LockCountry	server/game/server/world_tcp_socket.cpp	/^        std::string LockCountry;$/;"	m	struct:AccountInfo::__anon9	file:
Lock_guard	client/thread/mutex.h	/^		Lock_guard(mutex_type& m, Adopt_lock_t) : device_(m) $/;"	f	class:Lock_guard
Lock_guard	client/thread/mutex.h	/^		explicit Lock_guard(mutex_type& m) : device_(m) { device_.lock(); }$/;"	f	class:Lock_guard
Lock_guard	client/thread/mutex.h	/^class Lock_guard$/;"	c
Log_buffer	common/logging/old_logging/log_buffer.h	/^	Log_buffer() : current_(data_) {}$/;"	f	class:lg::Log_buffer
Log_buffer	common/logging/old_logging/log_buffer.h	/^class Log_buffer$/;"	c	namespace:lg
Log_domain	client/log.cpp	/^	Log_domain::Log_domain(const char* name) : domain_(nullptr)$/;"	f	class:lg::Log_domain
Log_domain	client/log.h	/^	class Log_domain$/;"	c	namespace:lg
Log_file	common/logging/old_logging/log_file.cpp	/^Log_file::Log_file(const std::string& basename, off_t roll_size, $/;"	f	class:lg::Log_file
Log_file	common/logging/old_logging/log_file.h	/^class Log_file$/;"	c	namespace:lg
Log_level	common/logging/old_logging/logging.h	/^	enum Log_level$/;"	g	class:Logger
Log_level_name	common/logging/old_logging/logging.cpp	/^const char* Log_level_name[Logger::NUM_LOG_LEVELS] =$/;"	m	namespace:lg	file:
Log_stream	common/logging/old_logging/log_stream.cpp	/^Log_stream::Log_stream() {}$/;"	f	class:lg::Log_stream
Log_stream	common/logging/old_logging/log_stream.h	/^class Log_stream$/;"	c	namespace:lg
Logger	client/log.h	/^			Logger(const char* name, int severity) : name_(name), $/;"	f	class:lg::Logger
Logger	client/log.h	/^	class Logger$/;"	c	namespace:lg
Logger	common/logging/old_logging/logging.cpp	/^Logger::Logger(const std::string& file, int line, Logger::Log_level level, const char* func,$/;"	f	class:lg::Logger
Logger	common/logging/old_logging/logging.cpp	/^Logger::Logger(const std::string& file, int line, Logger::Log_level level, const std::string& msg)$/;"	f	class:lg::Logger
Logger	common/logging/old_logging/logging.cpp	/^Logger::Logger(const std::string& file, int line, bool to_abort, const std::string& msg)$/;"	f	class:lg::Logger
Logger	common/logging/old_logging/logging.cpp	/^Logger::Logger(const std::string& file, int line, const std::string& msg)$/;"	f	class:lg::Logger
Logger	common/logging/old_logging/logging.h	/^class Logger$/;"	c
MAGENTA	common/logging/appender_console.h	/^	MAGENTA,$/;"	e	enum:uint8_t
MAKEINFO	client/Makefile	/^MAKEINFO = ${SHELL} \/home\/mylw\/cpp\/Martial_arts\/missing makeinfo$/;"	m
MAKEINFO	client/old/Makefile	/^MAKEINFO = ${SHELL} \/home\/mylw\/Martial_arts\/src\/server\/missing makeinfo$/;"	m
MALE	client/old/player.h	/^	MALE = 0,		\/\/ 男性$/;"	e	enum:Sex
MARKED_UP_TEXT_H	client/font/marked-up_text.h	6;"	d
MATH_H	client/utils/math.h	6;"	d
MAX_CHARACTERDATABASE_STATEMENTS	server/database/database/implementation/character_database.h	/^	MAX_CHARACTERDATABASE_STATEMENTS$/;"	e	enum:uint32_t
MAX_CONNECTION_TYPES	server/game/server/protocol/opcodes.h	/^	MAX_CONNECTION_TYPES,$/;"	e	enum:int8_t
MAX_ERROR_BUF	common/logging/old_logging/logging.cpp	/^constexpr int MAX_ERROR_BUF = 64;$/;"	m	namespace:__anon15	file:
MAX_HOTFIXDATABASE_STATEMENTS	server/database/database/implementation/hotfix_database.h	/^	MAX_HOTFIXDATABASE_STATEMENTS$/;"	e	enum:uint32_t
MAX_LOGINDATABASE_STATEMENTS	server/database/database/implementation/login_database.h	/^	MAX_LOGINDATABASE_STATEMENTS$/;"	e	enum:uint32_t
MAX_OPCODE	server/game/server/protocol/opcodes.h	/^	MAX_OPCODE = 0x3fff,$/;"	e	enum:uint16_t
MAX_OPCODE_HANDLES	server/game/server/protocol/opcodes.h	/^	MAX_OPCODE_HANDLES = (MAX_OPCODE + 1),$/;"	e	enum:uint16_t
MAX_WORLDDATABASE_STATEMENTS	server/database/database/implementation/world_database.h	/^	MAX_WORLDDATABASE_STATEMENTS$/;"	e	enum:uint32_t
MESSAGE_BUFFER_H	common/utility/message_buffer.h	6;"	d
MESSAGE_H	client/gui/core/event/message.h	6;"	d
MESSAGE_SHOW_HELPTIP	client/gui/core/event/handler.h	/^			MESSAGE_SHOW_HELPTIP,	\/\/ 请求根据发送的数据显示帮助提示$/;"	e	enum:gui::event::Ui_event
MESSAGE_SHOW_TOOLTIP	client/gui/core/event/handler.h	/^			MESSAGE_SHOW_TOOLTIP,	\/\/ 请求根据发送的数据现实提示$/;"	e	enum:gui::event::Ui_event
MIDDLE_BUTTON_CLICK	client/gui/core/event/handler.h	/^			MIDDLE_BUTTON_CLICK,		\/\/ See LEFT_BUTTON_CLICK$/;"	e	enum:gui::event::Ui_event
MIDDLE_BUTTON_DOUBLE_CLICK	client/gui/core/event/handler.h	/^			MIDDLE_BUTTON_DOUBLE_CLICK,	\/\/ See LEFT_BUTTON_DOUBLE_CLICK$/;"	e	enum:gui::event::Ui_event
MIDDLE_BUTTON_DOWN	client/gui/core/event/handler.h	/^			MIDDLE_BUTTON_DOWN,			\/\/ See LEFT_BUTTON_DOWN$/;"	e	enum:gui::event::Ui_event
MIDDLE_BUTTON_UP	client/gui/core/event/handler.h	/^			MIDDLE_BUTTON_UP,			\/\/ See LEFT_BUTTON_UP$/;"	e	enum:gui::event::Ui_event
MIN_MYSQL_CLIENT_VERSION	server/database/database/database_worker_pool.cpp	19;"	d	file:
MIN_MYSQL_SERVER_VERSION	server/database/database/database_worker_pool.cpp	18;"	d	file:
MKDIR_P	client/Makefile	/^MKDIR_P = \/bin\/mkdir -p$/;"	m
MKDIR_P	client/old/Makefile	/^MKDIR_P = \/usr\/bin\/mkdir -p$/;"	m
MODE_APPLY	server/database/update/update_fetcher.h	/^		MODE_APPLY,$/;"	e	enum:update_fetcher::update_mode
MODE_EVENT	client/video.h	/^		enum class MODE_EVENT$/;"	c	class:Video
MODE_REHASH	server/database/update/update_fetcher.h	/^		MODE_REHASH$/;"	e	enum:update_fetcher::update_mode
MOUSE_ENTER	client/gui/core/event/handler.h	/^			MOUSE_ENTER,		\/\/ 鼠标进入小部件事件$/;"	e	enum:gui::event::Ui_event
MOUSE_LEAVE	client/gui/core/event/handler.h	/^			MOUSE_LEAVE,		\/\/ 鼠标离开小部件事件$/;"	e	enum:gui::event::Ui_event
MOUSE_MOTION	client/gui/core/event/handler.h	/^			MOUSE_MOTION,		\/\/ 鼠标移动小部件事件$/;"	e	enum:gui::event::Ui_event
MUTEX_H	client/thread/mutex.h	6;"	d
MYSQL_EXECUTABLE	common/configuration/revision_data.h	10;"	d
MYSQL_POOL_H	client/old/mysql_pool.h	6;"	d
Manager	client/cursor.cpp	/^	Manager::Manager()$/;"	f	class:cursor::Manager
Manager	client/cursor.h	/^	struct Manager$/;"	s	namespace:cursor
Manager	client/font/font_config.h	/^	struct Manager$/;"	s	namespace:font
Manager	client/gui/core/event/handler.cpp	/^		Manager::Manager()$/;"	f	class:gui::event::Manager
Manager	client/gui/core/event/handler.h	/^	class Manager$/;"	c	namespace:gui
Manager	client/tooltips.h	/^struct Manager$/;"	s
Map_player	client/old/clients.h	/^typedef std::map<int, Player*> Map_player;$/;"	t
Martial_arts_new_legend_DEPENDENCIES	client/Makefile	/^Martial_arts_new_legend_DEPENDENCIES =$/;"	m
Martial_arts_new_legend_LDADD	client/Makefile	/^Martial_arts_new_legend_LDADD = -lstdc++fs $/;"	m
Martial_arts_new_legend_OBJECTS	client/Makefile	/^Martial_arts_new_legend_OBJECTS =  \\$/;"	m
Martial_arts_new_legend_SOURCES	client/Makefile	/^Martial_arts_new_legend_SOURCES = main.cpp 		        \\$/;"	m
Message	client/gui/core/event/message.h	/^		struct Message$/;"	s	namespace:gui::event
Message_callback	client/net/net_utils.h	/^typedef std::function<void (const Tcp_connection_ptr&, Buffer*, Timestamp)> Message_callback;$/;"	t	namespace:net
Message_show_helptip	client/gui/core/event/message.h	/^			Message_show_helptip(const std::string& message_, $/;"	f	struct:gui::event::Message_show_helptip
Message_show_helptip	client/gui/core/event/message.h	/^		struct Message_show_helptip : Message$/;"	s	namespace:gui::event
Message_show_tooltip	client/gui/core/event/message.h	/^			Message_show_tooltip(const std::string& message_, $/;"	f	struct:gui::event::Message_show_tooltip
Message_show_tooltip	client/gui/core/event/message.h	/^		struct Message_show_tooltip : public Message$/;"	s	namespace:gui::event
Mouse_behavior	client/gui/core/event/dispatcher.h	/^				enum Mouse_behavior$/;"	g	class:gui::event::Dispatcher
Mouse_button	client/gui/core/event/distributor.h	/^		class Mouse_button : public virtual Mouse_motion$/;"	c	namespace:gui::event
Mouse_button_event_type_wrapper	client/gui/core/event/distributor.h	/^		struct Mouse_button_event_type_wrapper$/;"	s	namespace:gui::event
Mouse_motion	client/gui/core/event/distributor.cpp	/^		Mouse_motion::Mouse_motion(Widget& owner, const Dispatcher::Queue_postion queue_position) : mouse_focus_(false), mouse_captured_(false),$/;"	f	class:gui::event::Mouse_motion
Mouse_motion	client/gui/core/event/distributor.h	/^		class Mouse_motion$/;"	c	namespace:gui::event
Music_thinker	client/sound.h	/^	class Music_thinker : public events::SDL_handler$/;"	c	namespace:sound
Music_track	client/sound_music_track.cpp	/^	Music_track::Music_track() : $/;"	f	class:sound::Music_track
Music_track	client/sound_music_track.cpp	/^	Music_track::Music_track(const Config& node) : $/;"	f	class:sound::Music_track
Music_track	client/sound_music_track.cpp	/^	Music_track::Music_track(const std::string& v_name) :$/;"	f	class:sound::Music_track
Music_track	client/sound_music_track.h	/^	class Music_track$/;"	c	namespace:sound
MuteTime	server/game/server/world_tcp_socket.cpp	/^        int64 MuteTime;$/;"	m	struct:AccountInfo::__anon10	file:
Mutex	client/thread/mutex.h	/^		Mutex() : Mutex_base(){};\/\/?wrong? noexcept = delete;$/;"	f	class:Mutex
Mutex	client/thread/mutex.h	/^class Mutex : private Mutex_base$/;"	c
Mutex_base	client/thread/mutex.h	/^		Mutex_base()$/;"	f	class:Mutex_base
Mutex_base	client/thread/mutex.h	/^class Mutex_base$/;"	c
Mysql_connection_factory	client/old/connection_pool.h	/^class Mysql_connection_factory$/;"	c
NEAREST	client/image.h	/^	enum Scale_quality {NEAREST, LINEAR};$/;"	e	enum:image::Scale_quality
NETWORK_EXCEPTIONS_H	server/shared/networking/network_exception.h	6;"	d
NET_ACCEPTOR_H	client/net/acceptor.h	6;"	d
NET_ACCEPTOR_H	server/shared/networking/acceptor.h	6;"	d
NET_BUFFER_H	client/net/buffer.h	6;"	d
NET_CHANNEL_H	server/shared/networking/channel.h	6;"	d
NET_EPOLL_H	server/shared/networking/epoll.h	6;"	d
NET_EVENT_LOOP_H	client/net/event_loop.h	6;"	d
NET_EVENT_LOOP_H	server/shared/networking/event_loop.h	6;"	d
NET_EVENT_LOOP_THREADPOOL_H	client/net/event_loop_threadpool.h	6;"	d
NET_EVENT_LOOP_THREADPOOL_H	server/shared/networking/event_loop_threadpool.h	6;"	d
NET_EVENT_LOOP_THREAD_H	client/net/event_loop_thread.h	6;"	d
NET_EVENT_LOOP_THREAD_H	server/shared/networking/event_loop_thread.h	6;"	d
NET_NETWORK_THREAD_H	server/shared/networking/network_thread.h	6;"	d
NET_POLLER_H	client/net/poller.h	6;"	d
NET_SOCKET_H	server/shared/networking/socket.h	6;"	d
NET_SOCKET_OPERATIONS_H	server/shared/networking/socket_operations.h	6;"	d
NET_TCP	server/shared/networking/ip/tcp.h	6;"	d
NET_TCP_CONNECTION_H	client/net/tcp_connection.h	6;"	d
NET_TCP_SERVER_H	client/net/tcp_server.h	6;"	d
NET_TCP_SERVER_H	server/shared/networking/tcp_server.h	6;"	d
NET_TCP_SOCKET_H	server/shared/networking/tcp_socket.h	6;"	d
NET_TCP_SOCKET_MGR_H	server/shared/networking/tcp_socket_mgr.h	6;"	d
NET_TIMER_H	client/net/timer.h	6;"	d
NET_TIMER_H	server/shared/networking/timer.h	6;"	d
NET_TIMER_QUEUE_H	client/net/timer_queue.h	6;"	d
NET_TIMER_QUEUE_H	server/shared/networking/timer_queue.h	6;"	d
NET_UDP_H	server/shared/networking/ip/udp.h	6;"	d
NET_UTILS_H	client/net/net_utils.h	6;"	d
NORMAL_INSTALL	client/Makefile	/^NORMAL_INSTALL = :$/;"	m
NORMAL_INSTALL	client/old/Makefile	/^NORMAL_INSTALL = :$/;"	m
NORMAL_TEXT	client/font/marked-up_text.cpp	/^	  NORMAL_TEXT = '{', NULL_MARKUP = '^', BLACK_TEXT = '}', $/;"	v
NORMAL_UNINSTALL	client/Makefile	/^NORMAL_UNINSTALL = :$/;"	m
NORMAL_UNINSTALL	client/old/Makefile	/^NORMAL_UNINSTALL = :$/;"	m
NOTICE_NOTIFY	client/old/packet_protocol.h	/^	NOTICE_NOTIFY,			\/\/通知不需要回复$/;"	e	enum:Notice
NOTICE_NOTIFY_RESPONSE	client/old/packet_protocol.h	/^	NOTICE_NOTIFY_RESPONSE	\/\/通知一定要回复$/;"	e	enum:Notice
NOTICE_REQUEST	client/old/packet_protocol.h	/^	NOTICE_REQUEST = 0 ,	\/\/请求,必须回复$/;"	e	enum:Notice
NOTICE_RESPONSE	client/old/packet_protocol.h	/^	NOTICE_RESPONSE,		\/\/回复$/;"	e	enum:Notice
NOTIFY_MODIFIED	client/gui/core/event/handler.h	/^			NOTIFY_MODIFIED,	\/\/ 由小部件发送通知，告知他人他的内容或状态$/;"	e	enum:gui::event::Ui_event
NOTIFY_REMOVAL	client/gui/core/event/handler.h	/^			NOTIFY_REMOVAL,		\/\/ 由小部件发送通知，告知他人他正被销毁$/;"	e	enum:gui::event::Ui_event
NOTIFY_REMOVE_TOOLTIP	client/gui/core/event/handler.h	/^			NOTIFY_REMOVE_TOOLTIP,	\/\/ 请求小部件移除悬停提示$/;"	e	enum:gui::event::Ui_event
NOT_EQUAL	client/version.cpp	/^	NOT_EQUAL,$/;"	e	enum:COMP_TYPE	file:
NO_FAKE	client/video.h	/^			NO_FAKE,$/;"	m	class:Video::FAKE_TYPES
NULLPTR	client/config.h	/^	NULLPTR,$/;"	m	class:Type
NULL_CHANNEL	client/sound.h	/^		NULL_CHANNEL = -1,$/;"	m	class:sound::Channel_group
NULL_MARKUP	client/font/marked-up_text.cpp	/^	  NORMAL_TEXT = '{', NULL_MARKUP = '^', BLACK_TEXT = '}', $/;"	v
NULL_OPCODE	server/game/server/protocol/opcodes.h	/^	NULL_OPCODE = 0xba00$/;"	e	enum:uint16_t
NUM_ENABLED_LOG_LEVELS	common/logging/log_common.h	/^	NUM_ENABLED_LOG_LEVELS = 6$/;"	e	enum:log_level
NUM_LOG_LEVELS	common/logging/old_logging/logging.h	/^		NUM_LOG_LEVELS,$/;"	e	enum:Logger::Log_level
Native_handle_type	client/thread/thread.h	/^		typedef pthread_t Native_handle_type;$/;"	t	class:Thread
New_connection_callback	client/net/acceptor.h	/^                                const Inet_address&)> New_connection_callback;$/;"	t	class:net::Acceptor
Node	client/config.h	/^			Node() : type(Type::NULLPTR), number(0), next(nullptr), $/;"	f	struct:Config::Node
Node	client/config.h	/^		struct Node$/;"	s	class:Config
Notice	client/old/packet_protocol.h	/^enum Notice$/;"	g
Notifier	client/thread/condition_variable.cpp	/^	Notifier(Condition_variable& cv, Unique_lock<Mutex>& l) : cv(&cv),$/;"	f	struct:final
Null	client/json.h	/^struct Null {};$/;"	s	class:Format
Null_streambuf	client/log.cpp	/^			Null_streambuf() {}$/;"	f	class:__anon31::Null_streambuf
Null_streambuf	client/log.cpp	/^	class Null_streambuf : public std::streambuf$/;"	c	namespace:__anon31	file:
OBJEXT	client/Makefile	/^OBJEXT = o$/;"	m
OBJEXT	client/old/Makefile	/^OBJEXT = o$/;"	m
OP_EQUAL	client/version.h	/^	OP_EQUAL,$/;"	e	enum:VERSION_COMP_OP
OP_GREATER	client/version.h	/^	OP_GREATER,$/;"	e	enum:VERSION_COMP_OP
OP_GREATER_OR_EQUAL	client/version.h	/^	OP_GREATER_OR_EQUAL$/;"	e	enum:VERSION_COMP_OP
OP_INVALID	client/version.h	/^	OP_INVALID,$/;"	e	enum:VERSION_COMP_OP
OP_LESS	client/version.h	/^	OP_LESS,$/;"	e	enum:VERSION_COMP_OP
OP_LESS_OR_EQUAL	client/version.h	/^	OP_LESS_OR_EQUAL,$/;"	e	enum:VERSION_COMP_OP
OP_NOT_EQUAL	client/version.h	/^	OP_NOT_EQUAL,$/;"	e	enum:VERSION_COMP_OP
OS	server/game/server/world_tcp_socket.cpp	/^        std::string OS;$/;"	m	struct:AccountInfo::__anon10	file:
Object	client/json.h	/^	typedef std::map<std::string, Value> Object;$/;"	t	class:Format::Value
Offset_dir	client/filesystem.cpp	/^	typedef std::pair<int64_t, std::ios_base::seekdir> Offset_dir;$/;"	t	namespace:filesystem	file:
Option	client/net/tcp_server.h	/^	enum Option$/;"	g	class:net::Tcp_server
Option	server/shared/networking/tcp_server.h	/^	enum Option$/;"	g	class:net::Tcp_server
Output_func	common/logging/old_logging/logging.h	/^	typedef void (*Output_func)(const char* msg, int len);$/;"	t	class:Logger
PACKAGE	client/Makefile	/^PACKAGE = full-package-name$/;"	m
PACKAGE	client/old/Makefile	/^PACKAGE = full-package-name$/;"	m
PACKAGE_BUGREPORT	client/Makefile	/^PACKAGE_BUGREPORT = BUG-REPORT-ADDRESS$/;"	m
PACKAGE_BUGREPORT	client/old/Makefile	/^PACKAGE_BUGREPORT = BUG-REPORT-ADDRESS$/;"	m
PACKAGE_NAME	client/Makefile	/^PACKAGE_NAME = FULL-PACKAGE-NAME$/;"	m
PACKAGE_NAME	client/old/Makefile	/^PACKAGE_NAME = FULL-PACKAGE-NAME$/;"	m
PACKAGE_STRING	client/Makefile	/^PACKAGE_STRING = FULL-PACKAGE-NAME VERSION$/;"	m
PACKAGE_STRING	client/old/Makefile	/^PACKAGE_STRING = FULL-PACKAGE-NAME VERSION$/;"	m
PACKAGE_TARNAME	client/Makefile	/^PACKAGE_TARNAME = full-package-name$/;"	m
PACKAGE_TARNAME	client/old/Makefile	/^PACKAGE_TARNAME = full-package-name$/;"	m
PACKAGE_URL	client/Makefile	/^PACKAGE_URL = $/;"	m
PACKAGE_URL	client/old/Makefile	/^PACKAGE_URL = $/;"	m
PACKAGE_VERSION	client/Makefile	/^PACKAGE_VERSION = VERSION$/;"	m
PACKAGE_VERSION	client/old/Makefile	/^PACKAGE_VERSION = VERSION$/;"	m
PACKETS_BYTE_BUFFER_H	server/shared/packets/byte_buffer.h	6;"	d
PACKET_EOF_FLAG	client/old/packet_protocol.h	14;"	d
PACKET_H	client/old/packet.h	6;"	d
PACKET_HEAD_FLAG	client/old/packet_protocol.h	11;"	d
PACKET_HEAD_LEN	client/old/packet_protocol.h	20;"	d
PACKET_PROTOCOL_H	client/old/packet_protocol.h	6;"	d
PATH	client/filesystem.cpp	8;"	d	file:
PATH_MAX	common/define.h	45;"	d
PATH_SEPARATOR	client/Makefile	/^PATH_SEPARATOR = :$/;"	m
PATH_SEPARATOR	client/old/Makefile	/^PATH_SEPARATOR = :$/;"	m
PLATFORM	common/compiler_defs.h	14;"	d
PLATFORM	common/compiler_defs.h	16;"	d
PLATFORM	common/compiler_defs.h	18;"	d
PLATFORM	common/compiler_defs.h	20;"	d
PLATFORM	common/compiler_defs.h	22;"	d
PLATFORM_APPLE	common/compiler_defs.h	10;"	d
PLATFORM_INTEL	common/compiler_defs.h	11;"	d
PLATFORM_UNIX	common/compiler_defs.h	9;"	d
PLATFORM_WINDOWS	common/compiler_defs.h	8;"	d
PLAYER_H	client/old/player.h	6;"	d
POST_INSTALL	client/Makefile	/^POST_INSTALL = :$/;"	m
POST_INSTALL	client/old/Makefile	/^POST_INSTALL = :$/;"	m
POST_UNINSTALL	client/Makefile	/^POST_UNINSTALL = :$/;"	m
POST_UNINSTALL	client/old/Makefile	/^POST_UNINSTALL = :$/;"	m
PREFIX	gtest/makefile	/^PREFIX = "$prefix"$/;"	m
PREPROCESSOR_H	client/serialization/preprocessor.h	6;"	d
PRE_INSTALL	client/Makefile	/^PRE_INSTALL = :$/;"	m
PRE_INSTALL	client/old/Makefile	/^PRE_INSTALL = :$/;"	m
PRE_UNINSTALL	client/Makefile	/^PRE_UNINSTALL = :$/;"	m
PRE_UNINSTALL	client/old/Makefile	/^PRE_UNINSTALL = :$/;"	m
PROCESS_INPLACE	server/game/server/protocol/opcodes.h	/^	PROCESS_INPLACE = 0,$/;"	e	enum:packet_processing
PROCESS_RETURN_LAST_SYSTEM_ERROR	server/exceptions.h	45;"	d
PROCESS_SOURCE_LOCATION	server/exceptions.h	37;"	d
PROCESS_THREADSAFE	server/game/server/protocol/opcodes.h	/^	PROCESS_THREADSAFE$/;"	e	enum:packet_processing
PROCESS_THREADUNSAFE	server/game/server/protocol/opcodes.h	/^	PROCESS_THREADUNSAFE,$/;"	e	enum:packet_processing
PROCESS_THROW	server/exceptions.h	31;"	d
PROCESS_THROW_LAST_SYSTEM_ERROR	server/exceptions.h	40;"	d
PRODUCER_CONSUMER_QUEUE_H	common/threading/producer_consumer_queue.h	6;"	d
PROGRAMS	client/Makefile	/^PROGRAMS = $(bin_PROGRAMS)$/;"	m
PROGRAMS	client/old/Makefile	/^PROGRAMS = $(bin_PROGRAMS)$/;"	m
PROGRAMS	gtest/makefile	/^PROGRAMS = test$/;"	m
PROTO_API	common/define.h	100;"	d
PROTO_API	common/define.h	102;"	d
PRO_BIND_STDERR_H	server/process/bind_stderr.h	6;"	d
PRO_BIND_STDIN_H	server/process/bind_stdin.h	6;"	d
PRO_BIND_STDOUT_H	server/process/bind_stdout.h	6;"	d
PRO_CHILD_H	server/process/child.h	6;"	d
PRO_EXECUTOR_H	server/process/executor.h	6;"	d
PRO_FILE_DESCRIPTOR_H	server/process/file_descriptor.h	6;"	d
PRO_INHERIT_ENV_H	server/process/inherit_env.h	6;"	d
PRO_INITIALZER_H	server/process/initializer.h	6;"	d
PRO_PIPE_H	server/process/pipe.h	6;"	d
PRO_RUN_EXE_H	server/process/run_exe.h	6;"	d
PRO_SET_ARGS_H	server/process/set_args.h	6;"	d
PRO_START_PROCESS_H	server/process/start_process.h	6;"	d
PRO_WAIT_FOR_EXIT_H	server/process/wait_for_exit.h	6;"	d
PR_OP_CODES_H	server/game/server/protocol/opcodes.h	6;"	d
PR_PACKET_LOG_H	server/game/server/protocol/packet_log.h	6;"	d
Packet	client/old/packet.cpp	/^Packet::Packet(uint8_t* data) : packet_data_(data) {}$/;"	f	class:Packet
Packet	client/old/packet.h	/^		Packet(uint8_t* buf, int len)$/;"	f	class:Packet
Packet	client/old/packet.h	/^class Packet$/;"	c
Packet_head	client/old/packet_protocol.h	/^struct Packet_head$/;"	s
Pango_font	client/font/pango/font.h	/^			Pango_font(const std::string& name, unsigned size, $/;"	f	class:font::Pango_font
Pango_font	client/font/pango/font.h	/^	class Pango_font$/;"	c	namespace:font
Pango_text	client/font/text.h	/^	class Pango_text$/;"	c	namespace:font
Param_mode	client/cmdln.h	/^	enum class Param_mode$/;"	c	struct:Cmd_param
Param_value_status	client/cmdln.h	/^		enum class Param_value_status$/;"	c	class:Commandline
Params	client/old/packet.h	/^		union Params$/;"	u	class:Packet
Parse_status	client/cmdln.h	/^		enum class Parse_status$/;"	c	class:Commandline
Placer_base	client/gui/core/placer.h	/^class Placer_base$/;"	c	namespace:gui
Player	client/old/player.h	/^class Player : public Character$/;"	c
Point	client/sdl/point.h	/^	Point() : x(0), y(0)$/;"	f	struct:Point
Point	client/sdl/point.h	/^	Point(const SDL_Point& p) : x(p.x), y(p.y)$/;"	f	struct:Point
Point	client/sdl/point.h	/^	Point(const int x_, const int y_) : x(x_), y(y_)$/;"	f	struct:Point
Point	client/sdl/point.h	/^struct Point$/;"	s
Poller	client/net/poller.cpp	/^Poller::Poller(Event_loop* loop) : $/;"	f	class:net::Poller
Poller	client/net/poller.h	/^class Poller$/;"	c	namespace:net
Pump_info	client/events.h	/^		        Pump_info() : resize_dimensions(), ticks_(0) {}$/;"	f	struct:events::Pump_info
Pump_info	client/events.h	/^        struct Pump_info $/;"	s	namespace:events
Pump_monitor	client/events.cpp	/^        Pump_monitor::Pump_monitor()$/;"	f	class:events::Pump_monitor
Pump_monitor	client/events.h	/^        class Pump_monitor$/;"	c	namespace:events
Query	client/old/mysql_pool.cpp	/^	Query::Query() : dataset_(nullptr), field_(nullptr), row_(nullptr),$/;"	f	class:db::Query
Query	client/old/mysql_pool.cpp	/^	Query::Query(MYSQL_RES* dataset) { set_dataset(dataset); }$/;"	f	class:db::Query
Query	client/old/mysql_pool.cpp	/^	Query::Query(const Query& query) : dataset_(query.dataset_),$/;"	f	class:db::Query
Query	client/old/mysql_pool.h	/^	class Query$/;"	c	namespace:db
Queue_postion	client/gui/core/event/dispatcher.h	/^				enum Queue_postion$/;"	g	class:gui::event::Dispatcher
RANDOM_H	client/random.h	6;"	d
READ_BLOCK_SIZE	server/shared/networking/tcp_socket.h	12;"	d
RECEIVE_KEYBOARD_FOCUS	client/gui/core/event/handler.h	/^			RECEIVE_KEYBOARD_FOCUS,	\/\/ 小部件获得键盘焦点$/;"	e	enum:gui::event::Ui_event
RECT_H	client/sdl/rect.h	6;"	d
RED	common/logging/appender_console.h	/^	RED,$/;"	e	enum:uint8_t
RED_TEXT	client/font/marked-up_text.cpp	/^	  RED_TEXT = '#', COLOR_TEXT = '<', IMAGE = '&';$/;"	v
RELEASED	server/database/update/update_fetcher.h	/^		RELEASED,$/;"	e	enum:update_fetcher::state
RELOAD_DATA	client/game_launcher.h	/^		enum class Reload_game_data { RELOAD_DATA, NO_RELOAD_DATA };$/;"	m	class:Game_launcher::Reload_game_data
REMOVE_EMPTY	client/serialization/string_utils.h	/^	REMOVE_EMPTY = 0x01, \/\/ remove empty elements.$/;"	e	enum:__anon25
REMOVE_EMPTY	common/serialization/string_utils.h	/^	REMOVE_EMPTY = 0x01, \/\/ remove empty elements.$/;"	e	enum:__anon13
RENDER_UTILS_H	client/sdl/render_utils.h	6;"	d
REQUEST_PLACEMENT	client/gui/core/event/handler.h	/^			REQUEST_PLACEMENT,	\/\/ 请求放置小部件，这可能出发其他布局组件$/;"	e	enum:gui::event::Ui_event
RESULT_FAILD	client/old/packet_protocol.h	17;"	d
RESULT_OK	client/old/packet_protocol.h	16;"	d
RGBA_ALPHA_BITSHIFT	client/color.h	/^constexpr uint32_t RGBA_ALPHA_BITSHIFT = 0;$/;"	v
RGBA_ALPHA_MASK	client/color.h	/^constexpr uint32_t RGBA_ALPHA_MASK = 0x000000ff;$/;"	v
RGBA_BLUE_BITSHIFT	client/color.h	/^constexpr uint32_t RGBA_BLUE_BITSHIFT  = 8;$/;"	v
RGBA_BLUE_MASK	client/color.h	/^constexpr uint32_t RGBA_BLUE_MASK  = 0x0000ff00;$/;"	v
RGBA_GREEN_BITSHIFT	client/color.h	/^constexpr uint32_t RGBA_GREEN_BITSHIFT = 16;$/;"	v
RGBA_GREEN_MASK	client/color.h	/^constexpr uint32_t RGBA_GREEN_MASK = 0x00ff0000;$/;"	v
RGBA_RED_BITSHIFT	client/color.h	/^constexpr uint32_t RGBA_RED_BITSHIFT   = 24;$/;"	v
RGBA_RED_MASK	client/color.h	/^constexpr uint32_t RGBA_RED_MASK   = 0xff000000;$/;"	v
RIGHT_BUTTON_CLICK	client/gui/core/event/handler.h	/^			RIGHT_BUTTON_CLICK,			\/\/ See LEFT_BUTTON_CLICK$/;"	e	enum:gui::event::Ui_event
RIGHT_BUTTON_DOUBLE_CLICK	client/gui/core/event/handler.h	/^			RIGHT_BUTTON_DOUBLE_CLICK,	\/\/ See LEFT_BUTTON_DOUBLE_CLICK$/;"	e	enum:gui::event::Ui_event
RIGHT_BUTTON_DOWN	client/gui/core/event/handler.h	/^			RIGHT_BUTTON_DOWN,			\/\/ See LEFT_BUTTON_DOWN$/;"	e	enum:gui::event::Ui_event
RIGHT_BUTTON_UP	client/gui/core/event/handler.h	/^			RIGHT_BUTTON_UP,			\/\/ See LEFT_BUTTON_UP$/;"	e	enum:gui::event::Ui_event
RIO_BUFSIZE	client/old/rio.h	12;"	d
RIO_H	client/old/rio.h	6;"	d
Read_event_callback	client/net/channel.h	/^	typedef std::function<void(Timestamp)> Read_event_callback;$/;"	t	class:net::Channel
Recruiter	server/game/server/world_tcp_socket.cpp	/^        uint32_t Recruiter;$/;"	m	struct:AccountInfo::__anon10	file:
Redirect_output_setter	client/log.cpp	/^	Redirect_output_setter::Redirect_output_setter(std::ostream& stream)$/;"	f	class:lg::Redirect_output_setter
Redirect_output_setter	client/log.h	/^	class Redirect_output_setter$/;"	c	namespace:lg
Reload_game_data	client/game_launcher.h	/^		enum class Reload_game_data { RELOAD_DATA, NO_RELOAD_DATA };$/;"	c	class:Game_launcher
Render_raii_rect_setter_base	client/sdl/render_utils.h	/^		explicit Render_raii_rect_setter_base(SDL_Rect* rect) :$/;"	f	class:Render_raii_rect_setter_base
Render_raii_rect_setter_base	client/sdl/render_utils.h	/^class Render_raii_rect_setter_base$/;"	c
Render_target_setter	client/sdl/render_utils.h	/^		explicit Render_target_setter(Texture& t) :$/;"	f	class:Render_target_setter
Render_target_setter	client/sdl/render_utils.h	/^class Render_target_setter$/;"	c
Resource_locker	client/gui/core/event/distributor.cpp	/^				Resource_locker(bool& locked) : locked_(locked)$/;"	f	class:gui::event::Resource_locker
Resource_locker	client/gui/core/event/distributor.cpp	/^		class Resource_locker$/;"	c	namespace:gui::event	file:
Reversion	client/events.h	/^struct Reversion$/;"	s
Rng	client/random.cpp	/^	Rng::Rng() : random_calls_(0) {}$/;"	f	class:randomness::Rng
Rng	client/random.h	/^	class Rng : private std::numeric_limits<uint32_t>$/;"	c	namespace:randomness
Rng_default	client/random.cpp	/^			Rng_default() : gen_()$/;"	f	class:__anon23::Rng_default
Rng_default	client/random.cpp	/^	class Rng_default : public randomness::Rng$/;"	c	namespace:__anon23	file:
Rwops_ptr	client/filesystem.h	/^	typedef unique_ptr<SDL_RWops, void(*)(SDL_RWops*)> Rwops_ptr;$/;"	t	namespace:filesystem
SCOPE_COUNT	client/hotkey/hotkey_command.h	/^		SCOPE_COUNT$/;"	e	enum:hotkey::Scope
SCOPE_GAME	client/hotkey/hotkey_command.h	/^		SCOPE_GAME,$/;"	e	enum:hotkey::Scope
SCOPE_MAIN_MENU	client/hotkey/hotkey_command.h	/^		SCOPE_MAIN_MENU,$/;"	e	enum:hotkey::Scope
SDL_ACTIVATE	client/gui/core/event/handler.h	/^			SDL_ACTIVATE,		\/\/ 主程序窗口被激活$/;"	e	enum:gui::event::Ui_event
SDL_ALPHA_BITSHIFT	client/color.h	/^constexpr uint32_t SDL_ALPHA_BITSHIFT = 24;$/;"	v
SDL_ALPHA_MASK	client/color.h	/^constexpr uint32_t SDL_ALPHA_MASK = 0xff000000;$/;"	v
SDL_BLUE_BITSHIFT	client/color.h	/^constexpr uint32_t SDL_BLUE_BITSHIFT   = 0;$/;"	v
SDL_BLUE_MASK	client/color.h	/^constexpr uint32_t SDL_BLUE_MASK  = 0x000000ff;$/;"	v
SDL_GREEN_BITSHIFT	client/color.h	/^constexpr uint32_t SDL_GREEN_BITSHIFT = 8;$/;"	v
SDL_GREEN_MASK	client/color.h	/^constexpr uint32_t SDL_GREEN_MASK = 0x0000ff00;$/;"	v
SDL_KEY_DOWN	client/gui/core/event/handler.h	/^			SDL_KEY_DOWN,		\/\/ SDL按键事件$/;"	e	enum:gui::event::Ui_event
SDL_LEFT_BUTTON_DOWN	client/gui/core/event/handler.h	/^			SDL_LEFT_BUTTON_DOWN,	\/\/ SDL鼠标左键按下事件$/;"	e	enum:gui::event::Ui_event
SDL_LEFT_BUTTON_UP	client/gui/core/event/handler.h	/^			SDL_LEFT_BUTTON_UP,		\/\/ SDL鼠标松开左按键事件$/;"	e	enum:gui::event::Ui_event
SDL_MIDDLE_BUTTON_DOWN	client/gui/core/event/handler.h	/^			SDL_MIDDLE_BUTTON_DOWN,		\/\/ SDL鼠标中间按下事件$/;"	e	enum:gui::event::Ui_event
SDL_MIDDLE_BUTTON_UP	client/gui/core/event/handler.h	/^			SDL_MIDDLE_BUTTON_UP,		\/\/ SDL鼠标松开中间按键事件$/;"	e	enum:gui::event::Ui_event
SDL_MOUSE_MOTION	client/gui/core/event/handler.h	/^			SDL_MOUSE_MOTION,	\/\/ 鼠标移动事件$/;"	e	enum:gui::event::Ui_event
SDL_RAW_EVENT	client/gui/core/event/handler.h	/^			SDL_RAW_EVENT		\/\/ 原始SDL事件$/;"	e	enum:gui::event::Ui_event
SDL_RED_BITSHIFT	client/color.h	/^constexpr uint32_t SDL_RED_BITSHIFT   = 16;$/;"	v
SDL_RED_MASK	client/color.h	/^constexpr uint32_t SDL_RED_MASK   = 0x00ff0000;$/;"	v
SDL_RIGHT_BUTTON_DOWN	client/gui/core/event/handler.h	/^			SDL_RIGHT_BUTTON_DOWN,		\/\/ SDL鼠标右击事件$/;"	e	enum:gui::event::Ui_event
SDL_RIGHT_BUTTON_UP	client/gui/core/event/handler.h	/^			SDL_RIGHT_BUTTON_UP,		\/\/ SDL松开鼠标右键事件$/;"	e	enum:gui::event::Ui_event
SDL_TEXT_EDITING	client/gui/core/event/handler.h	/^			SDL_TEXT_EDITING,	\/\/ SDL文本编辑事件$/;"	e	enum:gui::event::Ui_event
SDL_TEXT_INPUT	client/gui/core/event/handler.h	/^			SDL_TEXT_INPUT,		\/\/ SDL文本输入事件$/;"	e	enum:gui::event::Ui_event
SDL_TOUCH_DOWN	client/gui/core/event/handler.h	/^			SDL_TOUCH_DOWN,$/;"	e	enum:gui::event::Ui_event
SDL_TOUCH_MOTION	client/gui/core/event/handler.h	/^			SDL_TOUCH_MOTION,$/;"	e	enum:gui::event::Ui_event
SDL_TOUCH_UP	client/gui/core/event/handler.h	/^			SDL_TOUCH_UP,$/;"	e	enum:gui::event::Ui_event
SDL_TTF_H	client/font/sdl_ttf.h	6;"	d
SDL_VIDEO_RESIZE	client/gui/core/event/handler.h	/^			SDL_VIDEO_RESIZE,	\/\/ SDL调整大小请求，坐标是新的窗口大小$/;"	e	enum:gui::event::Ui_event
SDL_WHEEL_DOWN	client/gui/core/event/handler.h	/^			SDL_WHEEL_DOWN,		\/\/ SDL按下滚轮事件$/;"	e	enum:gui::event::Ui_event
SDL_WHEEL_LEFT	client/gui/core/event/handler.h	/^			SDL_WHEEL_LEFT,		\/\/ SDL左滚轮事件$/;"	e	enum:gui::event::Ui_event
SDL_WHEEL_RIGHT	client/gui/core/event/handler.h	/^			SDL_WHEEL_RIGHT,	\/\/ SDL右滚轮事件$/;"	e	enum:gui::event::Ui_event
SDL_WHEEL_UP	client/gui/core/event/handler.h	/^			SDL_WHEEL_UP,		\/\/ SDL松开滚轮事件$/;"	e	enum:gui::event::Ui_event
SDL_ttf	client/font/sdl_ttf.cpp	/^SDL_ttf::SDL_ttf()$/;"	f	class:SDL_ttf
SDL_ttf	client/font/sdl_ttf.h	/^struct SDL_ttf$/;"	s
SERVER_TO_CLIENT	server/game/server/protocol/packet_log.h	/^	SERVER_TO_CLIENT$/;"	e	enum:direction
SET_BYTE	client/old/packet.h	24;"	d
SET_INT	client/old/packet.h	20;"	d
SET_INT64	client/old/packet.h	18;"	d
SET_MAKE	client/Makefile	/^SET_MAKE = $/;"	m
SET_MAKE	client/old/Makefile	/^SET_MAKE = $/;"	m
SET_SHORT	client/old/packet.h	22;"	d
SET_UINT	client/old/packet.h	21;"	d
SET_USHORT	client/old/packet.h	23;"	d
SHARED_API	common/define.h	112;"	d
SHARED_API	common/define.h	114;"	d
SHELL	client/Makefile	/^SHELL = \/bin\/bash$/;"	m
SHELL	client/old/Makefile	/^SHELL = \/bin\/bash$/;"	m
SHEMALE	client/old/player.h	/^	SHEMALE		\/\/ 人妖$/;"	e	enum:Sex
SHOW_HELPTIP	client/gui/core/event/handler.h	/^			SHOW_HELPTIP,			\/\/ 请求小部件显示悬停帮助提示$/;"	e	enum:gui::event::Ui_event
SHOW_HELPTIP_EVENT	client/events.h	19;"	d
SHOW_TOOLTIP	client/gui/core/event/handler.h	/^			SHOW_TOOLTIP,		\/\/ 请求小部件显示悬停提示$/;"	e	enum:gui::event::Ui_event
SI64FMTD	common/define.h	126;"	d
SI64LIT	common/define.h	127;"	d
SINGLETON_H	client/old/singleton.h	6;"	d
SIZE_15	client/font/constants.h	/^                     SIZE_15 = 15 * SIZE_NORMAL \/ 14, $/;"	v
SIZE_LARGE	client/font/constants.h	/^	             SIZE_LARGE = 18 * SIZE_NORMAL \/ 14, $/;"	v
SIZE_NORMAL	client/font/constants.h	/^constexpr int SIZE_NORMAL = 14;$/;"	v
SIZE_PLUS	client/font/constants.h	/^                     SIZE_PLUS = 16 * SIZE_NORMAL \/ 14, $/;"	v
SIZE_SMALL	client/font/constants.h	/^                     SIZE_SMALL = 12 * SIZE_NORMAL \/ 14, $/;"	v
SIZE_TINY	client/font/constants.h	/^constexpr int SIZE_TINY = 10 * SIZE_NORMAL \/ 14, $/;"	v
SIZE_TITLE	client/font/constants.h	/^                     SIZE_TITLE = 20 * SIZE_NORMAL \/ 14, $/;"	v
SIZE_XLARGE	client/font/constants.h	/^                     SIZE_XLARGE = 24 * SIZE_NORMAL \/ 14;$/;"	v
SMALL_TEXT	client/font/marked-up_text.cpp	/^const char LARGE_TEXT = '*', SMALL_TEXT = '`', BOLD_TEXT = '~',$/;"	v
SM_JSON_H	client/json.h	6;"	d
SOCKET	client/old/event.h	/^		SOCKET,$/;"	e	enum:event::Socket_event
SOCKET_H	client/net/socket.h	6;"	d
SOUND_BEWLL	client/sound.h	/^		SOUND_BEWLL,$/;"	m	class:sound::Channel_group
SOUND_H	client/sound.h	6;"	d
SOUND_MUSIC_TRACK_H	client/sound_music_track.h	6;"	d
SOUND_SOURCES	client/sound.h	/^		SOUND_SOURCES = 0,$/;"	m	class:sound::Channel_group
SOUND_TIMER	client/sound.h	/^		SOUND_TIMER,$/;"	m	class:sound::Channel_group
SOUND_UI	client/sound.h	/^		SOUND_UI,$/;"	m	class:sound::Channel_group
SOURCES	client/Makefile	/^SOURCES = $(Martial_arts_new_legend_SOURCES)$/;"	m
SOURCES	client/old/Makefile	/^SOURCES = $(world_server_SOURCES)$/;"	m
SOURCE_DIRECTORY	common/configuration/revision_data.h	11;"	d
SQL_ELEMENT_PREPARED	server/database/database/sql_operation.h	/^	SQL_ELEMENT_PREPARED$/;"	e	enum:sql_element_data_type
SQL_ELEMENT_RAW	server/database/database/sql_operation.h	/^	SQL_ELEMENT_RAW,$/;"	e	enum:sql_element_data_type
STANDARD_COLORS_H	client/font/standard_colors.h	6;"	d
STATUS_AUTHED	server/game/server/protocol/opcodes.h	/^	STATUS_AUTHED = 0,$/;"	e	enum:session_status
STATUS_LOGGEDIN	server/game/server/protocol/opcodes.h	/^	STATUS_LOGGEDIN,$/;"	e	enum:session_status
STATUS_LOGGEDIN_OR_RECENTLY_LOGGOUT	server/game/server/protocol/opcodes.h	/^	STATUS_LOGGEDIN_OR_RECENTLY_LOGGOUT,$/;"	e	enum:session_status
STATUS_NEVER	server/game/server/protocol/opcodes.h	/^	STATUS_NEVER,$/;"	e	enum:session_status
STATUS_TRANSFER	server/game/server/protocol/opcodes.h	/^	STATUS_TRANSFER,$/;"	e	enum:session_status
STATUS_UNHANDLED	server/game/server/protocol/opcodes.h	/^	STATUS_UNHANDLED$/;"	e	enum:session_status
STREAM_H	client/old/stream.h	6;"	d
STREAM_OPS_H	client/font/pango/stream_ops.h	6;"	d
STRING	client/config.h	/^	STRING,$/;"	m	class:Type
STRINGIZE	server/exceptions.h	33;"	d
STRING_UTILS_H	client/serialization/string_utils.h	6;"	d
STRING_UTILS_H	common/serialization/string_utils.h	6;"	d
STRIP	client/Makefile	/^STRIP = $/;"	m
STRIP	client/old/Makefile	/^STRIP = $/;"	m
STRIP_SPACES	client/serialization/string_utils.h	/^	STRIP_SPACES = 0x02  \/\/ strips leading and trailing blank spaces.$/;"	e	enum:__anon25
STRIP_SPACES	common/serialization/string_utils.h	/^	STRIP_SPACES = 0x02  \/\/ strips leading and trailing blank spaces.$/;"	e	enum:__anon13
STYLE_BOLD	client/font/text.h	/^				STYLE_BOLD = 1,$/;"	e	enum:font::Pango_text::FONT_STYLE
STYLE_ITALIC	client/font/text.h	/^				STYLE_ITALIC = 2,$/;"	e	enum:font::Pango_text::FONT_STYLE
STYLE_LIGHT	client/font/text.h	/^				STYLE_LIGHT = 8$/;"	e	enum:font::Pango_text::FONT_STYLE
STYLE_NORMAL	client/font/text.h	/^				STYLE_NORMAL = 0,$/;"	e	enum:font::Pango_text::FONT_STYLE
STYLE_UNDERLINE	client/font/text.h	/^				STYLE_UNDERLINE = 4,$/;"	e	enum:font::Pango_text::FONT_STYLE
SUBSET_DESCRIPTOR_H	client/font/subset_descriptor.h	6;"	d
SURFACE_H	client/sdl/surface.h	6;"	d
SZFMTD	common/define.h	129;"	d
S_PACKET_H	server/game/server/packet.h	6;"	d
S_WORLD_PACKET_H	server/game/server/world_packet.h	6;"	d
S_WORLD_TCP_SOCKET_H	server/game/server/world_tcp_socket.h	6;"	d
S_WORLD_TCP_SOCKET_MGR_H	server/game/server/world_tcp_socket_mgr.h	6;"	d
Scale_quality	client/image.h	/^	enum Scale_quality {NEAREST, LINEAR};$/;"	g	namespace:image
Scope	client/hotkey/hotkey_command.h	/^	enum Scope $/;"	g	namespace:hotkey
Scope_change	client/hotkey/hotkey_command.h	/^	class Scope_change$/;"	c	namespace:hotkey
Scope_logger	client/log.h	/^			Scope_logger(const Log_domain& domain, const char* str) :$/;"	f	class:lg::Scope_logger
Scope_logger	client/log.h	/^			Scope_logger(const Log_domain& domain, const std::string& str)$/;"	f	class:lg::Scope_logger
Scope_logger	client/log.h	/^	class Scope_logger$/;"	c	namespace:lg
Sdl_event_handler	client/gui/core/event/handler.cpp	/^		Sdl_event_handler::Sdl_event_handler() : events::Sdl_handler(false),$/;"	f	class:gui::event::Sdl_event_handler
Sdl_event_handler	client/gui/core/event/handler.cpp	/^		class Sdl_event_handler : public events::Sdl_handler$/;"	c	namespace:gui::event	file:
Sdl_handler	client/events.cpp	/^        Sdl_handler::Sdl_handler(bool auto_join) : has_joined_(false), $/;"	f	class:events::Sdl_handler
Sdl_handler	client/events.h	/^        class Sdl_handler$/;"	c	namespace:events
Security	server/game/server/world_tcp_socket.cpp	/^        AccountTypes Security;$/;"	m	struct:AccountInfo::__anon10	file:
Selection	client/game_launcher.h	/^		enum class Selection { CONNECT, HOST, LOCAL };$/;"	c	class:Game_launcher
SendAuthResponseError	server/game/server/world_tcp_socket.cpp	/^void world_tcp_socket::SendAuthResponseError(uint32_t code)$/;"	f	class:world_tcp_socket
Serialize	client/json.h	/^struct Serialize$/;"	s	class:Format
Server	client/old/server.cpp	/^Server::Server(const std::string& listen_addr, $/;"	f	class:Server
Server	client/old/server.h	/^class Server$/;"	c
Setter	client/cursor.cpp	/^	Setter::Setter(Cursor_type type) : old_(current_cursor)$/;"	f	class:cursor::Setter
Setter	client/cursor.h	/^	struct Setter$/;"	s	namespace:cursor
Sex	client/old/player.h	/^enum Sex$/;"	g
Signal_function	client/gui/core/event/dispatcher.h	/^				bool& handled, bool& halt)> Signal_function;$/;"	t	namespace:gui::event
Signal_keyboard_function	client/gui/core/event/dispatcher.h	/^				const std::string& unicode)> Signal_keyboard_function;$/;"	t	namespace:gui::event
Signal_message_function	client/gui/core/event/dispatcher.h	/^				Message& message)> Signal_message_function;$/;"	t	namespace:gui::event
Signal_mouse_function	client/gui/core/event/dispatcher.h	/^				const Point& coordinate)> Signal_mouse_function;$/;"	t	namespace:gui::event
Signal_queue	client/gui/core/event/dispatcher.h	/^					Signal_queue() {}$/;"	f	struct:gui::event::Dispatcher::Signal_queue
Signal_queue	client/gui/core/event/dispatcher.h	/^				struct Signal_queue$/;"	s	class:gui::event::Dispatcher
Signal_raw_event_function	client/gui/core/event/dispatcher.h	/^				const SDL_Event& sdlevent)> Signal_raw_event_function;$/;"	t	namespace:gui::event
Signal_text_input_function	client/gui/core/event/dispatcher.h	/^				int32_t select_len)> Signal_text_input_function;$/;"	t	namespace:gui::event
Signal_touch_function	client/gui/core/event/dispatcher.h	/^				const Point& distance)> Signal_touch_function;$/;"	t	namespace:gui::event
Signal_type	client/gui/core/event/dispatcher.h	/^					Signal_type() : pre_child(), child(), post_child() {}$/;"	f	struct:gui::event::Dispatcher::Signal_type
Signal_type	client/gui/core/event/dispatcher.h	/^				struct Signal_type$/;"	s	class:gui::event::Dispatcher
Singal_notification_function	client/gui/core/event/dispatcher.h	/^				void*)> Singal_notification_function;$/;"	t	namespace:gui::event
Singleton	client/old/singleton.h	/^class Singleton$/;"	c
Socket	client/net/socket.h	/^	explicit Socket(int sockfd) : fd_(sockfd) {}$/;"	f	class:net::Socket
Socket	client/net/socket.h	/^class Socket$/;"	c	namespace:net
Socket_event	client/old/event.h	/^	enum Socket_event$/;"	g	namespace:event
Sound_cache_chunk	client/sound.cpp	/^			Sound_cache_chunk(const Sound_cache_chunk& scc) :$/;"	f	class:__anon28::Sound_cache_chunk
Sound_cache_chunk	client/sound.cpp	/^			Sound_cache_chunk(const std::string& f) :$/;"	f	class:__anon28::Sound_cache_chunk
Sound_cache_chunk	client/sound.cpp	/^	class Sound_cache_chunk$/;"	c	namespace:__anon28	file:
State	client/thread/thread.h	/^		struct State$/;"	s	class:Thread
StateE	client/net/tcp_connection.h	/^  enum StateE { kDisconnected, kConnecting, kConnected, kDisconnecting };$/;"	g	class:net::Tcp_connection
StateE	server/shared/networking/tcp_socket.h	/^	enum StateE { kDisconnected, kConnecting, kConnected, kDisconnecting };$/;"	g	class:tcp_socket
State_impl	client/thread/thread.h	/^			State_impl(Callable&& c) : $/;"	f	struct:Thread::State_impl
State_impl	client/thread/thread.h	/^		struct State_impl : public State$/;"	s	class:Thread
Status	client/thread/condition_variable.h	/^enum class Status { no_timeout, timeout };$/;"	c
Storage	client/json.h	/^	union Storage $/;"	u	class:Format::Value
String	client/serialization/unicode_type.h	/^	typedef std::string String;$/;"	t	namespace:utf8
String	client/serialization/unicode_type.h	/^	typedef std::vector<Char> String;$/;"	t	namespace:ucs4
String	client/serialization/unicode_type.h	/^	typedef std::vector<Char> String;$/;"	t	namespace:utf16
Subset_descriptor	client/font/font_description.h	/^	Subset_descriptor() : $/;"	f	struct:Subset_descriptor
Subset_descriptor	client/font/font_description.h	/^	Subset_descriptor(Config& font) : name(font["font", "name"]),$/;"	f	struct:Subset_descriptor
Subset_descriptor	client/font/font_description.h	/^struct Subset_descriptor$/;"	s
Subset_descriptor	client/font/subset_descriptor.h	/^		Subset_descriptor() : name(), bold_name(), italic_name(), $/;"	f	struct:font::Subset_descriptor
Subset_descriptor	client/font/subset_descriptor.h	/^	struct Subset_descriptor$/;"	s	namespace:font
Subset_id	client/font/font_id.h	/^typedef int Subset_id;$/;"	t
Surface	client/sdl/surface.h	/^		Surface() :surface_(nullptr) {}$/;"	f	class:Surface
Surface	client/sdl/surface.h	/^		Surface(SDL_Surface* surf) : surface_(surf) {}$/;"	f	class:Surface
Surface	client/sdl/surface.h	/^		Surface(Surface&& s) : surface_(s.get())$/;"	f	class:Surface
Surface	client/sdl/surface.h	/^		Surface(const Surface& s) : surface_(s.get()) $/;"	f	class:Surface
Surface	client/sdl/surface.h	/^class Surface$/;"	c
TEXTURE_H	client/sdl/texture.h	6;"	d
TEXT_CACHE_H	client/font/text_cache.h	6;"	d
TEXT_H	client/font/text.h	6;"	d
TEXT_SURFACE_H	client/font/text_surface.h	6;"	d
THREADPOOL_H	client/old/threadpool.h	6;"	d
TIMER_EVENT	client/events.h	15;"	d
TIMESTAMP_H	common/utility/timestamp.h	6;"	d
TITLE_SCREEN__ADDONS	client/hotkey/hotkey_command.h	/^	        TITLE_SCREEN__ADDONS,$/;"	e	enum:hotkey::Hotkey_command
TITLE_SCREEN__CAMPAIGN	client/hotkey/hotkey_command.h	/^	        TITLE_SCREEN__CAMPAIGN,$/;"	e	enum:hotkey::Hotkey_command
TITLE_SCREEN__CORES	client/hotkey/hotkey_command.h	/^	        TITLE_SCREEN__CORES,$/;"	e	enum:hotkey::Hotkey_command
TITLE_SCREEN__CREDITS	client/hotkey/hotkey_command.h	/^	        TITLE_SCREEN__CREDITS,$/;"	e	enum:hotkey::Hotkey_command
TITLE_SCREEN__EDITOR	client/hotkey/hotkey_command.h	/^	        TITLE_SCREEN__EDITOR,$/;"	e	enum:hotkey::Hotkey_command
TITLE_SCREEN__MULTIPLAYER	client/hotkey/hotkey_command.h	/^	        TITLE_SCREEN__MULTIPLAYER,$/;"	e	enum:hotkey::Hotkey_command
TITLE_SCREEN__NEXT_TIP	client/hotkey/hotkey_command.h	/^	        TITLE_SCREEN__NEXT_TIP,$/;"	e	enum:hotkey::Hotkey_command
TITLE_SCREEN__PREVIOUS_TIP	client/hotkey/hotkey_command.h	/^	        TITLE_SCREEN__PREVIOUS_TIP,$/;"	e	enum:hotkey::Hotkey_command
TITLE_SCREEN__RELOAD_WML	client/hotkey/hotkey_command.h	/^	        TITLE_SCREEN__RELOAD_WML,$/;"	e	enum:hotkey::Hotkey_command
TITLE_SCREEN__TEST	client/hotkey/hotkey_command.h	/^	        TITLE_SCREEN__TEST,$/;"	e	enum:hotkey::Hotkey_command
TITLE_SCREEN__TUTORIAL	client/hotkey/hotkey_command.h	/^	        TITLE_SCREEN__TUTORIAL,$/;"	e	enum:hotkey::Hotkey_command
TOOLTIPS_H	client/tooltips.h	6;"	d
TO_FULLSCREEN	client/video.h	/^			TO_FULLSCREEN,$/;"	m	class:Video::MODE_EVENT
TO_RES	client/video.h	/^			TO_RES,$/;"	m	class:Video::MODE_EVENT
TO_WINDOWED	client/video.h	/^			TO_WINDOWED,$/;"	m	class:Video::MODE_EVENT
TRACE	common/logging/old_logging/logging.h	/^		TRACE,$/;"	e	enum:Logger::Log_level
TTF_record	client/font/sdl_ttf.cpp	/^struct TTF_record$/;"	s	file:
TYPE_BINARY	server/database/database/prepared_statement.h	/^	TYPE_BINARY,$/;"	e	enum:prepared_statement_value_type
TYPE_BOOL	server/database/database/prepared_statement.h	/^	TYPE_BOOL,$/;"	e	enum:prepared_statement_value_type
TYPE_DOUBLE	server/database/database/prepared_statement.h	/^	TYPE_DOUBLE,$/;"	e	enum:prepared_statement_value_type
TYPE_FLOAT	server/database/database/prepared_statement.h	/^	TYPE_FLOAT,$/;"	e	enum:prepared_statement_value_type
TYPE_INT16	server/database/database/prepared_statement.h	/^	TYPE_INT16,$/;"	e	enum:prepared_statement_value_type
TYPE_INT32	server/database/database/prepared_statement.h	/^	TYPE_INT32,$/;"	e	enum:prepared_statement_value_type
TYPE_INT64	server/database/database/prepared_statement.h	/^	TYPE_INT64,$/;"	e	enum:prepared_statement_value_type
TYPE_INT8	server/database/database/prepared_statement.h	/^	TYPE_INT8,$/;"	e	enum:prepared_statement_value_type
TYPE_NULL	server/database/database/prepared_statement.h	/^	TYPE_NULL$/;"	e	enum:prepared_statement_value_type
TYPE_STRING	server/database/database/prepared_statement.h	/^	TYPE_STRING,$/;"	e	enum:prepared_statement_value_type
TYPE_UINT16	server/database/database/prepared_statement.h	/^	TYPE_UINT16,$/;"	e	enum:prepared_statement_value_type
TYPE_UINT32	server/database/database/prepared_statement.h	/^	TYPE_UINT32,$/;"	e	enum:prepared_statement_value_type
TYPE_UINT64	server/database/database/prepared_statement.h	/^	TYPE_UINT64,$/;"	e	enum:prepared_statement_value_type
TYPE_UINT8	server/database/database/prepared_statement.h	/^	TYPE_UINT8,$/;"	e	enum:prepared_statement_value_type
Tcp_connection	client/net/tcp_connection.cpp	/^Tcp_connection::Tcp_connection(Event_loop* loop,$/;"	f	class:net::Tcp_connection
Tcp_connection	client/net/tcp_connection.h	/^class Tcp_connection : public std::enable_shared_from_this<Tcp_connection>$/;"	c	namespace:net
Tcp_connection_ptr	client/net/net_utils.h	/^typedef std::shared_ptr<Tcp_connection> Tcp_connection_ptr;$/;"	t	namespace:net
Tcp_connection_ptr	client/net/tcp_connection.h	/^typedef std::shared_ptr<Tcp_connection> Tcp_connection_ptr;$/;"	t	namespace:net
Tcp_server	client/net/tcp_server.cpp	/^Tcp_server::Tcp_server(Event_loop* loop, const Inet_address& listen_addr,$/;"	f	class:net::Tcp_server
Tcp_server	client/net/tcp_server.h	/^class Tcp_server$/;"	c	namespace:net
Tcp_server	server/shared/networking/tcp_server.cpp	/^Tcp_server::Tcp_server(Event_loop* loop, const Inet_address& listen_addr,$/;"	f	class:net::Tcp_server
Tcp_server	server/shared/networking/tcp_server.h	/^class Tcp_server$/;"	c	namespace:net
Text_cache	client/font/text_cache.h	/^		Text_cache() {}$/;"	f	class:Text_cache
Text_cache	client/font/text_cache.h	/^class Text_cache$/;"	c
Text_chunk	client/font/font_id.h	/^	Text_chunk(Subset_id subset) : subset(subset), text() {}$/;"	f	struct:Text_chunk
Text_chunk	client/font/font_id.h	/^struct Text_chunk$/;"	s
Text_surface	client/font/text_surface.cpp	/^Text_surface::Text_surface(int size, Color color, int style) : hash_(0),$/;"	f	class:Text_surface
Text_surface	client/font/text_surface.h	/^class Text_surface$/;"	c
Texture	client/sdl/texture.cpp	/^Texture(Texture&& t) : texture_(std::move(t)) {}$/;"	f
Texture	client/sdl/texture.cpp	/^Texture::Texture() : texture_(nullptr) {}$/;"	f	class:Texture
Texture	client/sdl/texture.cpp	/^Texture::Texture(SDL_Texture* t) : texture_(t, &cleanup_texture)$/;"	f	class:Texture
Texture	client/sdl/texture.cpp	/^Texture::Texture(const Surface& surf) : texture_(nullptr)$/;"	f	class:Texture
Texture	client/sdl/texture.cpp	/^Texture::Texture(int w, int h, SDL_TextureAccess access) : texture_(nullptr)$/;"	f	class:Texture
Texture	client/sdl/texture.h	/^class Texture$/;"	c
Texture_cache	client/image.h	/^	typedef Cache_type<Texture> Texture_cache;$/;"	t	namespace:image
Thread	client/thread/thread.h	/^		Thread(Thread&& t) { swap(t); }$/;"	f	class:Thread
Thread	client/thread/thread.h	/^		explicit Thread(Callable& f, Args&&... args)$/;"	f	class:Thread
Thread	client/thread/thread.h	/^class Thread$/;"	c
Thread_init_callback	client/net/event_loop_thread.h	/^	typedef std::function<void(Event_loop*)> Thread_init_callback;$/;"	t	class:net::Event_loop_thread
Thread_init_callback	client/net/event_loop_threadpool.h	/^			typedef std::function<void(Event_loop*)> Thread_init_callback;$/;"	t	class:net::Event_loop_threadpool
Thread_init_callback	client/net/tcp_server.h	/^	typedef std::function<void(Event_loop*)> Thread_init_callback;$/;"	t	class:net::Tcp_server
Thread_init_callback	server/shared/networking/tcp_server.h	/^	typedef std::function<void(Event_loop*)> Thread_init_callback;$/;"	t	class:net::Tcp_server
Threadpool	client/old/threadpool.h	/^		Threadpool() : stop_(false)$/;"	f	class:Threadpool
Threadpool	client/old/threadpool.h	/^class Threadpool$/;"	c
Timer	client/net/timer.h	/^	Timer(const Timer_callback& cb, Timestamp when, double interval) :$/;"	f	class:net::Timer
Timer	client/net/timer.h	/^class Timer$/;"	c	namespace:net
Timer_callback	client/net/net_utils.h	/^typedef std::function<void()> Timer_callback;$/;"	t	namespace:net
Timer_callback	server/shared/networking/timer.h	/^typedef std::function<void()> Timer_callback;$/;"	t
Timer_id	client/net/timer.h	/^	Timer_id() : timer_(nullptr), sequence_(0) {}$/;"	f	class:net::Timer_id
Timer_id	client/net/timer.h	/^	explicit Timer_id(Timer* timer, int64_t sequence) : $/;"	f	class:net::Timer_id
Timer_id	client/net/timer.h	/^class Timer_id$/;"	c	namespace:net
Timer_list	client/net/timer_queue.h	/^	typedef std::set<Entry> Timer_list;$/;"	t	class:net::Timer_queue
Timer_list	server/shared/networking/timer_queue.h	/^	typedef std::set<Entry> Timer_list;$/;"	t	class:timer_queue
Timer_queue	client/net/timer_queue.cpp	/^Timer_queue::Timer_queue(Event_loop* loop) :$/;"	f	class:net::Timer_queue
Timer_queue	client/net/timer_queue.h	/^class Timer_queue$/;"	c	namespace:net
Timestamp	common/utility/timestamp.h	/^	Timestamp() : micro_seconds_since_epoch_(0) {}$/;"	f	class:Timestamp
Timestamp	common/utility/timestamp.h	/^	explicit Timestamp(int64_t micro_seconds_since_epoch) : $/;"	f	class:Timestamp
Timestamp	common/utility/timestamp.h	/^class Timestamp$/;"	c
Tooltip	client/tooltips.cpp	/^	Tooltip(const SDL_Rect& r, const std::string& msg, $/;"	f	struct:Tooltip
Tooltip	client/tooltips.cpp	/^struct Tooltip$/;"	s	file:
Try_to_lock_t	client/thread/mutex.h	/^struct Try_to_lock_t { explicit Try_to_lock_t() = default; };$/;"	s
Type	client/config.h	/^enum class Type : uint8_t$/;"	c
Type	client/image.h	/^			enum class Type$/;"	c	class:image::Locator
Type	client/json.h	/^enum class Type : uint8_t$/;"	c
Type	client/serialization/ucs4_convert_impl.h	/^			typedef Utf16_impl Type;$/;"	t	struct:ucs4_convert_impl::Convert_impl
Type	client/serialization/ucs4_convert_impl.h	/^			typedef Utf32_impl Type;$/;"	t	struct:ucs4_convert_impl::Convert_impl
Type	client/serialization/ucs4_convert_impl.h	/^	        typedef Utf8_impl Type;$/;"	t	struct:ucs4_convert_impl::Convert_impl
Type	client/serialization/unicode_cast.h	/^		typedef Ret Type;$/;"	t	struct:ucs4_convert_impl::Enableif
UCS4_CONVERT_IMPL_H	client/serialization/ucs4_convert_impl.h	6;"	d
UCS4_ITERATOR_BASE_H	client/serialization/ucs4_iterator_base.h	6;"	d
UI64FMTD	common/define.h	123;"	d
UI64LIT	common/define.h	124;"	d
UI_sound_channel_last	client/sound.cpp	/^	constexpr size_t UI_sound_channel_last = UI_Sound_channel_start + $/;"	m	namespace:__anon27	file:
UI_sound_channel_start	client/sound.cpp	/^	constexpr size_t UI_sound_channel_start = source_channel_last + 1;$/;"	m	namespace:__anon27	file:
UI_sound_channels	client/sound.cpp	/^	constexpr size_t UI_sound_channels = 2;$/;"	m	namespace:__anon27	file:
UNICODE_CAST_H	client/serialization/unicode_cast.h	6;"	d
UNICODE_H	client/serialization/unicode.h	6;"	d
UNICODE_TYPE_H	client/serialization/unicode_type.h	2;"	d
UNKNOWN_OPCODE	server/game/server/protocol/opcodes.h	/^	UNKNOWN_OPCODE = 0xffff,$/;"	e	enum:uint16_t
USEREVENT_H	client/sdl/userevent.h	6;"	d
UTILITY_TIMER_H	common/utility/timer.h	6;"	d
UTILS_H	client/old/utils.h	6;"	d
UTILS_H	client/sdl/utils.h	6;"	d
UTILS_JSON_H	client/utils/json.h	6;"	d
UTILS_MAKE_ENUM_H	client/utils/make_enum.h	6;"	d
Ui_event	client/gui/core/event/handler.h	/^		enum Ui_event$/;"	g	namespace:gui::event
Unique_lock	client/thread/mutex.h	/^		Unique_lock() : device_(0), owns_(false) {}$/;"	f	class:Unique_lock
Unique_lock	client/thread/mutex.h	/^		Unique_lock(Unique_lock&& u) : device_(u.devic_), owns_(u.owns_)$/;"	f	class:Unique_lock
Unique_lock	client/thread/mutex.h	/^		Unique_lock(mutex_type& m, $/;"	f	class:Unique_lock
Unique_lock	client/thread/mutex.h	/^		Unique_lock(mutex_type& m, Adopt_lock_t) :$/;"	f	class:Unique_lock
Unique_lock	client/thread/mutex.h	/^		Unique_lock(mutex_type& m, Defer_lock_t) : $/;"	f	class:Unique_lock
Unique_lock	client/thread/mutex.h	/^		Unique_lock(mutex_type& m, Try_to_lock_t) :$/;"	f	class:Unique_lock
Unique_lock	client/thread/mutex.h	/^		explicit Unique_lock(mutex_type& m) : device_(std::addressof(m)),$/;"	f	class:Unique_lock
Unique_lock	client/thread/mutex.h	/^class Unique_lock$/;"	c
User_event	client/sdl/userevent.h	/^			User_event()$/;"	f	class:sdl::User_event
User_event	client/sdl/userevent.h	/^			User_event(int type) : User_event()$/;"	f	class:sdl::User_event
User_event	client/sdl/userevent.h	/^			User_event(int type, int code) : User_event(type)$/;"	f	class:sdl::User_event
User_event	client/sdl/userevent.h	/^			User_event(int type, int data1, int data2) : User_event(type)$/;"	f	class:sdl::User_event
User_event	client/sdl/userevent.h	/^			User_event(int type, void* data1) : User_event(type)$/;"	f	class:sdl::User_event
User_event	client/sdl/userevent.h	/^	class User_event$/;"	c	namespace:sdl
Utf16_impl	client/serialization/ucs4_convert_impl.h	/^		struct Utf16_impl$/;"	s	namespace:ucs4_convert_impl
Utf32_impl	client/serialization/ucs4_convert_impl.h	/^		struct Utf32_impl$/;"	s	namespace:ucs4_convert_impl
Utf8_impl	client/serialization/ucs4_convert_impl.h	/^        struct Utf8_impl$/;"	s	namespace:ucs4_convert_impl
VERSION	client/Makefile	/^VERSION = VERSION$/;"	m
VERSION	client/game_config.h	12;"	d
VERSION	client/old/Makefile	/^VERSION = VERSION$/;"	m
VERSION_COMP_OP	client/version.h	/^enum VERSION_COMP_OP$/;"	g
VERSION_H	client/version.h	6;"	d
VIDEO_H	client/video.h	6;"	d
Value	client/image.cpp	/^	Locator::Value::Value(const Locator::Value& a) : type(a.type),$/;"	f	class:image::Locator::Value
Value	client/image.h	/^			struct Value$/;"	s	class:image::Locator
Value	client/json.h	/^		Value(Array&& v) { array = new Array(std::move(v)); }$/;"	f	union:Format::Value::Storage
Value	client/json.h	/^		Value(Object&& v) { object = Object(std::move(v)); }$/;"	f	union:Format::Value::Storage
Value	client/json.h	/^		Value(Type t)$/;"	f	union:Format::Value::Storage
Value	client/json.h	/^		Value(bool v) : boolean(v) {}$/;"	f	union:Format::Value::Storage
Value	client/json.h	/^		Value(const Array& v) { array = new Array(v); }$/;"	f	union:Format::Value::Storage
Value	client/json.h	/^		Value(const Object& v) { object = Object(v); }$/;"	f	union:Format::Value::Storage
Value	client/json.h	/^		Value(const std::string& v) { string = new std::string(v); }$/;"	f	union:Format::Value::Storage
Value	client/json.h	/^		Value(double v) : number_float(v) {}$/;"	f	union:Format::Value::Storage
Value	client/json.h	/^		Value(int64_t v) : number_integer(v) {}$/;"	f	union:Format::Value::Storage
Value	client/json.h	/^		Value(std::string&& v) $/;"	f	union:Format::Value::Storage
Value	client/json.h	/^	Value() : type_(Type::null), u_() {}$/;"	f	class:Format::Value
Value	client/json.h	/^	Value(Array &&a) : type_(Type::array), u_()$/;"	f	class:Format::Value
Value	client/json.h	/^	Value(Object &&o) : type_(Type::object), u_()$/;"	f	class:Format::Value
Value	client/json.h	/^	Value(Value &&x) : type_(Type::null), u_() { swap(x); }$/;"	f	class:Format::Value
Value	client/json.h	/^	Value(const Array &a) : type_(Type::array), u_()$/;"	f	class:Format::Value
Value	client/json.h	/^	Value(const Object &o) : type_(Type::object), u_()$/;"	f	class:Format::Value
Value	client/json.h	/^	Value(const Value &x) : type_(x.type_), u_()$/;"	f	class:Format::Value
Value	client/json.h	/^	Value(const std::string &s) : type_(Type::string), u_()$/;"	f	class:Format::Value
Value	client/json.h	/^	Value(int type, bool) : type_(type), u_()$/;"	f	class:Format::Value
Value	client/json.h	/^	Value(std::string &&s) : type_(Type::string), u_()$/;"	f	class:Format::Value
Value	client/json.h	/^	explicit Value(bool b) : type_(Type::boolean), u_() { u_.boolean = b; }$/;"	f	class:Format::Value
Value	client/json.h	/^	explicit Value(const char *s) : type_(Type::string), u_()$/;"	f	class:Format::Value
Value	client/json.h	/^	explicit Value(const char *s, size_t len) : type_(Type::string), u_()$/;"	f	class:Format::Value
Value	client/json.h	/^	explicit Value(double n) : type_(number), u_()$/;"	f	class:Format::Value
Value	client/json.h	/^	explicit Value(int64_t v) : type_(Type::number_float), u_() { u_.int64 = v; }$/;"	f	class:Format::Value
Value	client/json.h	/^class Value$/;"	c	class:Format
Value_status	client/cmdln.h	/^		enum class Value_status$/;"	c	class:Commandline
Version_info	client/version.cpp	/^Version_info::Version_info() : nums_(3, 0), special_(""), $/;"	f	class:Version_info
Version_info	client/version.cpp	/^Version_info::Version_info(const std::string& str) : nums_(3, 0),$/;"	f	class:Version_info
Version_info	client/version.cpp	/^Version_info::Version_info(unsigned int major, unsigned int minor,$/;"	f	class:Version_info
Version_info	client/version.h	/^class Version_info$/;"	c
Video	client/video.cpp	/^Video::Video(FAKE_TYPES type): window(), fake_screen_(false), $/;"	f	class:Video
Video	client/video.h	/^class Video$/;"	c
WARN	common/logging/old_logging/logging.h	/^		WARN,$/;"	e	enum:Logger::Log_level
WARNING	common/debugging/errors.h	30;"	d
WHITE	common/logging/appender_console.h	/^	WHITE$/;"	e	enum:uint8_t
WINDOW_H	client/sdl/window.h	6;"	d
WORLD_TCP_SOCKET_MGR	server/game/server/world_tcp_socket_mgr.h	38;"	d
WRN_CONFIG	client/game_launcher.cpp	10;"	d	file:
WRN_FS	client/filesystem.cpp	14;"	d	file:
WRN_FT	client/font/font_config.cpp	12;"	d	file:
WRN_FT	client/font/sdl_ttf.cpp	13;"	d	file:
WRN_GENERAL	client/game_launcher.cpp	14;"	d	file:
WRN_RND	client/random.cpp	13;"	d	file:
Window	client/sdl/window.cpp	/^Window::Window(const std::string& title, int x, int y, int w, int h,$/;"	f	class:Window
Window	client/sdl/window.h	/^class Window$/;"	c
Write_complete_callback	client/net/net_utils.h	/^typedef std::function<void (const Tcp_connection_ptr&)> Write_complete_callback;$/;"	t	namespace:net
YELLOW	common/logging/appender_console.h	/^	YELLOW,$/;"	e	enum:uint8_t
_DEFINE_H	common/define.h	6;"	d
_GLIBCXX_SYNCHRONIZATION_HAPPENS_AFTER	common/define.h	23;"	d
_GLIBCXX_SYNCHRONIZATION_HAPPENS_AFTER	common/define.h	25;"	d
_GLIBCXX_SYNCHRONIZATION_HAPPENS_BEFORE	common/define.h	22;"	d
_GLIBCXX_SYNCHRONIZATION_HAPPENS_BEFORE	common/define.h	24;"	d
_GLIBCXX_USE_NANOSLEEP	common/define.h	18;"	d
_USE_MATH_DEFINES	common/define.h	46;"	d
__STDC_CONSTANT_MACROS	common/define.h	15;"	d
__STDC_FORMAT_MACROS	common/define.h	12;"	d
__STRING_FORMAT_H	common/utility/string_format.h	6;"	d
_indent	client/json.h	/^	template <typename Iter> static void _indent(Iter os, int indent)$/;"	f	class:Format::Value
_parse	client/json.h	/^inline Iter _parse(Context &ctx, const Iter &first, const Iter &last, std::string *err) $/;"	f	class:Format
_parse	client/json.h	/^inline bool _parse(Context &ctx, Input<Iter> &in) $/;"	f	class:Format
_parse_array	client/json.h	/^inline bool _parse_array(Context &ctx, Input<Iter> &in) $/;"	f	class:Format
_parse_codepoint	client/json.h	/^inline bool _parse_codepoint(String &out, Input<Iter> &in) $/;"	f	class:Format
_parse_number	client/json.h	/^inline std::string _parse_number(Input<Iter> &in) $/;"	f	class:Format
_parse_object	client/json.h	/^inline bool _parse_object(Context &ctx, Input<Iter> &in) $/;"	f	class:Format
_parse_quadhex	client/json.h	/^inline int _parse_quadhex(Input<Iter> &in) $/;"	f	class:Format
_parse_string	client/json.h	/^inline bool _parse_string(String &out, Input<Iter> &in)$/;"	f	class:Format
_serialize	client/json.h	/^	std::string _serialize(int indent) const$/;"	f	class:Format::Value
_state	server/database/update/update_fetcher.h	/^		const state _state;$/;"	m	struct:update_fetcher::applied_file_entry
_write	server/database/logging/appender_DB.cpp	/^void appender_DB::_write(log_message const* message)$/;"	f	class:appender_DB
a	client/color.h	/^	uint8_t r, g, b, a; \/\/ red value, green value, blue value, alpha value$/;"	m	struct:Color
a2f	server/database/database/field.cpp	/^double a2f(const char* str, char*, int)$/;"	f	namespace:__anon4
abort	common/debugging/errors.cpp	/^void abort(const char* file, int line, const char* function)$/;"	f
abort_handler	common/debugging/errors.cpp	/^void abort_handler(int \/*sigval*\/)$/;"	f
abort_not_in_loop_thread	client/net/event_loop.cpp	/^void Event_loop::abort_not_in_loop_thread()$/;"	f	class:net::Event_loop
abs_builddir	client/Makefile	/^abs_builddir = \/home\/mylw\/cpp\/Martial_arts\/src$/;"	m
abs_builddir	client/old/Makefile	/^abs_builddir = \/home\/mylw\/Martial_arts\/src\/server\/src$/;"	m
abs_srcdir	client/Makefile	/^abs_srcdir = \/home\/mylw\/cpp\/Martial_arts\/src$/;"	m
abs_srcdir	client/old/Makefile	/^abs_srcdir = \/home\/mylw\/Martial_arts\/src\/server\/src$/;"	m
abs_top_builddir	client/Makefile	/^abs_top_builddir = \/home\/mylw\/cpp\/Martial_arts$/;"	m
abs_top_builddir	client/old/Makefile	/^abs_top_builddir = \/home\/mylw\/Martial_arts\/src\/server$/;"	m
abs_top_srcdir	client/Makefile	/^abs_top_srcdir = \/home\/mylw\/cpp\/Martial_arts$/;"	m
abs_top_srcdir	client/old/Makefile	/^abs_top_srcdir = \/home\/mylw\/Martial_arts\/src\/server$/;"	m
ac_ct_CC	client/Makefile	/^ac_ct_CC = gcc$/;"	m
ac_ct_CC	client/old/Makefile	/^ac_ct_CC = gcc$/;"	m
ac_ct_CXX	client/Makefile	/^ac_ct_CXX = g++$/;"	m
ac_ct_CXX	client/old/Makefile	/^ac_ct_CXX = g++$/;"	m
accept	client/net/net_utils.cpp	/^int accept(int sockfd, sockaddr_in& addr)$/;"	f	namespace:net
accept	client/net/socket.cpp	/^int Socket::accept(Inet_address& addr)$/;"	f	class:net::Socket
accept	client/old/listen_handler.cpp	/^	bool accept(Socket& fd, Netaddr& addr)$/;"	f	namespace:event
accept	client/utils/json.h	/^    static bool accept(IteratorType first, IteratorType last)$/;"	f	class:basic_json
accept	client/utils/json.h	/^    static bool accept(detail::input_adapter&& i)$/;"	f	class:basic_json
accept	server/shared/networking/acceptor.cpp	/^std::error_code acceptor::accept(socket& peer, endpoint& peer_endpoint, std::error_code& ec)$/;"	f	class:acceptor
accept_channel_	client/net/acceptor.h	/^  Channel accept_channel_;$/;"	m	class:net::Acceptor
accept_channel_	server/shared/networking/acceptor.h	/^	channel accept_channel_;$/;"	m	class:acceptor
accept_socket_	client/net/acceptor.h	/^  Socket accept_socket_;$/;"	m	class:net::Acceptor
accept_socket_	server/shared/networking/acceptor.h	/^	socket accept_socket_;$/;"	m	class:acceptor
acceptor	server/shared/networking/acceptor.cpp	/^acceptor::acceptor(Event_loop* loop, const std::string& bind_ip, uint16_t port, bool reuseport) : $/;"	f	class:acceptor
acceptor	server/shared/networking/acceptor.h	/^class acceptor$/;"	c
acceptor_	client/net/tcp_server.h	/^	Scoped_ptr<Acceptor> acceptor_; \/\/ avoid revealing Acceptor$/;"	m	class:net::Tcp_server
acceptor_	server/game/server/world_tcp_socket_mgr.h	/^	acceptor* acceptor_;$/;"	m	class:world_tcp_socket_mgr
acceptor_	server/shared/networking/tcp_server.h	/^	Scoped_ptr<Acceptor> acceptor_; \/\/ avoid revealing Acceptor$/;"	m	class:net::Tcp_server
acceptor_	server/shared/networking/tcp_socket_mgr.h	/^	acceptor* acceptor_;$/;"	m	class:tcp_socket_mgr
access	client/sdl/texture.h	/^			int access;$/;"	m	struct:Texture::Info
access_in_cache	client/image.cpp	/^	T& Locator::access_in_cache(Cache_type<T>& cache) const$/;"	f	class:image::Locator
action	client/tooltips.cpp	/^	std::string action;$/;"	m	struct:Tooltip	file:
activate	client/gui/core/event/handler.cpp	/^		void Sdl_event_handler::activate()$/;"	f	class:gui::event::Sdl_event_handler
active	client/hotkey/hotkey_item.h	/^			bool active() const { return command_ != "null"; }$/;"	f	class:hotkey::Hotkey_base
active_channels_	client/net/event_loop.h	/^  	Channel_list active_channels_;$/;"	m	class:net::Event_loop
active_channels_	server/shared/networking/event_loop.h	/^  	channel_list active_channels_;$/;"	m	class:event_loop
active_timers_	client/net/timer_queue.h	/^	Active_timer_set active_timers_;$/;"	m	class:net::Timer_queue
active_timers_	server/shared/networking/timer_queue.h	/^	Active_timer_set active_timers_;$/;"	m	class:timer_queue
add	common/cmdline/option_description.cpp	/^void options_description::add(const std::shared_ptr<option_description>& description)$/;"	f	class:options_description
add	common/logging/old_logging/log_buffer.h	/^	void add(size_t len) { current_ += len; }$/;"	f	class:lg::Log_buffer
add_appender	common/logging/logger.cpp	/^void logger::add_appender(uint8_t id, appender* appender)$/;"	f	class:logger
add_database	server/database/database/database_loader.cpp	/^database_loader& database_loader::add_database(database_worker_pool<T>& pool, const std::string& name)$/;"	f	class:database_loader
add_group	client/cmdln.cpp	/^void Commandline::add_group(const std::string& name, $/;"	f	class:Commandline
add_handler	client/events.cpp	/^        void Context::add_handler(Sdl_handler* ptr)$/;"	f	class:events::Context
add_handler	client/old/event.cpp	/^	void Context::add_handler(Event_handler* ptr)$/;"	f	class:event::Context
add_hotkey	client/hotkey/hotkey_item.cpp	/^	void add_hotkey(const Hotkey_ptr item)$/;"	f	namespace:hotkey
add_item_to_array	client/config.cpp	/^void Config::add_item_to_array(Config::Node* array, Config::Node* item)$/;"	f	class:Config
add_item_to_object	client/config.cpp	/^void Config::add_item_to_object(Config::Node* object, const std::string& str, $/;"	f	class:Config
add_new_sockets	server/shared/networking/network_thread.h	/^	void add_new_sockets()$/;"	f	class:network_thread
add_option	client/cmdln.cpp	/^bool Commandline::add_option(const std::string& long_opt, $/;"	f	class:Commandline
add_options	common/cmdline/option_description.h	/^	options_description_easy_init add_options() { return options_description_easy_init(this); }$/;"	f	class:options_description
add_player	client/old/clients.h	/^		void add_player(int fd, Player* player) $/;"	f	class:Clients
add_query	server/database/database/query_callback_processor.cpp	/^void query_callback_processor::add_query(query_callback&& query)$/;"	f	class:query_callback_processor
add_socket	server/shared/networking/network_thread.h	/^	virtual void add_socket(std::shared_ptr<SocketType> sock)$/;"	f	class:network_thread
add_staging_handlers	client/events.cpp	/^        void Context::add_staging_handlers()$/;"	f	class:events::Context
add_subgroup	client/cmdln.cpp	/^void Commandline::add_subgroup(const std::string& name, $/;"	f	class:Commandline
add_surface_ref	client/sdl/surface.h	/^		static void add_surface_ref(SDL_Surface* surf)$/;"	f	class:Surface
add_time	common/utility/timestamp.h	/^inline Timestamp add_time(Timestamp timestamp, double seconds)$/;"	f
add_timer	client/net/timer_queue.cpp	/^Timer_id Timer_queue::add_timer(Timer_callback&& cb, Timestamp when,$/;"	f	class:net::Timer_queue
add_timer	server/shared/networking/timer_queue.cpp	/^timer_id timer_queue::add_timer(Timer_callback&& cb, Timestamp when,$/;"	f	class:timer_queue
add_timer_in_loop	client/net/timer_queue.cpp	/^void Timer_queue::add_timer_in_loop(Timer* timer)$/;"	f	class:net::Timer_queue
add_timer_in_loop	server/shared/networking/timer_queue.cpp	/^void timer_queue::add_timer_in_loop(timer* timer)$/;"	f	class:timer_queue
add_to_cache	client/image.cpp	/^	void Locator::add_to_cache(Cache_type<T>& cache, const T& data) const$/;"	f	class:image::Locator
add_tooltip	client/tooltips.cpp	/^int add_tooltip(const SDL_Rect& rect, const std::string& message, $/;"	f
add_vml_hotkey	client/hotkey/hotkey_command.cpp	/^	void add_vml_hotkey(const std::string& id, const std::string& description, const Config& default_hotkey)$/;"	f	namespace:hotkey
added_to_loop_	client/net/channel.h	/^	bool added_to_loop_;$/;"	m	class:net::Channel
added_to_loop_	server/shared/networking/channel.h	/^	bool added_to_loop_;$/;"	m	class:channel
addr	client/old/server.h	/^	sockaddr_in addr;$/;"	m	struct:Descriptor
addr_	client/net/inet_address.h	/^			sockaddr_in addr_;$/;"	m	class:net::Inet_address
addr_	server/shared/networking/ip/address_v4.h	/^	in4_addr_type addr_;$/;"	m	class:address_v4
addr_	server/shared/networking/ip/address_v6.h	/^	in6_addr_type addr_;$/;"	m	class:address_v6
address	server/shared/networking/ip/address.cpp	/^address::address() : type_(ipv4), ipv4_address_(), ipv6_address_() {}$/;"	f	class:address
address	server/shared/networking/ip/address.cpp	/^address::address(address&& other) :$/;"	f	class:address
address	server/shared/networking/ip/address.cpp	/^address::address(const address& other) :$/;"	f	class:address
address	server/shared/networking/ip/address.cpp	/^address::address(const address_v4& ipv4_address) : $/;"	f	class:address
address	server/shared/networking/ip/address.cpp	/^address::address(const address_v6& ipv6_address) :$/;"	f	class:address
address	server/shared/networking/ip/address.h	/^class address$/;"	c
address	server/shared/networking/ip/basic_endpoint.h	/^	address address() const { return impl_.address(); }$/;"	f	class:basic_endpoint
address	server/shared/networking/ip/basic_endpoint.h	/^	void address(const address& addr) { impl_.address(addr); }$/;"	f	class:basic_endpoint
address	server/shared/networking/ip/endpoint.cpp	/^address endpoint::address() const $/;"	f	class:endpoint
address	server/shared/networking/ip/endpoint.cpp	/^void endpoint::address(const address& addr) $/;"	f	class:endpoint
address_v4	server/shared/networking/ip/address_v4.cpp	/^address_v4::address_v4(address_v4::uint_type addr)$/;"	f	class:address_v4
address_v4	server/shared/networking/ip/address_v4.cpp	/^address_v4::address_v4(const address_v4::bytes_type& bytes)$/;"	f	class:address_v4
address_v4	server/shared/networking/ip/address_v4.h	/^	address_v4() { addr_.s_addr = 0; }$/;"	f	class:address_v4
address_v4	server/shared/networking/ip/address_v4.h	/^	address_v4(address_v4&& other) : addr_(other.addr_) {}$/;"	f	class:address_v4
address_v4	server/shared/networking/ip/address_v4.h	/^	address_v4(const address_v4& other) : addr_(other.addr_) {}$/;"	f	class:address_v4
address_v4	server/shared/networking/ip/address_v4.h	/^class address_v4$/;"	c
address_v6	server/shared/networking/ip/address_v6.cpp	/^address_v6::address_v6() : addr_(), scope_id_(0) {}$/;"	f	class:address_v6
address_v6	server/shared/networking/ip/address_v6.cpp	/^address_v6::address_v6(address_v6&& other) : $/;"	f	class:address_v6
address_v6	server/shared/networking/ip/address_v6.cpp	/^address_v6::address_v6(const address_v6& other) : $/;"	f	class:address_v6
address_v6	server/shared/networking/ip/address_v6.cpp	/^address_v6::address_v6(const address_v6::bytes_type& bytes, uint64_t scope) : $/;"	f	class:address_v6
address_v6	server/shared/networking/ip/address_v6.h	/^class address_v6$/;"	c
age_	client/old/player.h	/^		int age_;$/;"	m	class:Character
alignment_	client/font/text.h	/^			PangoAlignment alignment_;$/;"	m	class:font::Pango_text
all	client/gui/core/event/dispatcher.h	/^					all,$/;"	e	enum:gui::event::Dispatcher::Mouse_behavior
am_Martial_arts_new_legend_OBJECTS	client/Makefile	/^am_Martial_arts_new_legend_OBJECTS = main.$(OBJEXT) log.$(OBJEXT) \\$/;"	m
am__DIST_COMMON	client/Makefile	/^am__DIST_COMMON = $(srcdir)\/Makefile.in $(top_srcdir)\/depcomp$/;"	m
am__DIST_COMMON	client/old/Makefile	/^am__DIST_COMMON = $(srcdir)\/Makefile.in $(top_srcdir)\/depcomp$/;"	m
am__aclocal_m4_deps	client/Makefile	/^am__aclocal_m4_deps = $(top_srcdir)\/configure.ac$/;"	m
am__aclocal_m4_deps	client/old/Makefile	/^am__aclocal_m4_deps = $(top_srcdir)\/configure.ac$/;"	m
am__can_run_installinfo	client/Makefile	/^am__can_run_installinfo = \\$/;"	m
am__can_run_installinfo	client/old/Makefile	/^am__can_run_installinfo = \\$/;"	m
am__cd	client/Makefile	/^am__cd = CDPATH="$${ZSH_VERSION+.}$(PATH_SEPARATOR)" && cd$/;"	m
am__cd	client/old/Makefile	/^am__cd = CDPATH="$${ZSH_VERSION+.}$(PATH_SEPARATOR)" && cd$/;"	m
am__configure_deps	client/Makefile	/^am__configure_deps = $(am__aclocal_m4_deps) $(CONFIGURE_DEPENDENCIES) \\$/;"	m
am__configure_deps	client/old/Makefile	/^am__configure_deps = $(am__aclocal_m4_deps) $(CONFIGURE_DEPENDENCIES) \\$/;"	m
am__define_uniq_tagged_files	client/Makefile	/^am__define_uniq_tagged_files = \\$/;"	m
am__define_uniq_tagged_files	client/old/Makefile	/^am__define_uniq_tagged_files = \\$/;"	m
am__depfiles_maybe	client/Makefile	/^am__depfiles_maybe = depfiles$/;"	m
am__depfiles_remade	client/old/Makefile	/^am__depfiles_remade = .\/$(DEPDIR)\/main.Po \\$/;"	m
am__dirstamp	client/Makefile	/^am__dirstamp = $(am__leading_dot)dirstamp$/;"	m
am__dirstamp	client/old/Makefile	/^am__dirstamp = $(am__leading_dot)dirstamp$/;"	m
am__include	client/Makefile	/^am__include = include$/;"	m
am__include	client/old/Makefile	/^am__include = include$/;"	m
am__installdirs	client/Makefile	/^am__installdirs = "$(DESTDIR)$(bindir)"$/;"	m
am__installdirs	client/old/Makefile	/^am__installdirs = "$(DESTDIR)$(bindir)"$/;"	m
am__is_gnu_make	client/Makefile	/^am__is_gnu_make = { \\$/;"	m
am__is_gnu_make	client/old/Makefile	/^am__is_gnu_make = { \\$/;"	m
am__leading_dot	client/Makefile	/^am__leading_dot = .$/;"	m
am__leading_dot	client/old/Makefile	/^am__leading_dot = .$/;"	m
am__make_dryrun	client/Makefile	/^am__make_dryrun = (target_option=n; $(am__make_running_with_option))$/;"	m
am__make_dryrun	client/old/Makefile	/^am__make_dryrun = (target_option=n; $(am__make_running_with_option))$/;"	m
am__make_keepgoing	client/Makefile	/^am__make_keepgoing = (target_option=k; $(am__make_running_with_option))$/;"	m
am__make_keepgoing	client/old/Makefile	/^am__make_keepgoing = (target_option=k; $(am__make_running_with_option))$/;"	m
am__make_running_with_option	client/Makefile	/^am__make_running_with_option = \\$/;"	m
am__make_running_with_option	client/old/Makefile	/^am__make_running_with_option = \\$/;"	m
am__maybe_remake_depfiles	client/old/Makefile	/^am__maybe_remake_depfiles = depfiles$/;"	m
am__mv	client/Makefile	/^am__mv = mv -f$/;"	m
am__mv	client/old/Makefile	/^am__mv = mv -f$/;"	m
am__quote	client/Makefile	/^am__quote = $/;"	m
am__quote	client/old/Makefile	/^am__quote = $/;"	m
am__tagged_files	client/Makefile	/^am__tagged_files = $(HEADERS) $(SOURCES) $(TAGS_FILES) $(LISP)$/;"	m
am__tagged_files	client/old/Makefile	/^am__tagged_files = $(HEADERS) $(SOURCES) $(TAGS_FILES) $(LISP)$/;"	m
am__tar	client/Makefile	/^am__tar = $${TAR-tar} chof - "$$tardir"$/;"	m
am__tar	client/old/Makefile	/^am__tar = $${TAR-tar} chof - "$$tardir"$/;"	m
am__uniquify_input	client/Makefile	/^am__uniquify_input = $(AWK) '\\$/;"	m
am__uniquify_input	client/old/Makefile	/^am__uniquify_input = $(AWK) '\\$/;"	m
am__untar	client/Makefile	/^am__untar = $${TAR-tar} xf -$/;"	m
am__untar	client/old/Makefile	/^am__untar = $${TAR-tar} xf -$/;"	m
am__v_CCLD_	client/Makefile	/^am__v_CCLD_ = $(am__v_CCLD_$(AM_DEFAULT_VERBOSITY))$/;"	m
am__v_CCLD_0	client/Makefile	/^am__v_CCLD_0 = @echo "  CCLD    " $@;$/;"	m
am__v_CCLD_1	client/Makefile	/^am__v_CCLD_1 = $/;"	m
am__v_CC_	client/Makefile	/^am__v_CC_ = $(am__v_CC_$(AM_DEFAULT_VERBOSITY))$/;"	m
am__v_CC_0	client/Makefile	/^am__v_CC_0 = @echo "  CC      " $@;$/;"	m
am__v_CC_1	client/Makefile	/^am__v_CC_1 = $/;"	m
am__v_CXXLD_	client/Makefile	/^am__v_CXXLD_ = $(am__v_CXXLD_$(AM_DEFAULT_VERBOSITY))$/;"	m
am__v_CXXLD_	client/old/Makefile	/^am__v_CXXLD_ = $(am__v_CXXLD_$(AM_DEFAULT_VERBOSITY))$/;"	m
am__v_CXXLD_0	client/Makefile	/^am__v_CXXLD_0 = @echo "  CXXLD   " $@;$/;"	m
am__v_CXXLD_0	client/old/Makefile	/^am__v_CXXLD_0 = @echo "  CXXLD   " $@;$/;"	m
am__v_CXXLD_1	client/Makefile	/^am__v_CXXLD_1 = $/;"	m
am__v_CXXLD_1	client/old/Makefile	/^am__v_CXXLD_1 = $/;"	m
am__v_CXX_	client/Makefile	/^am__v_CXX_ = $(am__v_CXX_$(AM_DEFAULT_VERBOSITY))$/;"	m
am__v_CXX_	client/old/Makefile	/^am__v_CXX_ = $(am__v_CXX_$(AM_DEFAULT_VERBOSITY))$/;"	m
am__v_CXX_0	client/Makefile	/^am__v_CXX_0 = @echo "  CXX     " $@;$/;"	m
am__v_CXX_0	client/old/Makefile	/^am__v_CXX_0 = @echo "  CXX     " $@;$/;"	m
am__v_CXX_1	client/Makefile	/^am__v_CXX_1 = $/;"	m
am__v_CXX_1	client/old/Makefile	/^am__v_CXX_1 = $/;"	m
am__v_GEN_	client/Makefile	/^am__v_GEN_ = $(am__v_GEN_$(AM_DEFAULT_VERBOSITY))$/;"	m
am__v_GEN_	client/old/Makefile	/^am__v_GEN_ = $(am__v_GEN_$(AM_DEFAULT_VERBOSITY))$/;"	m
am__v_GEN_0	client/Makefile	/^am__v_GEN_0 = @echo "  GEN     " $@;$/;"	m
am__v_GEN_0	client/old/Makefile	/^am__v_GEN_0 = @echo "  GEN     " $@;$/;"	m
am__v_GEN_1	client/Makefile	/^am__v_GEN_1 = $/;"	m
am__v_GEN_1	client/old/Makefile	/^am__v_GEN_1 = $/;"	m
am__v_P_	client/Makefile	/^am__v_P_ = $(am__v_P_$(AM_DEFAULT_VERBOSITY))$/;"	m
am__v_P_	client/old/Makefile	/^am__v_P_ = $(am__v_P_$(AM_DEFAULT_VERBOSITY))$/;"	m
am__v_P_0	client/Makefile	/^am__v_P_0 = false$/;"	m
am__v_P_0	client/old/Makefile	/^am__v_P_0 = false$/;"	m
am__v_P_1	client/Makefile	/^am__v_P_1 = :$/;"	m
am__v_P_1	client/old/Makefile	/^am__v_P_1 = :$/;"	m
am__v_at_	client/Makefile	/^am__v_at_ = $(am__v_at_$(AM_DEFAULT_VERBOSITY))$/;"	m
am__v_at_	client/old/Makefile	/^am__v_at_ = $(am__v_at_$(AM_DEFAULT_VERBOSITY))$/;"	m
am__v_at_0	client/Makefile	/^am__v_at_0 = @$/;"	m
am__v_at_0	client/old/Makefile	/^am__v_at_0 = @$/;"	m
am__v_at_1	client/Makefile	/^am__v_at_1 = $/;"	m
am__v_at_1	client/old/Makefile	/^am__v_at_1 = $/;"	m
am_world_server_OBJECTS	client/old/Makefile	/^am_world_server_OBJECTS = main.$(OBJEXT) net\/acceptor.$(OBJEXT) \\$/;"	m
any	server/shared/networking/ip/address_v4.h	/^	static address_v4 any() { return address_v4(); }$/;"	f	class:address_v4
any	server/shared/networking/ip/address_v6.h	/^	static address_v6 any() { return address_v6(); }$/;"	f	class:address_v6
append	client/net/buffer.h	/^	void append(const char* \/*restrict*\/ data, size_t len)$/;"	f	class:net::Buffer
append	client/net/buffer.h	/^	void append(const std::string& str)$/;"	f	class:net::Buffer
append	client/net/buffer.h	/^	void append(const void* \/*restrict*\/ data, size_t len)$/;"	f	class:net::Buffer
append	client/sound_music_track.h	/^			bool append() const { return append_; }$/;"	f	class:sound::Music_track
append	common/logging/old_logging/async_log.cpp	/^void Async_log::append(const char* logline, int len)$/;"	f	class:lg::Async_log
append	common/logging/old_logging/log_buffer.h	/^	void append(const char* buf, size_t len)$/;"	f	class:lg::Log_buffer
append	common/logging/old_logging/log_file.cpp	/^void Append_file::append(const char* logline, const size_t len)$/;"	f	class:lg::Append_file
append	common/logging/old_logging/log_file.cpp	/^void Log_file::append(const char* logline, int len)$/;"	f	class:lg::Log_file
append	server/database/database/transaction.cpp	/^void transaction_base::append(const char* sql)$/;"	f	class:transaction_base
append	server/database/database/transaction.h	/^	void append(F&& sql, Args&&... args)$/;"	f	class:transaction_base
append	server/database/database/transaction.h	/^	void append(prepared_statement<T>* statement)$/;"	f	class:transaction
append	server/shared/packets/byte_buffer.cpp	/^void byte_buffer::append(const uint8_t* src, size_t cnt)$/;"	f	class:byte_buffer
append	server/shared/packets/byte_buffer.h	/^	void append(T value)$/;"	f	class:byte_buffer
append	server/shared/packets/byte_buffer.h	/^	void append(const T* src, size_t cnt)$/;"	f	class:byte_buffer
append	server/shared/packets/byte_buffer.h	/^	void append(const byte_buffer& buffer)$/;"	f	class:byte_buffer
append	server/shared/packets/byte_buffer.h	/^	void append(const char* src, size_t cnt)$/;"	f	class:byte_buffer
append_	client/sound_music_track.h	/^			bool append_;$/;"	m	class:sound::Music_track
append_int16	client/net/buffer.h	/^	void append_int16(int16_t x)$/;"	f	class:net::Buffer
append_int32	client/net/buffer.h	/^	void append_int32(int32_t x)$/;"	f	class:net::Buffer
append_int64	client/net/buffer.h	/^	void append_int64(int64_t x)$/;"	f	class:net::Buffer
append_int8	client/net/buffer.h	/^	void append_int8(int8_t x) { append(&x, sizeof x); }$/;"	f	class:net::Buffer
append_pack_XYZ	server/shared/packets/byte_buffer.h	/^	void append_pack_XYZ(float x, float y, float z)$/;"	f	class:byte_buffer
append_packed_time	server/shared/packets/byte_buffer.cpp	/^void byte_buffer::append_packed_time(time_t time)$/;"	f	class:byte_buffer
append_packed_uint64	server/shared/packets/byte_buffer.h	/^	void append_packed_uint64(uint64_t guid)$/;"	f	class:byte_buffer
append_prepared_statement	server/database/database/transaction.cpp	/^void transaction_base::append_prepared_statement(prepared_statement_base* stmt)$/;"	f	class:transaction_base
append_unlocked	common/logging/old_logging/log_file.cpp	/^void Log_file::append_unlocked(const char* logline, int len)$/;"	f	class:lg::Log_file
appender	common/logging/appender.cpp	/^appender::appender(uint8_t id, const std::string& name, log_level level, appender_flags flags) : $/;"	f	class:appender
appender	common/logging/appender.h	/^class appender$/;"	c
appender_DB	server/database/logging/appender_DB.cpp	/^appender_DB::appender_DB(uint8 id, std::string const& name, log_level level, appender_flags \/*flags*\/, std::vector<char const*> \/*extraArgs*\/)$/;"	f	class:appender_DB
appender_DB	server/database/logging/appender_DB.h	/^class appender_DB: public appender$/;"	c
appender_console	common/logging/appender_console.cpp	/^appender_console::appender_console(uint8_t id, const std::string& name, log_level level, $/;"	f	class:appender_console
appender_console	common/logging/appender_console.h	/^class appender_console : public appender$/;"	c
appender_creator_fn	common/logging/log.h	/^typedef appender*(*appender_creator_fn)(uint8_t id, std::string const& name, log_level level, appender_flags flags, std::vector<char const*>&& extra_args);$/;"	t
appender_factory_	common/logging/log.h	/^	std::unordered_map<uint8_t, appender_creator_fn> appender_factory_;$/;"	m	class:log
appender_file	common/logging/appender_file.cpp	/^appender_file::appender_file(uint8_t id, const std::string& name, log_level level, $/;"	f	class:appender_file
appender_file	common/logging/appender_file.h	/^class appender_file : public appender$/;"	c
appender_flags	common/logging/log_common.h	/^enum appender_flags$/;"	g
appender_id_	common/logging/log.h	/^	uint8_t appender_id_;$/;"	m	class:log
appenders_	common/logging/log.h	/^	std::unordered_map<uint8_t, std::unique_ptr<appender>> appenders_;$/;"	m	class:log
appenders_	common/logging/logger.h	/^	std::unordered_map<uint8_t, appender*> appenders_;$/;"	m	class:logger
applied_file_entry	server/database/update/update_fetcher.h	/^		applied_file_entry(const std::string& name_, const std::string& hash_, state state_, uint64_t timestamp_) : $/;"	f	struct:update_fetcher::applied_file_entry
applied_file_entry	server/database/update/update_fetcher.h	/^	struct applied_file_entry \/\/ 应用文件条目$/;"	s	class:update_fetcher
applied_file_storage	server/database/update/update_fetcher.h	/^	typedef std::unordered_map<std::string, applied_file_entry> applied_file_storage;$/;"	t	class:update_fetcher
apply	server/database/update/db_update.cpp	/^void db_updater<T>::apply(database_worker_pool<T>& pool, const std::string& query)$/;"	f	class:db_updater
apply	server/database/update/update_fetcher.cpp	/^uint32_t update_fetcher::apply(const path& path) const$/;"	f	class:update_fetcher
apply_	server/database/update/update_fetcher.h	/^	const std::function<void(const std::string&)> apply_;$/;"	m	class:update_fetcher
apply_file	server/database/update/db_update.cpp	/^void db_updater<T>:: apply_file(database_worker_pool<T>& pool, const std::string& host,$/;"	f	class:db_updater
apply_file	server/database/update/db_update.cpp	/^void db_updater<T>::apply_file(database_worker_pool<T>& pool, const path& path)$/;"	f	class:db_updater
apply_file_	server/database/update/update_fetcher.h	/^	const std::function<void(const path&)> apply_file_;$/;"	m	class:update_fetcher
archived	server/database/update/update_fetcher.h	/^	size_t archived; \/\/ 存档$/;"	m	struct:update_result
args	common/cmdline/cmdline.h	/^	std::vector<std::string> args;$/;"	m	class:cmdline
args0_	client/commandline_options.h	/^		std::string args0_;$/;"	m	class:Commandline_options
args_	client/commandline_options.h	/^                std::vector<std::string> args_;$/;"	m	class:Commandline_options
args_	server/process/set_args.h	/^	std::shared_ptr<char*> args_;$/;"	m	class:set_args_
argument_iterator_	client/cmdln.h	/^		std::vector<std::string>::iterator argument_iterator_;$/;"	m	class:Commandline
argument_list_	client/cmdln.h	/^		std::vector<std::string> argument_list_;$/;"	m	class:Commandline
array	client/json.h	/^		Array *array;$/;"	m	union:Format::Value::Storage
array	client/json.h	/^typedef Value::array array;$/;"	t	class:Format
array	client/utils/json.h	/^	array,           $/;"	m	class:value_t
array	client/utils/json.h	/^        array_t* array;$/;"	m	union:basic_json::json_value
array	client/utils/json.h	/^    static basic_json array(initializer_list_t init = {})$/;"	f	class:basic_json
array_deleter	server/process/run_exe.h	/^	struct array_deleter$/;"	s	class:run_exe_
arrival_ticks	server/game/server/protocol/packet_log.cpp	/^	uint32_t arrival_ticks;$/;"	m	struct:packet_header	file:
as	common/cmdline/variables_map.h	/^	T& as() { return std::any_cast<T&>(v_); }$/;"	f	class:variable_value
as	common/cmdline/variables_map.h	/^	const T& as() const { return std::any_cast<const T&>(v_); }$/;"	f	class:variable_value
as_byte_array	common/cryptography/big_number.cpp	/^std::unique_ptr<uint8_t[]> big_number::as_byte_array(int32_t minSize, bool littleEndian)$/;"	f	class:big_number
as_dec_str	common/cryptography/big_number.cpp	/^std::string big_number::as_dec_str() const$/;"	f	class:big_number
as_dword	common/cryptography/big_number.cpp	/^uint32_t big_number::as_dword()$/;"	f	class:big_number
as_hex_str	common/cryptography/big_number.cpp	/^std::string big_number::as_hex_str() const$/;"	f	class:big_number
assert	common/debugging/errors.cpp	/^void assert(const char* file, int line, const char* function, const char* message)$/;"	f
assert	common/debugging/errors.cpp	/^void assert(const char* file, int line, const char* function, const char* message, const char* format, ...)$/;"	f
assert_in_loop_thread	client/net/event_loop.h	/^	void assert_in_loop_thread()$/;"	f	class:net::Event_loop
assert_in_loop_thread	client/net/poller.cpp	/^void Poller::assert_in_loop_thread() const$/;"	f	class:net::Poller
assert_in_loop_thread	server/shared/networking/epoll.cpp	/^void epoll::assert_in_loop_thread() const$/;"	f	class:epoll
assert_in_loop_thread	server/shared/networking/event_loop.cpp	/^void event_loop::assert_in_loop_thread()$/;"	f	class:event_loop
assert_invariant	client/utils/json.h	/^    void assert_invariant() const $/;"	f	class:basic_json
assert_notnull_impl	common/debugging/errors.h	/^inline T* assert_notnull_impl(T* pointer, const char* expr)$/;"	f
assign	client/old/packet.cpp	/^void Packet::assign(uint8_t* data) { packet_data_ = data; }$/;"	f	class:Packet
assign	client/sdl/surface.h	/^		void assign(SDL_Surface* surf)$/;"	f	class:Surface
assign	client/sdl/surface.h	/^		void assign(const Surface& s)$/;"	f	class:Surface
assign	client/sdl/texture.cpp	/^void Texture::assign(SDL_Texture* t) $/;"	f	class:Texture
assign_body	client/old/packet.cpp	/^void Packet::assign_body(uint16_t packet_type, uint8_t* body, int body_len)$/;"	f	class:Packet
assign_buffer	client/old/packet.h	/^		bool assign_buffer( int fd_ , void * handler_ , void * buffer , uint16_t len )$/;"	f	class:Packet
assign_surface_internal	client/sdl/surface.h	/^		void assign_surface_internal(SDL_Surface* surf)$/;"	f	class:Surface
async_query	server/database/database/database_worker_pool.cpp	/^query_callback database_worker_pool<T>:: async_query(const char* sql)$/;"	f	class:database_worker_pool
async_query	server/database/database/database_worker_pool.cpp	/^query_callback database_worker_pool<T>::async_query(prepared_statement<T>* stmt)$/;"	f	class:database_worker_pool
async_threads_	server/database/database/database_worker_pool.h	/^	uint8_t async_threads_;$/;"	m	class:database_worker_pool
at	client/utils/json.h	/^    const_reference at(const json_pointer& ptr) const$/;"	f	class:basic_json
at	client/utils/json.h	/^    const_reference at(const typename object_t::key_type& key) const$/;"	f	class:basic_json
at	client/utils/json.h	/^    const_reference at(size_type idx) const$/;"	f	class:basic_json
at	client/utils/json.h	/^    reference at(const json_pointer& ptr)$/;"	f	class:basic_json
at	client/utils/json.h	/^    reference at(const typename object_t::key_type& key)$/;"	f	class:basic_json
at	client/utils/json.h	/^    reference at(size_type idx)$/;"	f	class:basic_json
at_thread_exit	client/thread/condition_variable.cpp	/^void at_thread_exit(At_thread_exit_elt* elt)$/;"	f
attack	client/cursor.h	/^		attack,$/;"	e	enum:cursor::Cursor_type
attack_drag	client/cursor.h	/^		attack_drag,$/;"	e	enum:cursor::Cursor_type
auth_check_seed	server/game/server/world_tcp_socket.cpp	/^constexpr uint8_t world_tcp_socket::auth_check_seed[16] = {$/;"	m	class:world_tcp_socket	file:
auth_check_seed	server/game/server/world_tcp_socket.h	/^	static constexpr uint8_t auth_check_seed[16];$/;"	m	class:world_tcp_socket
auth_crypt_	server/game/server/world_tcp_socket.h	/^	world_packet_crypt auth_crypt_;$/;"	m	class:world_tcp_socket::read_data_handler_result
authed_	server/game/server/world_tcp_socket.h	/^	bool authed_;$/;"	m	class:world_tcp_socket::read_data_handler_result
auto_setup_	server/database/database/database_loader.h	/^	const bool auto_setup_;$/;"	m	class:database_loader
avail	common/logging/old_logging/log_buffer.h	/^	int avail() const { return static_cast<int>(end() - current_); }$/;"	f	class:lg::Log_buffer
b	client/color.h	/^	uint8_t r, g, b, a; \/\/ red value, green value, blue value, alpha value$/;"	m	struct:Color
back	client/utils/json.h	/^    const_reference back() const$/;"	f	class:basic_json
back	client/utils/json.h	/^    reference back()$/;"	f	class:basic_json
back_child	client/gui/core/event/dispatcher.h	/^					back_child,$/;"	e	enum:gui::event::Dispatcher::Queue_postion
back_post_child	client/gui/core/event/dispatcher.h	/^					back_post_child$/;"	e	enum:gui::event::Dispatcher::Queue_postion
back_pre_child	client/gui/core/event/dispatcher.h	/^					back_pre_child,$/;"	e	enum:gui::event::Dispatcher::Queue_postion
backup_	common/logging/appender_file.h	/^	bool backup_;$/;"	m	class:appender_file
base	server/shared/networking/ip/endpoint.h	/^		socket_addr_type base;$/;"	m	union:endpoint::data_union
base_location	server/database/update/db_update.h	/^enum base_location$/;"	g
base_loop_	client/net/event_loop_threadpool.h	/^			Event_loop* base_loop_;$/;"	m	class:net::Event_loop_threadpool
base_loop_	server/shared/networking/event_loop_threadpool.h	/^	event_loop* base_loop_;$/;"	m	class:event_loop_threadpool
base_name	client/filesystem.cpp	/^	std::string base_name(const std::string& file, const bool remove_extension)$/;"	f	namespace:filesystem
base_tcp_socket	server/game/server/world_tcp_socket.h	/^	typedef tcp_socket<world_tcp_socket> base_tcp_socket;$/;"	t	class:world_tcp_socket
basename_	common/logging/old_logging/log_file.h	/^	const std::string basename_;$/;"	m	class:lg::Log_file
basename_	common/logging/old_logging/logging.h	/^	fs::path basename_;$/;"	m	class:Logger
basic_endpoint	server/shared/networking/ip/basic_endpoint.h	/^	basic_endpoint() : impl_() {}$/;"	f	class:basic_endpoint
basic_endpoint	server/shared/networking/ip/basic_endpoint.h	/^	basic_endpoint(basic_endpoint&& other) : impl_(other.impl_) {}$/;"	f	class:basic_endpoint
basic_endpoint	server/shared/networking/ip/basic_endpoint.h	/^	basic_endpoint(const InternetProtocol& internet_protocol, uint16_t port_num) : $/;"	f	class:basic_endpoint
basic_endpoint	server/shared/networking/ip/basic_endpoint.h	/^	basic_endpoint(const basic_endpoint& other) : impl_(other.impl_) {}$/;"	f	class:basic_endpoint
basic_endpoint	server/shared/networking/ip/basic_endpoint.h	/^	basic_endpoint(const boost::asio::ip::address& addr, uint16_t port_num) :$/;"	f	class:basic_endpoint
basic_endpoint	server/shared/networking/ip/basic_endpoint.h	/^class basic_endpoint$/;"	c
basic_json	client/utils/json.h	/^    basic_json(CompatibleType && val) (($/;"	f	class:basic_json
basic_json	client/utils/json.h	/^    basic_json(InputIT first, InputIT last)$/;"	f	class:basic_json
basic_json	client/utils/json.h	/^    basic_json(basic_json&& other) : type_(std::move(other.type_)),$/;"	f	class:basic_json
basic_json	client/utils/json.h	/^    basic_json(const BasicJsonType& val)$/;"	f	class:basic_json
basic_json	client/utils/json.h	/^    basic_json(const basic_json& other) : type_(other.type_)$/;"	f	class:basic_json
basic_json	client/utils/json.h	/^    basic_json(const detail::json_ref<basic_json>& ref) :$/;"	f	class:basic_json
basic_json	client/utils/json.h	/^    basic_json(const value_t v) : type_(v), value_(v)$/;"	f	class:basic_json
basic_json	client/utils/json.h	/^    basic_json(initializer_list_t init,$/;"	f	class:basic_json
basic_json	client/utils/json.h	/^    basic_json(size_type cnt, const basic_json& val) : $/;"	f	class:basic_json
basic_json	client/utils/json.h	/^    basic_json(std::nullptr_t = nullptr) : basic_json(value_t::null)$/;"	f	class:basic_json
basic_json	client/utils/json.h	/^class basic_json$/;"	c
basic_statement_task	server/database/database/adhoc_statement.cpp	/^basic_statement_task::basic_statement_task(const char* sql, bool async) :$/;"	f	class:basic_statement_task
basic_statement_task	server/database/database/adhoc_statement.h	/^class basic_statement_task : public sql_operation$/;"	c
begin	client/events.h	/^auto begin(Reversion<T>& t)$/;"	f
begin	client/net/buffer.h	/^	char* begin() { return &*buffer_.begin(); }$/;"	f	class:net::Buffer
begin	client/net/buffer.h	/^	const char* begin() const { return &*buffer_.begin(); }$/;"	f	class:net::Buffer
begin	client/serialization/ucs4_iterator_base.h	/^		        static Iterator_base begin(const String_type& str)$/;"	f	class:ucs4::Iterator_base
begin	client/utils/json.h	/^    const_iterator begin() const { return cbegin(); }$/;"	f	class:basic_json
begin	client/utils/json.h	/^    iterator begin() $/;"	f	class:basic_json
begin	common/utility/util.h	/^    const_iterator begin() const { return storage_.begin(); }$/;"	f	class:tokenizer
begin_transaction	client/old/mysql_pool.cpp	/^	bool Database::begin_transaction()$/;"	f	class:db::Database
begin_transaction	server/database/database/database_worker_pool.cpp	/^sql_transaction<T> database_worker_pool<T>::begin_transaction()$/;"	f	class:database_worker_pool
begin_transaction	server/database/database/mysql_connection.cpp	/^void mysql_connection::begin_transaction()$/;"	f	class:mysql_connection
begin_write	client/net/buffer.h	/^	char* begin_write() { return begin() + writer_index_; }$/;"	f	class:net::Buffer
begin_write	client/net/buffer.h	/^	const char* begin_write() const { return begin() + writer_index_; }$/;"	f	class:net::Buffer
bell_channel	client/sound.cpp	/^	constexpr size_t bell_channel = 0;$/;"	m	namespace:__anon27	file:
belong_to_group_	common/cmdline/option_description.h	/^	std::vector<bool> belong_to_group_;$/;"	m	class:options_description
big_number	common/cryptography/big_number.cpp	/^big_number::big_number() : bn_(BN_new()) {}$/;"	f	class:big_number
big_number	common/cryptography/big_number.cpp	/^big_number::big_number(big_number const& bn) : bn_(BN_dup(bn.bn_)) {}$/;"	f	class:big_number
big_number	common/cryptography/big_number.cpp	/^big_number::big_number(uint32_t val) : bn_(BN_new())$/;"	f	class:big_number
big_number	common/cryptography/big_number.h	/^class big_number$/;"	c
bin_PROGRAMS	client/Makefile	/^bin_PROGRAMS = Martial_arts_new_legend$(EXEEXT)$/;"	m
bin_PROGRAMS	client/old/Makefile	/^bin_PROGRAMS = world_server$(EXEEXT)$/;"	m
binary	server/database/database/prepared_statement.h	/^	std::vector<uint8_t> binary;$/;"	m	struct:prepared_statement_data
binary_paths	client/filesystem.cpp	/^		std::set<string> binary_paths;$/;"	m	namespace:filesystem::__anon17	file:
binary_paths_cache	client/filesystem.cpp	/^		path_map binary_paths_cache;$/;"	m	namespace:filesystem::__anon17	file:
bind	client/net/net_utils.cpp	/^bool bind(int sockfd, const sockaddr_in& addr)$/;"	f	namespace:net
bind	client/net/socket.cpp	/^bool Socket::bind(const Inet_address& addr)$/;"	f	class:net::Socket
bind	server/shared/networking/acceptor.cpp	/^bool bind()$/;"	f
bind	server/shared/networking/acceptor.cpp	/^void acceptor::bind(std::error_code& ec)$/;"	f	class:acceptor
bind	server/shared/networking/socket_operations.cpp	/^int bind(int sockfd, const socket_addr_type* addr, socklen_t addrlen, std::error_code& ec)$/;"	f
bind_	server/database/database/mysql_prepared_statement.h	/^	MYSQL_BIND* bind_;$/;"	m	class:mysql_prepared_statement
bind_	server/database/database/query_result.h	/^	MYSQL_BIND* bind_;$/;"	m	class:prepared_result_set
bind_parameters	server/database/database/prepared_statement.cpp	/^void prepared_statement_base::bind_parameters()$/;"	f	class:prepared_statement_base
bind_stderr	server/process/bind_stderr.h	/^	explicit bind_stderr(const int fd) : fd_(fd) {}$/;"	f	class:bind_stderr
bind_stderr	server/process/bind_stderr.h	/^class bind_stderr : public initializer_base$/;"	c
bind_stderr	server/process/test.cpp	/^	explicit bind_stderr(const int fd) : fd_(fd) {}$/;"	f	class:bind_stderr
bind_stderr	server/process/test.cpp	/^class bind_stderr : public initializer_base$/;"	c	file:
bind_stdin	server/process/bind_stdin.h	/^	explicit bind_stdin(const int fd) : fd_(fd) {}$/;"	f	class:bind_stdin
bind_stdin	server/process/bind_stdin.h	/^class bind_stdin : public initializer_base$/;"	c
bind_stdin	server/process/test.cpp	/^	explicit bind_stdin(const int fd) : fd_(fd) {}$/;"	f	class:bind_stdin
bind_stdin	server/process/test.cpp	/^class bind_stdin : public initializer_base$/;"	c	file:
bind_stdout	server/process/bind_stdout.h	/^	explicit bind_stdout(const int fd) : fd_(fd) {}$/;"	f	class:bind_stdout
bind_stdout	server/process/bind_stdout.h	/^class bind_stdout : public initializer_base$/;"	c
bind_stdout	server/process/test.cpp	/^	explicit bind_stdout(const int fd) : fd_(fd) {}$/;"	f	class:bind_stdout
bind_stdout	server/process/test.cpp	/^class bind_stdout : public initializer_base$/;"	c	file:
bindings_equal	client/hotkey/hotkey_item.cpp	/^	bool Hotkey_base::bindings_equal(Hotkey_ptr other)$/;"	f	class:hotkey::Hotkey_base
bindings_equal_helper	client/hotkey/hotkey_item.cpp	/^	bool Hotkey_keyboard::bindings_equal_helper(Hotkey_ptr other) const$/;"	f	class:hotkey::Hotkey_keyboard
bindings_equal_helper	client/hotkey/hotkey_item.cpp	/^	bool Hotkey_mouse::bindings_equal_helper(Hotkey_ptr other) const$/;"	f	class:hotkey::Hotkey_mouse
bindings_equal_helper	client/hotkey/hotkey_item.h	/^			virtual bool bindings_equal_helper(Hotkey_ptr) const { return false; }$/;"	f	class:hotkey::Hotkey_void
bindir	client/Makefile	/^bindir = ${exec_prefix}\/bin$/;"	m
bindir	client/old/Makefile	/^bindir = ${exec_prefix}\/bin$/;"	m
bit_width	client/utils/math.h	/^inline size_t bit_width()$/;"	f
bit_width	client/utils/math.h	/^inline size_t bit_width(const T&)$/;"	f
bitpos_	server/shared/packets/byte_buffer.h	/^	size_t bitpos_;$/;"	m	class:byte_buffer
bitwpos	server/shared/packets/byte_buffer.h	/^	size_t bitwpos() const { return wpos_ ^ 8 + 8 - bitpos_; }$/;"	f	class:byte_buffer
bitwpos	server/shared/packets/byte_buffer.h	/^	size_t bitwpos(size_t new_pos)$/;"	f	class:byte_buffer
blend_add	client/color.h	/^	Color blend_add(const Color& c) const$/;"	f	struct:Color
blend_lighten	client/color.h	/^	Color blend_lighten(const Color& c) const$/;"	f	struct:Color
blit_surface	client/sdl/utils.cpp	/^void blit_surface(const Surface& surf,$/;"	f
blit_texture	client/video.cpp	/^void Video::blit_texture(int x, int y, Texture& t, SDL_Rect* srcrect, $/;"	f	class:Video
bn	common/cryptography/big_number.h	/^        struct bignum_st *bn() { return bn_; }$/;"	f	class:big_number
bn_	common/cryptography/big_number.h	/^        struct bignum_st* bn_;$/;"	m	class:big_number	typeref:struct:big_number::bignum_st
bold_name	client/font/font_description.h	/^	std::optional<std::string> bold_name;$/;"	m	struct:Subset_descriptor
bold_name	client/font/subset_descriptor.h	/^		std::optional<std::string> bold_name;$/;"	m	struct:font::Subset_descriptor
bold_names	client/font/sdl_ttf.cpp	/^static std::vector<std::string> bold_names;$/;"	v	file:
boolean	client/json.h	/^		bool boolean;$/;"	m	union:Format::Value::Storage
boolean	client/json.h	/^	boolean,$/;"	m	class:Type
boolean	client/utils/json.h	/^	boolean,         $/;"	m	class:value_t
boolean	client/utils/json.h	/^        boolean_t boolean;$/;"	m	union:basic_json::json_value
boolean	server/database/database/prepared_statement.h	/^	bool boolean;$/;"	m	union:prepared_statement_data_union
borrow	client/old/connection_pool.h	/^		MYSQL* borrow()$/;"	f	class:Connection_pool
borrow	client/old/mysql_pool.cpp	/^	Database* Connection_pool::borrow()$/;"	f	class:db::Connection_pool
borrowed_	client/old/connection_pool.h	/^		std::set<MYSQL*> borrowed_;$/;"	m	class:Connection_pool
borrowed_	client/old/mysql_pool.h	/^			std::set<Database*> borrowed_;$/;"	m	class:db::Connection_pool
brightened	client/image.h	/^	enum Img_type{unscaled, scaled_to_zoom, hexed, scaled_to_hex, tod_colored, brightened};$/;"	e	enum:image::Img_type
brightened_images_	client/image.cpp	/^		brightened_images_;$/;"	m	namespace:__anon32	file:
broadcast	server/shared/networking/ip/address_v4.h	/^	static address_v4 broadcast() { return address_v4(0xFFFFFFFF); }$/;"	f	class:address_v4
broke_strict	client/log.cpp	/^	bool broke_strict()$/;"	f	namespace:lg
buf	client/old/server.h	/^	char buf[1024];$/;"	m	struct:Descriptor
buf_len	client/net/inet_address.cpp	/^constexpr int buf_len = 128;$/;"	m	namespace:__anon22	file:
buf_len	client/net/net_utils.cpp	/^constexpr int buf_len = 128;$/;"	m	namespace:__anon21	file:
buf_len	client/old/stream.h	/^constexpr int buf_len = 1024$/;"	v
buffer_	client/net/buffer.h	/^	std::vector<char> buffer_;$/;"	m	class:net::Buffer
buffer_	common/logging/old_logging/log_file.h	/^	char buffer_[64*1024];$/;"	m	class:lg::Append_file
buffer_queue_	server/game/server/world_tcp_socket.h	/^	mpsc_queue<encryptable_packet> buffer_queue_;$/;"	m	class:world_tcp_socket::read_data_handler_result
buffers_	common/logging/old_logging/async_log.h	/^	Buffer_vector buffers_;$/;"	m	class:lg::Async_log
build	client/gui/core/placer.cpp	/^Placer_base* Placer_base* build(const Grow_direction_grow_direction,$/;"	f	namespace:gui
build	server/game/server/protocol/packet_log.cpp	/^	uint32_t build;$/;"	m	struct:log_header	file:
build_alias	client/Makefile	/^build_alias = $/;"	m
build_alias	client/old/Makefile	/^build_alias = $/;"	m
build_event_chain	client/gui/core/event/dispatcher_private.h	/^			build_event_chain(const Ui_event event, Widget* dispatcher,$/;"	f	namespace:gui::event::implementation
build_event_chain	client/gui/core/event/dispatcher_private.h	/^			build_event_chain<Signal_message_function>(const Ui_event event,$/;"	f	namespace:gui::event::implementation
build_event_chain	client/gui/core/event/dispatcher_private.h	/^			build_event_chain<Signal_notification_function>(const Ui_event event, Widget* dispatcher, Widget* w)$/;"	f	namespace:gui::event::implementation
build_packet_head	client/old/packet.h	/^		void build_packet_head( uint16_t packet_type )$/;"	f	class:Packet
builddir	client/Makefile	/^builddir = .$/;"	m
builddir	client/old/Makefile	/^builddir = .$/;"	m
bunzip2	client/commandline_options.h	/^		std::optional<std::string> bunzip2;$/;"	m	class:Commandline_options
button_	client/hotkey/hotkey_item.h	/^			int button_;$/;"	m	class:hotkey::Hotkey_mouse
button_click_event	client/gui/core/event/distributor.h	/^			static const Ui_event button_click_event = button_click;$/;"	m	struct:gui::event::Mouse_button_event_type_wrapper
button_donw	client/gui/core/event/handler.cpp	/^		void Sdl_event_handler::button_donw(const SDL_Event& event)$/;"	f	class:gui::event::Sdl_event_handler
button_double_click_event	client/gui/core/event/distributor.h	/^			static const Ui_event button_double_click_event = button_double_click;$/;"	m	struct:gui::event::Mouse_button_event_type_wrapper
button_down_event	client/gui/core/event/distributor.h	/^			static const Ui_event button_down_event = button_down;$/;"	m	struct:gui::event::Mouse_button_event_type_wrapper
button_up_event	client/gui/core/event/distributor.h	/^			static const Ui_event button_up_event = button_up;$/;"	m	struct:gui::event::Mouse_button_event_type_wrapper
byte2int	client/old/utils.cpp	/^int byte2int(char* data)$/;"	f
byte_buffer	server/shared/packets/byte_buffer.cpp	/^byte_buffer::byte_buffer(message_buffer&& buffer) : rpos_(0), wpos_(0), bitpos_(initial_bit_pos), curbitval_(0), storage_(buffer.move()) {}$/;"	f	class:byte_buffer
byte_buffer	server/shared/packets/byte_buffer.h	/^	byte_buffer() : rpos_(0), wpos_(0), bitpos_(initial_bit_pos), curbitval_(0)$/;"	f	class:byte_buffer
byte_buffer	server/shared/packets/byte_buffer.h	/^	byte_buffer(byte_buffer&& buf) : rpos_(buf.rpos_), wpos_(buf.wpos_), bitpos_(buf.bitpos_), curbitval_(buf.curbitval_), storage_(buf.move()) {}$/;"	f	class:byte_buffer
byte_buffer	server/shared/packets/byte_buffer.h	/^	byte_buffer(const byte_buffer& buf) : rpos_(buf.rpos_), wpos_(buf.wpos_), bitpos_(buf.bitpos_), curbitval_(buf.curbitval), storage_(buf.storage_) {}$/;"	f	class:byte_buffer
byte_buffer	server/shared/packets/byte_buffer.h	/^	byte_buffer(size_t reserve) : rpos_(0), wpos_(0), bitpos_(initial_bit_pos), curbitpos_(0)$/;"	f	class:byte_buffer
byte_buffer	server/shared/packets/byte_buffer.h	/^class byte_buffer$/;"	c
byte_buffer_position_exception	server/shared/packets/byte_buffer.cpp	/^byte_buffer_position_exception::byte_buffer_position_exception(size_t pos, size_t size, size_t value_size)$/;"	f	class:byte_buffer_position_exception
byte_size_from_ucs4_codepoint	client/serialization/ucs4_convert_impl.h	/^	        static size_t byte_size_from_ucs4_codepoint(ucs4::Char ch)$/;"	f	struct:ucs4_convert_impl::Utf8_impl
byte_size_from_utf8_first	client/serialization/ucs4_convert_impl.h	/^	        static int byte_size_from_utf8_first(utf8::Char ch)$/;"	f	struct:ucs4_convert_impl::Utf8_impl
bytes_type	server/shared/networking/ip/address_v4.h	/^	typedef std::array<unsigned char, 4> bytes_type;$/;"	t	class:address_v4
bytes_type	server/shared/networking/ip/address_v6.h	/^	typedef std::array<uint8_t, 16> bytes_type;$/;"	t	class:address_v6
bzero	common/logging/old_logging/log_buffer.h	/^	void bzero() { memset(data_, 0, sizeof data_); }$/;"	f	class:lg::Log_buffer
bzip2	client/commandline_options.h	/^		std::optional<std::string> bzip2;$/;"	m	class:Commandline_options
c_str	server/process/set_args.h	/^	static char* c_str(const std::string& s)$/;"	f	class:set_args_
cache_	client/font/text_cache.cpp	/^text_list Text_cache::cache_;$/;"	m	class:Text_cache	file:
cache_	client/font/text_cache.h	/^		static text_list cache_;$/;"	m	class:Text_cache
cache_dir	client/filesystem.cpp	/^	static fs::path user_data_dir, user_config_dir, cache_dir;$/;"	m	namespace:filesystem	file:
calculation_dirty_	client/font/text.h	/^			mutable bool calculation_dirty_;$/;"	m	class:font::Pango_text
call	client/events.cpp	/^		void call()$/;"	f	struct:__anon30::Invoked_function_data
call	common/logging/log_operation.cpp	/^int log_operation::call()$/;"	f	class:log_operation
call	server/database/database/sql_operation.h	/^	virtual int call()$/;"	f	class:sql_operation
call_in_main_thread	client/events.cpp	/^        void call_in_main_thread(const std::function<void(void)>& f)$/;"	f	namespace:events
call_on_exec_error	server/process/executor.h	/^		call_on_exec_error(executor& e) : e(e) {}$/;"	f	struct:executor::call_on_exec_error
call_on_exec_error	server/process/executor.h	/^	struct call_on_exec_error$/;"	s	struct:executor
call_on_exec_error	server/process/test.cpp	/^		call_on_exec_error(executor& e) : e(e) {}$/;"	f	struct:executor::call_on_exec_error
call_on_exec_error	server/process/test.cpp	/^	struct call_on_exec_error$/;"	s	struct:executor	file:
call_on_exec_setup	server/process/executor.h	/^		call_on_exec_setup(executor& e) : e(e) {}$/;"	f	struct:executor::call_on_exec_setup
call_on_exec_setup	server/process/executor.h	/^	struct call_on_exec_setup$/;"	s	struct:executor
call_on_exec_setup	server/process/test.cpp	/^		call_on_exec_setup(executor& e) : e(e) {}$/;"	f	struct:executor::call_on_exec_setup
call_on_exec_setup	server/process/test.cpp	/^	struct call_on_exec_setup$/;"	s	struct:executor	file:
call_on_fork_error	server/process/executor.h	/^		call_on_fork_error(executor& e) : e(e) {}$/;"	f	struct:executor::call_on_fork_error
call_on_fork_error	server/process/executor.h	/^	struct call_on_fork_error$/;"	s	struct:executor
call_on_fork_error	server/process/test.cpp	/^		call_on_fork_error(executor& e) : e(e) {}$/;"	f	struct:executor::call_on_fork_error
call_on_fork_error	server/process/test.cpp	/^	struct call_on_fork_error$/;"	s	struct:executor	file:
call_on_fork_setup	server/process/executor.h	/^		call_on_fork_setup(executor& e) : e(e) {}$/;"	f	struct:executor::call_on_fork_setup
call_on_fork_setup	server/process/executor.h	/^	struct call_on_fork_setup$/;"	s	struct:executor
call_on_fork_setup	server/process/test.cpp	/^		call_on_fork_setup(executor& e) : e(e) {}$/;"	f	struct:executor::call_on_fork_setup
call_on_fork_setup	server/process/test.cpp	/^	struct call_on_fork_setup$/;"	s	struct:executor	file:
call_on_fork_success	server/process/executor.h	/^		call_on_fork_success(executor& e) : e(e) {}$/;"	f	struct:executor::call_on_fork_success
call_on_fork_success	server/process/executor.h	/^	struct call_on_fork_success$/;"	s	struct:executor
call_on_fork_success	server/process/test.cpp	/^		call_on_fork_success(executor& e) : e(e) {}$/;"	f	struct:executor::call_on_fork_success
call_on_fork_success	server/process/test.cpp	/^	struct call_on_fork_success$/;"	s	struct:executor	file:
callback_	client/net/event_loop_thread.h	/^	Thread_init_callback callback_;$/;"	m	class:net::Event_loop_thread
callback_	client/net/timer.h	/^	const Timer_callback callback_;$/;"	m	class:net::Timer
callback_	common/utility/start_process.cpp	/^	T callback_;$/;"	m	class:__anon14::log_sink	file:
callback_	server/process/start_process.cpp	/^	T callback_;$/;"	m	class:__anon11::log_sink	file:
callback_	server/shared/networking/timer.h	/^	const Timer_callback callback_;$/;"	m	class:timer
callbacks_	server/database/database/query_callback.h	/^	std::queue<query_callback_data, std::list<query_callback_data>> callbacks_;$/;"	m	class:query_callback
callbacks_	server/database/database/query_callback_processor.h	/^	std::vector<query_callback> callbacks_;$/;"	m	class:query_callback_processor
calling_expired_timers_	client/net/timer_queue.h	/^	bool calling_expired_timers_; \/* atomic *\/$/;"	m	class:net::Timer_queue
calling_expired_timers_	server/shared/networking/timer_queue.h	/^	bool calling_expired_timers_; \/* atomic *\/$/;"	m	class:timer_queue
calling_pending_functors_	client/net/event_loop.h	/^  	bool calling_pending_functors_; \/* atomic *\/$/;"	m	class:net::Event_loop
calling_pending_functors_	server/shared/networking/event_loop.h	/^  	bool calling_pending_functors_; \/* atomic *\/$/;"	m	class:event_loop
campaign	client/commandline_options.h	/^		std::optional<std::string> campaign;$/;"	m	class:Commandline_options
campaign_difficulty	client/commandline_options.h	/^		std::optional<int> campaign_difficulty;$/;"	m	class:Commandline_options
campaign_scenario	client/commandline_options.h	/^		std::optional<std::string> campaign_scenario;$/;"	m	class:Commandline_options
can_log_packet	server/game/server/protocol/packet_log.h	/^	bool can_log_packet() const { return file_ != NULL; }$/;"	f	class:packet_log
can_push	client/serialization/unicode_cast.h	/^		bool can_push(size_t) { return true; }$/;"	f	struct:ucs4_convert_impl::Iterator_writer
cancel	client/net/event_loop.cpp	/^void Event_loop::cancel(Timer_id timerId)$/;"	f	class:net::Event_loop
cancel	client/net/timer_queue.cpp	/^void Timer_queue::cancel(const Timer_id& timerId)$/;"	f	class:net::Timer_queue
cancel	common/threading/producer_consumer_queue.h	/^	void cancel()$/;"	f	class:producer_consumer_queue
cancel	server/shared/networking/event_loop.cpp	/^void event_loop::cancel(timer_id timerId)$/;"	f	class:event_loop
cancel	server/shared/networking/timer_queue.cpp	/^void timer_queue::cancel(const timer_id& timerId)$/;"	f	class:timer_queue
cancel_in_loop	client/net/timer_queue.cpp	/^void Timer_queue::cancel_in_loop(const Timer_id& timerId)$/;"	f	class:net::Timer_queue
cancel_in_loop	server/shared/networking/timer_queue.cpp	/^void timer_queue::cancel_in_loop(const timer_id& timerId)$/;"	f	class:timer_queue
cancelation_token_	server/database/database/database_worker.h	/^	std::atomic<bool> cancelation_token_;$/;"	m	class:database_worker
canceling_timers_	client/net/timer_queue.h	/^	Active_timer_set canceling_timers_;$/;"	m	class:net::Timer_queue
canceling_timers_	server/shared/networking/timer_queue.h	/^	Active_timer_set canceling_timers_;$/;"	m	class:timer_queue
cant_find	client/cmdln.h	/^			cant_find,$/;"	m	class:Commandline::Param_value_status
capacity	server/shared/networking/ip/basic_endpoint.h	/^	std::size_t capacity() const { return impl_.capacity(); }$/;"	f	class:basic_endpoint
capacity	server/shared/networking/ip/endpoint.h	/^	std::size_t capacity() const { return sizeof(data_); }$/;"	f	class:endpoint
caption_	common/cmdline/option_description.h	/^	std::string caption_;$/;"	m	class:options_description
caption_mouse	client/gui/core/event/distributor.cpp	/^		void Mouse_motion::caption_mouse(const bool capture)$/;"	f	class:gui::event::Mouse_motion
capture_keyboard	client/gui/core/event/handler.cpp	/^		void capture_keyboard(Dispatcher* dispatcher)$/;"	f	namespace:gui::event
capture_mouse	client/gui/core/event/dispatcher.h	/^				void capture_mouse()$/;"	f	class:gui::event::Dispatcher
capture_mouse	client/gui/core/event/handler.cpp	/^		void capture_mouse(Dispatcher* dispatcher)$/;"	f	namespace:gui::event
category	client/hotkey/hotkey_command.h	/^		Hotkey_category category; \/\/ 命令类别$/;"	m	struct:hotkey::Hotkey_command
category	client/hotkey/hotkey_command.h	/^		Hotkey_category category;$/;"	m	struct:hotkey::Hotkey_command_temp
category	common/utility/start_process.cpp	/^	typedef sink_tag category;$/;"	t	class:__anon14::log_sink	file:
cb	client/thread/condition_variable.h	/^	void (*cb)(void*);$/;"	m	struct:At_thread_exit_elt
cbegin	client/utils/json.h	/^    const_iterator cbegin() const $/;"	f	class:basic_json
ccsrc	gtest/makefile	/^ccsrc = $(wildcard src\/*.cpp) \\$/;"	m
cend	client/utils/json.h	/^    const_iterator cend() const $/;"	f	class:basic_json
center	client/sdl/window.cpp	/^void Window::center()$/;"	f	class:Window
center_x	client/image.h	/^				int center_x;$/;"	m	struct:image::Locator::Value
center_y	client/image.h	/^				int center_y;$/;"	m	struct:image::Locator::Value
channel	server/shared/networking/channel.cpp	/^channel::channel(event_loop* loop, int sockfd) : $/;"	f	class:channel
channel	server/shared/networking/channel.h	/^class channel$/;"	c
channel_	client/net/tcp_connection.h	/^  Scoped_ptr<Channel> channel_;$/;"	m	class:net::Tcp_connection
channel_	server/shared/networking/tcp_socket.h	/^	channel channel_;$/;"	m	class:tcp_socket
channel_chunks	client/sound.cpp	/^	static std::vector<Mix_chunk*> channel_chunks;$/;"	m	namespace:sound	file:
channel_finished_hook	client/sound.cpp	/^	static void channel_finished_hook(int channel)$/;"	f	namespace:sound
channel_ids	client/sound.cpp	/^	static std::vector<int> channel_ids;$/;"	m	namespace:sound	file:
channel_list	server/shared/networking/epoll.h	/^	typedef std::vector<channel*> channel_list;$/;"	t	class:epoll
channel_list	server/shared/networking/event_loop.h	/^  	typedef std::vector<channel*> channel_list;$/;"	t	class:event_loop
channel_map	server/shared/networking/epoll.h	/^	typedef std::map<int, channel*> channel_map;$/;"	t	class:epoll
channels_	client/net/poller.h	/^	Channel_map channels_;$/;"	m	class:net::Poller
channels_	server/shared/networking/epoll.h	/^	channel_map channels_;$/;"	m	class:epoll
char_type	common/utility/start_process.cpp	/^	typedef char char_type;$/;"	t	class:__anon14::log_sink	file:
character_database_connection	server/database/database/implementation/character_database.cpp	/^character_database_connection::character_database_connection(mysql_connection_info& conn_info) : mysql_connection(conn_info) {}$/;"	f	class:character_database_connection
character_database_connection	server/database/database/implementation/character_database.cpp	/^character_database_connection::character_database_connection(producer_consumer_queue<sql_operation*>* q, mysql_connection_info& conn_info) :$/;"	f	class:character_database_connection
character_database_connection	server/database/database/implementation/character_database.h	/^class character_database_connection : public mysql_connection$/;"	c
characters_per_line_	client/font/text.h	/^			unsigned characters_per_line_;$/;"	m	class:font::Pango_text
cheap_prepend	client/net/buffer.cpp	/^const size_t Buffer::cheap_prepend = 8;$/;"	m	class:net::Buffer	file:
cheap_prepend	client/net/buffer.h	/^	static const size_t cheap_prepend;$/;"	m	class:net::Buffer
check_every_n_	common/logging/old_logging/log_file.h	/^	const uint64_t check_every_n_;$/;"	m	class:lg::Log_file
check_executable	server/database/update/db_update.cpp	/^bool db_updater_util::check_executable()$/;"	f	class:db_updater_util
check_font_file	client/font/font_config.cpp	/^	bool check_font_file(const std::string& name)$/;"	f	namespace:font
check_ip_callback	server/game/server/world_tcp_socket.cpp	/^void world_tcp_socket::check_ip_callback(prepared_query_result result)$/;"	f	class:world_tcp_socket
check_option	client/cmdln.cpp	/^bool Commandline::check_option(const std::string& option, $/;"	f	class:Commandline
check_param_count	client/cmdln.cpp	/^Commandline::Parse_status Commandline::check_param_count()$/;"	f	class:Commandline
check_parse_status	client/commandline_options.cpp	/^bool Commandline_options::check_parse_status($/;"	f	class:Commandline_options
check_valid_index	server/database/database/mysql_prepared_statement.cpp	/^void mysql_prepared_statement::check_valid_index(uint8_t index)$/;"	f	class:mysql_prepared_statement
checked	client/cmdln.cpp	/^	bool checked;$/;"	m	struct:Cmd_option	file:
child	client/config.h	/^			Node* next, *prev, *child;$/;"	m	struct:Config::Node
child	client/gui/core/event/dispatcher.h	/^					child = 2,$/;"	e	enum:gui::event::Dispatcher::Event_queue_type
child	client/gui/core/event/dispatcher.h	/^					std::list<T> child;$/;"	m	struct:gui::event::Dispatcher::Signal_type
child	server/process/child.h	/^	explicit child(pid_t p) : pid(p) {}$/;"	f	struct:child
child	server/process/child.h	/^struct child$/;"	s
child	server/process/test.cpp	/^	explicit child(int p) : pid(p) {}$/;"	f	struct:child
child	server/process/test.cpp	/^struct child$/;"	s	file:
choose_track	client/sound.cpp	/^static std::shared_ptr<sound::Music_track> choose_track()$/;"	f	file:
chunk_usage	client/sound.cpp	/^	std::map<Mix_Chunk*, int> chunk_usage;$/;"	m	namespace:__anon27	file:
chunks_	client/font/text_surface.h	/^		mutable std::vector<Text_chunk> chunks_;$/;"	m	class:Text_surface
clean_up	server/database/database/field.cpp	/^void field::clean_up()$/;"	f	class:field
clean_up	server/database/database/query_result.cpp	/^void prepared_result_set::clean_up()$/;"	f	class:prepared_result_set
clean_up	server/database/database/query_result.cpp	/^void result_set::clean_up()$/;"	f	class:result_set
clean_up	server/database/update/update_fetcher.cpp	/^void update_fetcher::clean_up(const applied_file_storage& storage) const$/;"	f	class:update_fetcher
cleaned_up_	server/database/database/transaction.h	/^	bool cleaned_up_;$/;"	m	class:transaction_base
cleanup	client/filesystem.cpp	/^	void Binary_paths_manager::cleanup()$/;"	f	class:filesystem::Binary_paths_manager
cleanup	server/database/database/transaction.cpp	/^void transaction_base::cleanup()$/;"	f	class:transaction_base
cleanup_texture	client/sdl/texture.cpp	/^	void cleanup_texture(SDL_Texture* t)$/;"	f	namespace:__anon24
clear	client/hotkey/hotkey_item.h	/^			void clear() { command_ = "null"; }$/;"	f	class:hotkey::Hotkey_base
clear	client/json.h	/^	void clear()$/;"	f	class:Format::Value
clear	client/old/byte_buffer.cpp	/^void Byte_buffer::clear() { read_pos_ = write_pos_ = 0; storages_.clear(); }$/;"	f	class:Byte_buffer
clear	client/utils/json.h	/^    void clear() $/;"	f	class:basic_json
clear	server/game/server/packet.h	/^	void clear() { world_packet_.clear(); }$/;"	f	struct:world_packets::server_packet
clear	server/shared/packets/byte_buffer.h	/^	void clear()$/;"	f	class:byte_buffer
clear_binary_paths_cache	client/filesystem.cpp	/^	void clear_binary_paths_cache()$/;"	f	namespace:filesystem
clear_fonts	client/font/sdl_ttf.cpp	/^static void clear_fonts()$/;"	f	file:
clear_hotkesy	client/hotkey/hotkey_item.cpp	/^	void clear_hotkesy()$/;"	f	namespace:hotkey
clear_hotkey_commands	client/hotkey/hotkey_command.cpp	/^	void clear_hotkey_commands() { comand_map.clear(); }$/;"	f	namespace:hotkey
clear_hotkeys	client/hotkey/hotkey_item.cpp	/^	void clear_hotkeys(const std::string& command)$/;"	f	namespace:hotkey
clear_last_error	server/shared/networking/socket_operations.cpp	/^inline void clear_last_error() { errno = 0; }$/;"	f
clear_parameters	server/database/database/mysql_prepared_statement.cpp	/^void mysql_prepared_statement::clear_parameters()$/;"	f	class:mysql_prepared_statement
clear_without_free	client/sdl/surface.h	/^		void clear_without_free() { surface_ = nullptr; }$/;"	f	class:Surface
client_connection_initialize	server/game/server/world_tcp_socket.h	/^	static const std::string client_connection_initialize;$/;"	m	class:world_tcp_socket
client_opcode_handler	server/game/server/protocol/opcodes.h	/^	client_opcode_handler(const char* name, session_status status, packet_processing processing) :$/;"	f	struct:client_opcode_handler
client_opcode_handler	server/game/server/protocol/opcodes.h	/^struct client_opcode_handler : public opcode_handler$/;"	s
client_opt_	client/old/mysql_pool.h	/^			int client_opt_;$/;"	m	class:db::Connection_factory
client_packet	server/game/server/packet.cpp	/^client_packet::client_packet(opcode_client expected_opcode, world_packet&& packet) :$/;"	f	class:world_packet::client_packet
client_packet	server/game/server/packet.cpp	/^client_packet::client_packet(world_packet&& packet) : packet(std::move(packet)) {}$/;"	f	class:world_packet::client_packet
client_packet	server/game/server/packet.h	/^struct client_packet : public packet$/;"	s	namespace:world_packets
clients_	client/old/client_handler.h	/^		std::map<int, Socket> clients_;$/;"	m	class:Client_handler
clients_	client/old/server.h	/^		std::map<int, Descriptor> clients_;$/;"	m	class:Server
clock	client/commandline_options.h	/^		bool clock;$/;"	m	class:Commandline_options
clock_type	client/thread/condition_variable.h	/^		typedef std::chrono::system_clock clock_type;$/;"	t	class:Condition_variable
close	client/net/net_utils.cpp	/^void close(int sockfd)$/;"	f	namespace:net
close	client/old/mysql_pool.cpp	/^	void Database::close()$/;"	f	class:db::Database
close	common/logging/log.cpp	/^void log::close()$/;"	f	class:log
close	server/database/database/database_worker_pool.cpp	/^void database_worker_pool<T>::close()$/;"	f	class:database_worker_pool
close	server/database/database/mysql_connection.cpp	/^void mysql_connection::close()$/;"	f	class:mysql_connection
close	server/process/file_descriptor.cpp	/^void file_descriptor::close()$/;"	f	class:file_descriptor
close	server/shared/networking/acceptor.cpp	/^void acceptor::close()$/;"	f	class:acceptor
close	server/shared/networking/socket.cpp	/^void socket::close()$/;"	f	class:socket
close	server/shared/networking/socket_operations.cpp	/^int close(int sockfd, std::error_code& ec)$/;"	f
close_	server/database/database/database_loader.h	/^	std::stack<close_func> close_;$/;"	m	class:database_loader
close_callback_	client/net/channel.h	/^	Event_callback close_callback_;$/;"	m	class:net::Channel
close_callback_	client/net/tcp_connection.h	/^  Close_callback close_callback_;$/;"	m	class:net::Tcp_connection
close_callback_	server/shared/networking/channel.h	/^	event_callback close_callback_;$/;"	m	class:channel
close_file	common/logging/appender_file.cpp	/^void appender_file::close_file()$/;"	f	class:appender_file
close_on_exit_	server/process/file_descriptor.h	/^	bool close_on_exit_;$/;"	m	class:file_descriptor
close_socket	server/shared/networking/tcp_socket.cpp	/^void tcp_socket::close_socket()$/;"	f	class:tcp_socket
close_window	client/gui/core/event/handler.cpp	/^		void Sdl_event_handler::close_window(const unsigned window_id)$/;"	f	class:gui::event::Sdl_event_handler
closed_	server/shared/networking/tcp_socket.h	/^	std::atomi<bool> closed_;$/;"	m	class:tcp_socket
closing_	server/shared/networking/tcp_socket.h	/^	std::atomi<bool> closing_;$/;"	m	class:tcp_socket
cmd_line	server/process/executor.h	/^	char** cmd_line;$/;"	m	struct:executor
cmd_line	server/process/test.cpp	/^	char** cmd_line;$/;"	m	struct:executor	file:
cmd_line_	server/process/run_exe.h	/^	std::shared_ptr<char> cmd_line_;$/;"	m	class:run_exe_
cmdline	common/cmdline/cmdline.cpp	/^cmdline::cmdline(int argc, char* argv[])$/;"	f	class:cmdline
cmdline	common/cmdline/cmdline.h	/^	cmdline(const std::vector<std::string>& args) { init(args); }$/;"	f	class:cmdline
cmdline	common/cmdline/cmdline.h	/^class cmdline$/;"	c
cmdline_	client/commandline_options.h	/^                Commandline cmdline_;$/;"	m	class:Commandline_options
cmdline_opts_	client/game_launcher.h	/^		const Commandline_options& cmdline_opts_;$/;"	m	class:Game_launcher
color_	client/font/text_surface.h	/^		Color color_;$/;"	m	class:Text_surface
colored_	common/logging/appender_console.h	/^	bool colored_;$/;"	m	class:appender_console
colors_	common/logging/appender_console.h	/^	color_types colors_[NUM_ENABLED_LOG_LEVELS];$/;"	m	class:appender_console
column_total_num	client/cmdln.cpp	/^static constexpr int column_total_num = 73;$/;"	v	file:
command	client/hotkey/hotkey_command.h	/^		std::string command; \/\/ 该命令是唯一的$/;"	m	struct:hotkey::Hotkey_command
command	client/hotkey/hotkey_command.h	/^		std::string command;$/;"	m	struct:hotkey::Hotkey_command_temp
command_	client/hotkey/hotkey_item.h	/^			std::string command_;$/;"	m	class:hotkey::Hotkey_base
command_map	client/hotkey/hotkey_command.cpp	/^		std::map<std::string, size_t> command_map;$/;"	m	namespace:__anon18	file:
commit	client/old/mysql_pool.cpp	/^	bool Database::commit()$/;"	f	class:db::Database
commit_transaction	server/database/database/database_worker_pool.cpp	/^void database_worker_pool<T>::commit_transaction(sql_transaction<T> transaction)$/;"	f	class:database_worker_pool
commit_transaction	server/database/database/mysql_connection.cpp	/^void mysql_connection::commit_transaction()$/;"	f	class:mysql_connection
completed	server/database/database/query_callback.h	/^		completed$/;"	e	enum:query_callback::status
components	client/version.h	/^		const std::vector<unsigned int>& components() const $/;"	f	class:Version_info
compress	client/old/packet_protocol.h	/^	uint16_t compress : 1;		\/\/ 是否使用压缩： 0 - 不使用，1 -使用$/;"	m	struct:Frame
compressed_adler	server/game/server/world_tcp_socket.cpp	/^	uint32_t compressed_adler;$/;"	m	struct:compressed_world_packet	file:
compressed_world_packet	server/game/server/world_tcp_socket.cpp	/^struct compressed_world_packet$/;"	s	file:
compression_stream_	server/game/server/world_tcp_socket.cpp	/^	compression_stream_(nullptr)$/;"	f
compression_stream_	server/game/server/world_tcp_socket.h	/^	z_stream* compression_stream_;$/;"	m	class:world_tcp_socket::read_data_handler_result
cond_	client/net/event_loop_thread.h	/^	std::condition_variable cond_;$/;"	m	class:net::Event_loop_thread
cond_	client/thread/condition_variable.h	/^		native_type cond_ = PTHREAD_COND_INITIALIZER;$/;"	m	class:Condition_variable
cond_	client/thread/condition_variable.h	/^		native_type cond_;$/;"	m	class:Condition_variable
cond_	common/logging/old_logging/async_log.h	/^	std::condition_variable cond_;$/;"	m	class:lg::Async_log
cond_	server/shared/networking/event_loop_thread.h	/^	std::condition_variable cond_;$/;"	m	class:event_loop_thread
condition_	client/old/threadpool.h	/^		std::condition_variable condition_;$/;"	m	class:Threadpool
config_mgr	common/configuration/config.h	/^class config_mgr$/;"	c
conn	server/database/database/sql_operation.h	/^	mysql_connection* conn;$/;"	m	class:sql_operation
connect	client/gui/core/event/dispatcher.cpp	/^		void Dispatcher::connect()$/;"	f	class:gui::event::Dispatcher
connect	client/gui/core/event/handler.cpp	/^		void Sdl_event_handler::connect(Dispatcher* dispatcher)$/;"	f	class:gui::event::Sdl_event_handler
connect	client/net/net_utils.cpp	/^bool connect(int sockfd, const sockaddr_in& addr)$/;"	f	namespace:net
connect	client/net/socket.cpp	/^bool Socket::connect(Inet_address& addr)$/;"	f	class:net::Socket
connect	client/old/epoll_handler.cpp	/^	void Epoll_handler::connect(Dispatcher* dispatcher)$/;"	f	class:event::Epoll_handler
connect	server/shared/networking/socket_operations.cpp	/^int connect(int sockfd, const socket_addr_type* addr, socklen_t addrlen, std::error_code& ec)$/;"	f
connect_destroyed	client/net/tcp_connection.cpp	/^void Tcp_connection::connect_destroyed()$/;"	f	class:net::Tcp_connection
connect_destroyed	server/shared/networking/tcp_socket.cpp	/^void tcp_socket::connect_destroyed()$/;"	f	class:tcp_socket
connect_dispatcher	client/gui/core/event/handler.cpp	/^		void connect_dispatcher(Dispatcher* dispatcher)$/;"	f	namespace:gui::event
connect_established	client/net/tcp_connection.cpp	/^void Tcp_connection::connect_established()$/;"	f	class:net::Tcp_connection
connect_established	server/shared/networking/tcp_socket.cpp	/^void tcp_socket::connect_established()$/;"	f	class:tcp_socket
connect_signal	client/gui/core/event/dispatcher.h	/^					void connect_signal(const Ui_event event,$/;"	f	struct:gui::event::Dispatcher::Signal_queue
connect_signal	client/gui/core/event/dispatcher.h	/^				connect_signal(const Signal_function& signal, $/;"	f	class:gui::event::Dispatcher
connect_signal	client/gui/core/event/dispatcher.h	/^				connect_signal(const Signal_keyboard_function& signal,$/;"	f	class:gui::event::Dispatcher
connect_signal	client/gui/core/event/dispatcher.h	/^				connect_signal(const Signal_message_function& signal,$/;"	f	class:gui::event::Dispatcher
connect_signal	client/gui/core/event/dispatcher.h	/^				connect_signal(const Signal_mouse_function& signal,$/;"	f	class:gui::event::Dispatcher
connect_signal	client/gui/core/event/dispatcher.h	/^				connect_signal(const Signal_notification_function& signal,$/;"	f	class:gui::event::Dispatcher
connect_signal	client/gui/core/event/dispatcher.h	/^				connect_signal(const Signal_raw_event_function& signal,$/;"	f	class:gui::event::Dispatcher
connect_signal	client/gui/core/event/dispatcher.h	/^				connect_signal(const Signal_text_input_function& signal,$/;"	f	class:gui::event::Dispatcher
connect_signal	client/gui/core/event/dispatcher.h	/^				connect_signal(const Signal_touch_function& signal, $/;"	f	class:gui::event::Dispatcher
connect_signal_mouse_left_click	client/gui/core/event/dispatcher.cpp	/^		void connect_signal_mouse_left_click(Dispatcher& dispatcher, $/;"	f	namespace:gui::event
connect_signal_mouse_left_double_click	client/gui/core/event/dispatcher.cpp	/^		void connect_signal_mouse_left_double_click(Dispatcher& dispatcher,$/;"	f	namespace:gui::event
connect_signal_notify_modified	client/gui/core/event/dispatcher.cpp	/^		void connect_signal_notify_modified(Dispatcher& dispatcher,$/;"	f	namespace:gui::event
connect_signal_on_draw	client/gui/core/event/dispatcher.cpp	/^void connect_signal_on_draw(Dispatcher& dispatcher, $/;"	f	namespace:gui::event
connect_signal_pre_key_press	client/gui/core/event/dispatcher.cpp	/^		void connect_signal_pre_key_press(Dispatcher& dispatcher,$/;"	f	namespace:gui::event
connected	client/net/tcp_connection.h	/^  bool connected() const { return state_ == kConnected; }$/;"	f	class:net::Tcp_connection
connected	server/shared/networking/tcp_socket.h	/^	bool connected() const { return state_ == kConnected; }$/;"	f	class:tcp_socket
connected_	client/gui/core/event/dispatcher.h	/^				bool connected_;$/;"	m	class:gui::event::Dispatcher
connection_	server/database/database/database_worker.h	/^	mysql_connection* connection_;$/;"	m	class:database_worker
connection_	server/game/server/world_packet.h	/^	connection_type connection_;$/;"	m	class:world_packet
connection_	server/shared/networking/network_thread.h	/^	std::atomi<int32_t> connection_;$/;"	m	class:network_thread
connection_callback_	client/net/tcp_connection.h	/^  Connection_callback connection_callback_;$/;"	m	class:net::Tcp_connection
connection_callback_	client/net/tcp_server.h	/^	Connection_callback connection_callback_;$/;"	m	class:net::Tcp_server
connection_callback_	server/shared/networking/tcp_server.h	/^	Connection_callback connection_callback_;$/;"	m	class:net::Tcp_server
connection_flags	server/database/database/mysql_connection.h	/^enum connection_flags$/;"	g
connection_flags_	server/database/database/mysql_connection.h	/^	connection_flags connection_flags_;$/;"	m	class:mysql_connection
connection_id	server/game/server/protocol/packet_log.cpp	/^	uint32_t connection_id;$/;"	m	struct:packet_header	file:
connection_index	server/game/server/protocol/opcodes.h	/^	connection_type connection_index;$/;"	m	struct:server_opcode_handler
connection_info_	server/database/database/database_worker_pool.h	/^	std::unique_ptr<mysql_connection_info> connection_info_;$/;"	m	class:database_worker_pool
connection_info_	server/database/database/mysql_connection.h	/^	mysql_connection_info& connection_info_;$/;"	m	class:mysql_connection
connections_	client/net/tcp_server.h	/^	Connection_map connections_;$/;"	m	class:net::Tcp_server
connections_	server/database/database/database_worker_pool.h	/^	std::array<std::vector<std::unique_ptr<T>>, IDX_SIZE> connections_;$/;"	m	class:database_worker_pool
connections_	server/shared/networking/tcp_server.h	/^	Connection_map connections_;$/;"	m	class:net::Tcp_server
console_auto_wraps	client/cmdln.cpp	/^std::string Commandline::console_auto_wraps(const int row_bytes, const std::string& val, const int start_pos)$/;"	f	class:Commandline
const_iterator	common/utility/util.h	/^    typedef storage_type::const_iterator const_iterator;$/;"	t	class:tokenizer
const_reference	common/utility/util.h	/^    typedef storage_type::const_reference const_reference;$/;"	t	class:tokenizer
construct	server/database/database/query_callback.cpp	/^inline void construct(T& t, Args&&... args)$/;"	f
construct_active_member	server/database/database/query_callback.cpp	/^inline void construct_active_member(T* obj)$/;"	f
consumed_	client/json.h	/^	bool consumed_;$/;"	m	class:Format::Input
content_	client/image.cpp	/^			std::vector<Cache_item<T>> content_;$/;"	m	class:image::Cache_type	file:
contents	server/shared/packets/byte_buffer.h	/^	const uint8_t* contents() const$/;"	f	class:byte_buffer
contents	server/shared/packets/byte_buffer.h	/^	uint8_t* contents()$/;"	f	class:byte_buffer
context_	client/font/text.h	/^				std::function<void(void*)>> context_;$/;"	m	class:font::Pango_text
context_	client/net/event_loop.h	/^  	std::any context_;$/;"	m	class:net::Event_loop
context_	client/net/tcp_connection.h	/^std::any context_;$/;"	m	class:net::Tcp_connection
continue_session_seed	server/game/server/world_tcp_socket.cpp	/^constexpr uint8_t world_tcp_socket::continue_session_seed[16] = { $/;"	m	class:world_tcp_socket	file:
continue_session_seed	server/game/server/world_tcp_socket.h	/^	static constexpr uint8_t continue_session_seed[16];$/;"	m	class:world_tcp_socket
conversion	server/database/database/field.cpp	/^struct conversion$/;"	s	namespace:__anon4	file:
convert_string	common/configuration/config.h	/^struct convert_string$/;"	s	namespace:tlp
convert_string	common/configuration/config.h	/^struct convert_string<bool>$/;"	s	namespace:tlp
convert_string	common/configuration/config.h	/^struct convert_string<const char*>$/;"	s	namespace:tlp
convert_string	common/configuration/config.h	/^struct convert_string<double>$/;"	s	namespace:tlp
convert_string	common/configuration/config.h	/^struct convert_string<float>$/;"	s	namespace:tlp
convert_string	common/configuration/config.h	/^struct convert_string<int16_t>$/;"	s	namespace:tlp
convert_string	common/configuration/config.h	/^struct convert_string<int32_t>$/;"	s	namespace:tlp
convert_string	common/configuration/config.h	/^struct convert_string<int64_t>$/;"	s	namespace:tlp
convert_string	common/configuration/config.h	/^struct convert_string<int8_t>$/;"	s	namespace:tlp
convert_string	common/configuration/config.h	/^struct convert_string<uint16_t>$/;"	s	namespace:tlp
convert_string	common/configuration/config.h	/^struct convert_string<uint32_t>$/;"	s	namespace:tlp
convert_string	common/configuration/config.h	/^struct convert_string<uint64_t>$/;"	s	namespace:tlp
convert_string	common/configuration/config.h	/^struct convert_string<uint8_t>$/;"	s	namespace:tlp
copy	client/json.h	/^void copy(const std::string& s, Iter it)$/;"	f	class:Format
copy_stream	server/process/start_process.cpp	/^std::streamsize copy_stream(const Source& src, Sink& sink)$/;"	f
core_id	client/commandline_options.h	/^		std::optional<std::string> core_id;$/;"	m	class:Commandline_options
corrected_path	server/database/update/db_update.cpp	/^std::string& db_updater_util::corrected_path()$/;"	f	class:db_updater_util
count	client/utils/json.h	/^    size_type count(KeyT&& key) const$/;"	f	class:basic_json
count_	common/logging/old_logging/log_file.h	/^	uint64_t count_;$/;"	m	class:lg::Log_file
count_leading_ones	client/utils/math.h	/^inline unsigned int count_leading_ones(N n)$/;"	f
count_leading_zeros	client/utils/math.h	/^inline unsigned int count_leading_zeros(N n)$/;"	f
count_leading_zeros_impl	client/utils/math.h	/^inline unsigned int count_leading_zeros_impl(N n, size_t w)$/;"	f
count_leading_zeros_impl	client/utils/math.h	/^inline unsigned int count_leading_zeros_impl(char n, size_t w)$/;"	f
count_leading_zeros_impl	client/utils/math.h	/^inline unsigned int count_leading_zeros_impl(signed char n, size_t w)$/;"	f
count_leading_zeros_impl	client/utils/math.h	/^inline unsigned int count_leading_zeros_impl(signed int n, size_t w)$/;"	f
count_leading_zeros_impl	client/utils/math.h	/^inline unsigned int count_leading_zeros_impl(signed long int n, size_t w)$/;"	f
count_leading_zeros_impl	client/utils/math.h	/^inline unsigned int count_leading_zeros_impl(signed long long int n, $/;"	f
count_leading_zeros_impl	client/utils/math.h	/^inline unsigned int count_leading_zeros_impl(signed short int n, size_t w)$/;"	f
count_leading_zeros_impl	client/utils/math.h	/^inline unsigned int count_leading_zeros_impl(unsigned char n, size_t w)$/;"	f
count_leading_zeros_impl	client/utils/math.h	/^inline unsigned int count_leading_zeros_impl(unsigned int n, size_t w)$/;"	f
count_leading_zeros_impl	client/utils/math.h	/^inline unsigned int count_leading_zeros_impl(unsigned long int n, size_t w)$/;"	f
count_leading_zeros_impl	client/utils/math.h	/^inline unsigned int count_leading_zeros_impl(unsigned long long int n, $/;"	f
count_leading_zeros_impl	client/utils/math.h	/^inline unsigned int count_leading_zeros_impl(unsigned short int n, size_t w)$/;"	f
count_ones	client/utils/math.h	/^inline unsigned int count_ones(N n)$/;"	f
crbegin	client/utils/json.h	/^    const_reverse_iterator crbegin() const $/;"	f	class:basic_json
create	client/old/connection_pool.h	/^		MYSQL* create()$/;"	f	class:Mysql_connection_factory
create	client/old/mysql_pool.cpp	/^	Database* Connection_factory::create()$/;"	f	class:db::Connection_factory
create	client/old/mysql_pool.cpp	/^	void Connection_pool::create(size_t size)$/;"	f	class:db::Connection_pool
create	client/utils/json.h	/^	static T* create(Args&& ... args)$/;"	f	class:basic_json
create	server/database/update/db_update.cpp	/^bool db_updater<T>::create(database_worker_pool<T>& pool)$/;"	f	class:db_updater
create_appender	common/logging/log.h	/^appender* create_appender(uint8_t id, std::string const& name, log_level level, appender_flags flags, std::vector<char const*>&& extra_args)$/;"	f
create_appender_from_config	common/logging/log.cpp	/^void log::create_appender_from_config(std::string const& appender_name)$/;"	f	class:log
create_array	client/config.cpp	/^inline Config::Node* Config::create_array()$/;"	f	class:Config
create_bool	client/config.cpp	/^inline Config::Node* Config::create_bool(bool b)$/;"	f	class:Config
create_child_process	common/utility/start_process.cpp	/^int create_child_process(T waiter, const std::string& executable, const std::vector<std::string>& args, const std::string& logger, const std::string& input, bool secure)$/;"	f	namespace:__anon14
create_compatible_surface	client/sdl/utils.cpp	/^Surface create_compatible_surface(const Surface &surf, int width, int height)$/;"	f
create_compatible_texture	client/sdl/utils.cpp	/^Texture create_compatible_texture(const Texture& t, int w, int h)$/;"	f
create_cursor	client/cursor.cpp	/^		SDL_Cursor* create_cursor(Surface surf)$/;"	f	namespace:cursor::__anon26
create_directory_if_missing	client/filesystem.cpp	/^	static bool create_directory_if_missing(const fs::path& dirpath)$/;"	f	namespace:filesystem
create_directory_if_missing_recursive	client/filesystem.cpp	/^	static bool create_directory_if_missing_recursive($/;"	f	namespace:filesystem
create_error	client/sdl/exception.cpp	/^static std::string create_error(const std::string& operation, bool use_sdl_error)$/;"	f	file:
create_event_fd	client/net/event_loop.cpp	/^int create_event_fd()$/;"	f	namespace:__anon20
create_event_fd	server/shared/networking/event_loop.cpp	/^int create_event_fd()$/;"	f	namespace:__anon8
create_hotkey	client/hotkey/hotkey_item.cpp	/^	Hotkey_ptr create_hotkey(const std::string& id, const SDL_Event& event)$/;"	f	namespace:hotkey
create_logger_from_config	common/logging/log.cpp	/^void log::create_logger_from_config(std::string const& appender_name)$/;"	f	class:log
create_null	client/config.cpp	/^inline Config::Node* Config::create_null()$/;"	f	class:Config
create_number	client/config.cpp	/^inline Config::Node* Config::create_number(double num)$/;"	f	class:Config
create_number_array	client/config.cpp	/^Config::Node* Config::create_number_array(const std::vector<int>& numbers, $/;"	f	class:Config
create_object	client/config.cpp	/^inline Config::Node* Config::create_object()$/;"	f	class:Config
create_pipe	server/process/pipe.h	/^pipe create_pipe()$/;"	f
create_process	server/process/start_process.cpp	/^int create_process(T waiter, const std::string& executable, const std::vector<std::string>& args, const std::string& logger, const std::string& input, bool secure)$/;"	f
create_rect	client/sdl/rect.h	/^inline SDL_Rect create_rect(const int x, const int y, const int w, const int h)$/;"	f
create_string	client/config.cpp	/^inline Config::Node* Config::create_string(const std::string& str)$/;"	f	class:Config
create_string_array	client/config.cpp	/^Config::Node* Config::create_string_array(const std::vector<std::string>& str, $/;"	f	class:Config
create_texture_from_disk	client/image.cpp	/^	Texture create_texture_from_disk(const Locator& loc)$/;"	f	namespace:image
create_texture_from_file	client/image.cpp	/^	static Texture create_texture_from_file(const image::Locator& loc)$/;"	f	namespace:image
create_texture_from_sub_file	client/image.cpp	/^	static Texture create_texture_from_sub_file(const image::Locator& loc)$/;"	f	namespace:image
create_timerfd	client/net/timer_queue.cpp	/^int create_timerfd()$/;"	f	namespace:detail
create_timerfd	server/shared/networking/timer_queue.cpp	/^int create_timerfd()$/;"	f	namespace:detail
crend	client/utils/json.h	/^    const_reverse_iterator crend() const $/;"	f	class:basic_json
crlf	client/net/buffer.cpp	/^const char Buffer::crlf[] = "\\r\\n";$/;"	m	class:net::Buffer	file:
crlf	client/net/buffer.h	/^	static const char crlf[];$/;"	m	class:net::Buffer
csrc	gtest/makefile	/^csrc = $(wildcard src\/*.c)$/;"	m
cur	client/json.h	/^	Iter cur() const $/;"	f	class:Format::Input
cur_	client/json.h	/^	Iter cur_, end_;$/;"	m	class:Format::Input
curbitval_	server/shared/packets/byte_buffer.h	/^	uint8_t curbitval_;$/;"	m	class:byte_buffer
current	common/logging/old_logging/log_buffer.h	/^	char* current() { return current_; }$/;"	f	class:lg::Log_buffer
current_	common/logging/old_logging/log_buffer.h	/^	char* current_;$/;"	m	class:lg::Log_buffer
current_active_channel_	client/net/event_loop.h	/^  	Channel* current_active_channel_;$/;"	m	class:net::Event_loop
current_active_channel_	server/shared/networking/event_loop.h	/^  	channel* current_active_channel_;$/;"	m	class:event_loop
current_background	client/tooltips.cpp	/^Surface current_background = nullptr;$/;"	v
current_buffer_	common/logging/old_logging/async_log.h	/^	Buffer_ptr current_buffer_;$/;"	m	class:lg::Async_log
current_char_	client/serialization/ucs4_iterator_base.h	/^		        ucs4::Char current_char_;$/;"	m	class:ucs4::Iterator_base
current_cursor	client/cursor.cpp	/^		cursor::Cursor_type current_cursor = cursor::Cursor::normal;$/;"	m	namespace:cursor::__anon26	file:
current_row_	server/database/database/query_result.h	/^	field* current_row_;$/;"	m	class:result_set
current_substr_	client/serialization/ucs4_iterator_base.h	/^			        typename String_type::const_iterator> current_substr_;$/;"	m	class:ucs4::Iterator_base
current_tooltip	client/tooltips.cpp	/^std::map<int, Tooltip>::const_iterator current_tooltip = tips.end();$/;"	v
current_track	client/sound.cpp	/^	std::shared_ptr<sound::Music_track> current_track;$/;"	m	namespace:__anon28	file:
current_track_index	client/sound.cpp	/^	unsigned int current_track_index = 0;$/;"	m	namespace:__anon28	file:
current_track_list	client/sound.cpp	/^	std::vector<std::shared_ptr<sound::Music_track>> current_track_list;$/;"	m	namespace:__anon28	file:
cursor	client/cursor.cpp	/^			Cursor_ptr cursor;$/;"	m	struct:cursor::__anon26::Cursor_data	file:
cursor	client/cursor.cpp	/^namespace cursor$/;"	n	file:
cursor	client/cursor.h	/^namespace cursor$/;"	n
cv	client/thread/condition_variable.cpp	/^	Condition_variable* cv;$/;"	m	struct:final	file:
cv_	client/old/mysql_pool.h	/^			std::condition_variable cv_;$/;"	m	class:db::Connection_pool
cv_	common/threading/producer_consumer_queue.h	/^	std::condition_variable cv_;$/;"	m	class:producer_consumer_queue
cycle_focus	client/events.cpp	/^        void Context::cycle_focus()$/;"	f	class:events::Context
data	client/old/packet_protocol.h	/^	uint8_t data [] ;		\/\/数据部分,占位$/;"	m	struct:Packet_head
data	common/logging/old_logging/log_buffer.h	/^	const char* data() const { return data_; }$/;"	f	class:lg::Log_buffer
data	server/database/database/prepared_statement.h	/^	prepared_statement_data_union data;$/;"	m	struct:prepared_statement_data
data	server/shared/networking/ip/basic_endpoint.h	/^	const data_type* data() const { return impl_.data(); }$/;"	f	class:basic_endpoint
data	server/shared/networking/ip/basic_endpoint.h	/^	data_type* data() { return impl_.data(); }$/;"	f	class:basic_endpoint
data	server/shared/networking/ip/endpoint.h	/^	const socket_addr_type* data() const { return &data_.base; }$/;"	f	class:endpoint
data	server/shared/networking/ip/endpoint.h	/^	socket_addr_type* data()  { return &data_.base; }$/;"	f	class:endpoint
data_	client/old/packet.h	/^		uint8_t data_[queue_packet_len];$/;"	m	class:Packet
data_	client/sound.cpp	/^			Mix_Chunk* data_;$/;"	m	class:__anon28::Sound_cache_chunk	file:
data_	common/logging/old_logging/log_buffer.h	/^	char data_[SIZE] = {0};$/;"	m	class:lg::Log_buffer
data_	server/database/database/field.h	/^	} data_;$/;"	m	class:field	typeref:struct:field::__anon2
data_	server/shared/networking/ip/endpoint.h	/^	} data_;$/;"	m	class:endpoint	typeref:union:endpoint::data_union
data_dir	client/commandline_options.h	/^		std::optional<std::string> data_dir;$/;"	m	class:Commandline_options
data_path	client/commandline_options.h	/^		bool data_path;$/;"	m	class:Commandline_options
data_type	server/shared/networking/ip/basic_endpoint.h	/^	typedef socket_addr_type data_type;$/;"	t	class:basic_endpoint
data_union	server/shared/networking/ip/endpoint.h	/^	union data_union$/;"	u	class:endpoint
database	server/database/database/mysql_connection.h	/^	std::string database;$/;"	m	struct:mysql_connection_info
database_	client/old/connection_pool.h	/^		std::string database_;$/;"	m	class:Mysql_connection_factory
database_field_type	server/database/database/field.h	/^enum class database_field_type : uint8_t$/;"	c
database_loader	server/database/database/database_loader.cpp	/^database_loader::database_loader(const std::string& logger, const uint32_t default_update_mask) :$/;"	f	class:database_loader
database_loader	server/database/database/database_loader.h	/^class database_loader$/;"	c
database_type_flags	server/database/database/database_loader.h	/^	enum database_type_flags$/;"	g	class:database_loader
database_worker	server/database/database/database_worker.cpp	/^database_worker::database_worker(producer_consumer_queue<sql_operation*>* new_queue, mysql_connection* connection) :$/;"	f	class:database_worker
database_worker	server/database/database/database_worker.h	/^class database_worker$/;"	c
database_worker_pool	server/database/database/database_worker_pool.cpp	/^database_worker_pool<T>::database_worker_pool() : queue_(new producer_consumer_queue<sql_operation*>()), async_threads_(0), synch_threads_(0)$/;"	f	class:database_worker_pool
database_worker_pool	server/database/database/database_worker_pool.h	/^class database_worker_pool$/;"	c
datadir	client/Makefile	/^datadir = ${datarootdir}$/;"	m
datadir	client/old/Makefile	/^datadir = ${datarootdir}$/;"	m
datarootdir	client/Makefile	/^datarootdir = ${prefix}\/share$/;"	m
datarootdir	client/old/Makefile	/^datarootdir = ${prefix}\/share$/;"	m
dataset_	client/old/mysql_pool.h	/^			MYSQL_RES* dataset_;$/;"	m	class:db::Query
date	server/database/database/field.h	/^	date,$/;"	m	class:database_field_type
db	client/old/database.cpp	/^namespace db$/;"	n	file:
db	client/old/database.h	/^namespace db$/;"	n
db	client/old/mysql_pool.cpp	/^namespace db$/;"	n	file:
db	client/old/mysql_pool.h	/^namespace db$/;"	n
db_name_	client/old/mysql_pool.h	/^			std::string db_name_;$/;"	m	class:db::Connection_factory
db_name_	client/old/mysql_pool.h	/^			std::string db_name_;$/;"	m	class:db::Database
db_updater	server/database/update/db_update.h	/^class db_updater$/;"	c
db_updater_util	server/database/update/db_update.h	/^class db_updater_util$/;"	c
deactivate_all_scopes	client/hotkey/hotkey_command.cpp	/^	void deactivate_all_scopes()$/;"	f	namespace:hotkey
dead_lock_lock_	server/database/database/transaction.cpp	/^std::mutex transaction_task::dead_lock_lock_;$/;"	m	class:transaction_task	file:
dead_lock_lock_	server/database/database/transaction.h	/^	static std::mutex dead_lock_lock_;$/;"	m	class:transaction_task
debug	client/commandline_options.h	/^		bool debug;$/;"	m	class:Commandline_options
debug	client/log.cpp	/^	Logger& debug()$/;"	f	namespace:lg
debug	gtest/makefile	/^debug = true$/;"	m
debug_string	common/logging/old_logging/log_buffer.h	/^	const char* debug_string()$/;"	f	class:lg::Log_buffer
decimal	server/database/database/field.h	/^	decimal,$/;"	m	class:database_field_type
declval	client/utils/json.h	/^    auto get_ptr()  -> decltype(std::declval<basic_json_t&>().get_impl_ptr(std::declval<PointerType>()))$/;"	f	class:basic_json
declval	client/utils/json.h	/^    constexpr auto get_ptr() const  -> decltype(std::declval<const basic_json_t&>().get_impl_ptr(std::declval<PointerType>()))$/;"	f	class:basic_json
decode	client/old/utils.cpp	/^int decode(const char* buf)$/;"	f
decrement_chunk_usage	client/sound.cpp	/^static void decrement_chunk_usage(Mix_chunk* mcp)$/;"	f	file:
decrypt	client/old/stream.cpp	/^void decrypt(BYTE * buffer, WORD len, BYTE key)$/;"	f
defaultOutput	common/logging/old_logging/logging.cpp	/^void defaultOutput(const char* msg, int len)$/;"	f	namespace:lg
default_connection_callback	client/net/tcp_connection.cpp	/^void default_connection_callback(const Tcp_connection_ptr& conn)$/;"	f	namespace:net
default_hotkey_cfg	client/hotkey/hotkey_item.cpp	/^	Config default_hotkey_cfg;$/;"	m	namespace:hotkey	file:
default_instance	client/random.cpp	/^	Rng& Rng::default_instance()$/;"	f	class:randomness::Rng
default_message_callback	client/net/tcp_connection.cpp	/^void default_message_callback(const Tcp_connection_ptr&,$/;"	f	namespace:net
default_size	server/shared/packets/byte_buffer.h	/^	static size_t const default_size = 0x1000;$/;"	m	class:byte_buffer
default_texture_format	client/sdl/texture.cpp	/^	constexpr int default_texture_format = SDL_PIXELFORMAT_ARGB8888;$/;"	m	namespace:__anon24	file:
del_appender	common/logging/logger.cpp	/^void logger::del_appender(uint8_t id)$/;"	f	class:logger
del_hotkey	client/hotkey/hotkey_item.cpp	/^	void del_hotkey(Hotkey_ptr item)$/;"	f	namespace:hotkey
delay_query_holder	server/database/database/database_worker_pool.cpp	/^query_result_holder_future database_worker_pool<T>::delay_query_holder(sql_query_holder<T>* holder)$/;"	f	class:database_worker_pool
delayed_close_tcp_socket	server/shared/networking/tcp_socket.h	/^	void delayed_close_tcp_socket() { closing_ = true; }$/;"	f	class:tcp_socket
delete_all_wml_hotkeys	client/hotkey/hotkey_command.cpp	/^	void delete_all_wml_hotkeys()$/;"	f	namespace:hotkey
delete_data	client/old/database.cpp	/^	bool delete_data(MYSQL* mysql, const std::string& sql)$/;"	f	namespace:db
delete_item_from_array	client/config.cpp	/^inline void Config::delete_item_from_array(Config::Node* array, int which)$/;"	f	class:Config
delete_item_from_object	client/config.cpp	/^inline void Config::delete_item_from_object(Config::Node* object, $/;"	f	class:Config
delete_queue_object	common/threading/producer_consumer_queue.h	/^	typename std::enable_if<std::is_pointer<E>::value>::type delete_queue_object(E& obj) { delete obj; }$/;"	f	class:producer_consumer_queue
delete_queue_object	common/threading/producer_consumer_queue.h	/^	typename std::enable_if<std::is_pointer<E>::value>::type delete_queue_object(const E&) {}$/;"	f	class:producer_consumer_queue
dep	gtest/makefile	/^dep = $(obj:.o=.d)$/;"	m
depcomp	client/Makefile	/^depcomp = $(SHELL) $(top_srcdir)\/depcomp$/;"	m
depcomp	client/old/Makefile	/^depcomp = $(SHELL) $(top_srcdir)\/depcomp$/;"	m
desc	common/cmdline/cmdline.h	/^	const options_description* desc;$/;"	m	class:cmdline
description	client/hotkey/hotkey_command.h	/^		std::string description; $/;"	m	struct:hotkey::Hotkey_command_temp
description	client/hotkey/hotkey_command.h	/^		std::string description;$/;"	m	struct:hotkey::Hotkey_command
description	common/cmdline/option_description.h	/^	std::string description() const { return description_; }$/;"	f	class:option_description
description	server/shared/networking/socket.h	/^	std::string description;$/;"	m	struct:socket_option
description_	common/cmdline/option_description.h	/^	std::string description_;$/;"	m	class:option_description
destroy	client/json.h	/^		void destroy(Type t)$/;"	f	union:Format::Value::Storage
destroy	client/utils/json.h	/^        void destroy(value_t t) $/;"	f	union:basic_json::json_value
destroy	server/database/database/query_callback.cpp	/^inline void destroy(T& t)$/;"	f
destroy_active_member	server/database/database/query_callback.cpp	/^inline void destroy_active_member(T* obj)$/;"	f
detach	client/thread/thread.cpp	/^void Thread::detach()$/;"	f	class:Thread
detach_item_from_array	client/config.cpp	/^Config::Node* Config::detach_item_from_array(Config::Node* array, int which)$/;"	f	class:Config
detach_item_from_object	client/config.cpp	/^Config::Node* Config::detach_item_from_object(Config::Node* object, $/;"	f	class:Config
detail	client/config.h	/^namespace detail$/;"	n
detail	client/net/timer_queue.cpp	/^namespace detail$/;"	n	file:
detail	server/shared/networking/timer_queue.cpp	/^namespace detail$/;"	n	file:
device_	client/thread/mutex.h	/^		mutex_type& device_;$/;"	m	class:Lock_guard
device_	client/thread/mutex.h	/^		mutex_type* device_;$/;"	m	class:Unique_lock
diff	client/utils/json.h	/^    static basic_json diff(const basic_json& source, const basic_json& target,$/;"	f	class:basic_json
direct_commit_transaction	server/database/database/database_worker_pool.cpp	/^void database_worker_pool<T>::direct_commit_transaction(sql_transaction<T>& transaction)$/;"	f	class:database_worker_pool
direct_execute	server/database/database/database_worker_pool.cpp	/^void database_worker_pool<T>::direct_execute(const char* sql)$/;"	f	class:database_worker_pool
direct_execute	server/database/database/database_worker_pool.cpp	/^void database_worker_pool<T>::direct_execute(prepared_statement<T>* stmt)$/;"	f	class:database_worker_pool
direct_execute	server/database/database/database_worker_pool.h	/^	void direct_execute(F&& sql, Args&&... args)$/;"	f	class:database_worker_pool
direct_option	client/cmdln.cpp	/^	int direct_option;$/;"	m	struct:Cmd_param_pos	file:
direction	server/game/server/protocol/packet_log.cpp	/^	uint32_t direction;$/;"	m	struct:packet_header	file:
direction	server/game/server/protocol/packet_log.h	/^enum direction$/;"	g
directory_entry	server/database/update/update_fetcher.cpp	/^	directory_entry(const path& path_, state state_) : path(path_), state(state_) {}$/;"	f	struct:update_fetcher::directory_entry
directory_entry	server/database/update/update_fetcher.cpp	/^struct update_fetcher::directory_entry$/;"	s	class:update_fetcher	file:
directory_name	client/filesystem.cpp	/^	std::string directory_name(const std::string& file)$/;"	f	namespace:filesystem
directory_storage	server/database/update/update_fetcher.h	/^	typedef std::vector<update_fetcher::directory_entry> directory_storage;$/;"	t	class:update_fetcher
disable	client/hotkey/hotkey_item.h	/^			void disable() { is_disabled_ = true; }$/;"	f	class:hotkey::Hotkey_base
disable_all	client/net/channel.h	/^	void disable_all() { events_ = none_event_; update(); }$/;"	f	class:net::Channel
disable_all	server/shared/networking/channel.h	/^	void disable_all() $/;"	f	class:channel
disable_read	client/net/channel.h	/^	void disable_read() { events_ &= ~read_event_; update(); }$/;"	f	class:net::Channel
disable_read	server/shared/networking/channel.h	/^	void disable_read() $/;"	f	class:channel
disable_write	client/net/channel.h	/^	void disable_write() { events_ &= ~write_event_; update(); }$/;"	f	class:net::Channel
disable_write	server/shared/networking/channel.h	/^	void disable_write() $/;"	f	class:channel
discard_input	client/events.cpp	/^        void discard_input()$/;"	f	namespace:events
disconnect	client/gui/core/event/handler.cpp	/^		void Sdl_event_handler::disconnect(Dispatcher* disp)$/;"	f	class:gui::event::Sdl_event_handler
disconnect	client/old/epoll_handler.cpp	/^	void Epoll_handler::disconnect(Dispatcher* dispatcher)$/;"	f	class:event::Epoll_handler
disconnect_dispatcher	client/gui/core/event/handler.cpp	/^		void disconnect_dispatcher(Dispatcher* dispatcher)$/;"	f	namespace:gui::event
disconnect_signal	client/gui/core/event/dispatcher.h	/^					void disconnect_signal(const Ui_event event,$/;"	f	struct:gui::event::Dispatcher::Signal_queue
disconnect_signal	client/gui/core/event/dispatcher.h	/^				disconnect_signal(const Signal_function& signal,$/;"	f	class:gui::event::Dispatcher
disconnect_signal	client/gui/core/event/dispatcher.h	/^				disconnect_signal(const Signal_keyboard_function& signal,$/;"	f	class:gui::event::Dispatcher
disconnect_signal	client/gui/core/event/dispatcher.h	/^				disconnect_signal(const Signal_message_function& signal,$/;"	f	class:gui::event::Dispatcher
disconnect_signal	client/gui/core/event/dispatcher.h	/^				disconnect_signal(const Signal_mouse_function& signal,$/;"	f	class:gui::event::Dispatcher
disconnect_signal	client/gui/core/event/dispatcher.h	/^				disconnect_signal(const Signal_notification_function& signal, const Queue_position position = back_child)$/;"	f	class:gui::event::Dispatcher
disconnect_signal	client/gui/core/event/dispatcher.h	/^				disconnect_signal(const Signal_raw_event_function& signal,$/;"	f	class:gui::event::Dispatcher
disconnect_signal	client/gui/core/event/dispatcher.h	/^				disconnect_signal(const Signal_text_input_function& signal,$/;"	f	class:gui::event::Dispatcher
disconnect_signal	client/gui/core/event/dispatcher.h	/^				disconnect_signal(const Signal_touch_function& signal,$/;"	f	class:gui::event::Dispatcher
disconnect_signal_mouse_left_click	client/gui/core/event/dispatcher.cpp	/^		void disconnect_signal_mouse_left_click(Dispatcher& dispatcher,$/;"	f	namespace:gui::event
disconnected	client/net/tcp_connection.h	/^  bool disconnected() const { return state_ == kDisconnected; }$/;"	f	class:net::Tcp_connection
disconnected	server/shared/networking/tcp_socket.h	/^	bool disconnected() const { return state_ == kDisconnected; }$/;"	f	class:tcp_socket
dispatchers_	client/gui/core/event/handler.cpp	/^				std::vector<Dispatcher*> dispatchers_;$/;"	m	class:gui::event::Sdl_event_handler	file:
dispatchers_	client/old/epoll_handler.h	/^			std::vector<Dispatcher*> dispatchers_;$/;"	m	class:event::Epoll_handler
do_gameloop	client/main.cpp	/^static int do_gameloop(std::vector<std::string>& args)$/;"	f	file:
do_indent	client/log.cpp	/^	void Scope_logger::do_indent() const$/;"	f	class:lg::Scope_logger
do_log_entry	client/log.cpp	/^	void Scope_logger::do_log_entry(const Log_domain & domain, $/;"	f	class:lg::Scope_logger
do_log_exit	client/log.cpp	/^	void Scope_logger::do_log_exit()$/;"	f	class:lg::Scope_logger
do_not_log_hup	client/net/channel.h	/^	void do_not_log_hup() { log_hup_ = false; }$/;"	f	class:net::Channel
do_pending_functors	client/net/event_loop.cpp	/^void Event_loop::do_pending_functors()$/;"	f	class:net::Event_loop
do_pending_functors	server/shared/networking/event_loop.cpp	/^void event_loop::do_pending_functors()$/;"	f	class:event_loop
do_prepare_statements	server/database/database/implementation/character_database.cpp	/^void character_database_connection::do_prepare_statements()$/;"	f	class:character_database_connection
do_prepare_statements	server/database/database/implementation/hotfix_database.cpp	/^void hotfix_database_connection::do_prepare_statements()$/;"	f	class:hotfix_database_connection
do_prepare_statements	server/database/database/implementation/login_database.cpp	/^void login_database_connection::do_prepare_statements()$/;"	f	class:login_database_connection
do_prepare_statements	server/database/database/implementation/world_database.cpp	/^void world_database_connection::do_prepare_statements()$/;"	f	class:world_database_connection
do_version_check	client/version.cpp	/^bool do_version_check(const Version_info& a, VERSION_COMP_OP op, $/;"	f
docdir	client/Makefile	/^docdir = ${datarootdir}\/doc\/${PACKAGE_TARNAME}$/;"	m
docdir	client/old/Makefile	/^docdir = ${datarootdir}\/doc\/${PACKAGE_TARNAME}$/;"	m
domain_	client/log.h	/^			std::pair<const std::string, int>* domain_;$/;"	m	class:lg::Log_domain
domains	client/log.cpp	/^	static std::map<std::string, int>* domains;$/;"	m	namespace:lg	file:
dont_log	client/log.h	/^			bool dont_log(const Log_domain& domain) const$/;"	f	class:lg::Logger
double_t	server/database/database/field.h	/^	double_t,$/;"	m	class:database_field_type
double_t	server/database/database/prepared_statement.h	/^	double double_t;$/;"	m	union:prepared_statement_data_union
draw	client/events.h	/^		        virtual void draw() {}$/;"	f	class:events::Sdl_handler
draw	client/gui/core/event/handler.cpp	/^		void Sdl_event_handler::draw()$/;"	f	class:gui::event::Sdl_event_handler
draw_rect	client/sdl/rect.cpp	/^void draw_rect(const SDL_Rect& rect, const Color& color)$/;"	f
draw_text_line	client/font/sdl_ttf.cpp	/^SDL_Rect draw_text_line(SDL_Renderer* r, Texture& gui_texture, $/;"	f
dump	client/utils/json.h	/^    string_t dump(const int indent = -1,$/;"	f	class:basic_json
dvidir	client/Makefile	/^dvidir = ${docdir}$/;"	m
dvidir	client/old/Makefile	/^dvidir = ${docdir}$/;"	m
dynamic_name_	common/logging/appender_file.h	/^	bool dynamic_name_;$/;"	m	class:appender_file
e	server/process/executor.h	/^		executor& e;$/;"	m	struct:executor::call_on_exec_error
e	server/process/executor.h	/^		executor& e;$/;"	m	struct:executor::call_on_exec_setup
e	server/process/executor.h	/^		executor& e;$/;"	m	struct:executor::call_on_fork_error
e	server/process/executor.h	/^		executor& e;$/;"	m	struct:executor::call_on_fork_setup
e	server/process/executor.h	/^		executor& e;$/;"	m	struct:executor::call_on_fork_success
e	server/process/test.cpp	/^		executor& e;$/;"	m	struct:executor::call_on_exec_error	file:
e	server/process/test.cpp	/^		executor& e;$/;"	m	struct:executor::call_on_exec_setup	file:
e	server/process/test.cpp	/^		executor& e;$/;"	m	struct:executor::call_on_fork_error	file:
e	server/process/test.cpp	/^		executor& e;$/;"	m	struct:executor::call_on_fork_setup	file:
e	server/process/test.cpp	/^		executor& e;$/;"	m	struct:executor::call_on_fork_success	file:
effect_row_	client/old/mysql_pool.h	/^			long effect_row_;$/;"	m	class:db::Database
element	server/database/database/sql_operation.h	/^	sql_element_union element;$/;"	m	struct:sql_element_data
ellipse_mode_	client/font/text.h	/^			PangoEllipsizeMode ellipse_mode_;$/;"	m	class:font::Pango_text
ellipsis	client/font/constants.h	/^const std::string ellipsis = "...",$/;"	v
emplace	client/utils/json.h	/^    std::pair<iterator, bool> emplace(Args&& ... args)$/;"	f	class:basic_json
emplace_back	client/utils/json.h	/^    void emplace_back(Args&& ... args)$/;"	f	class:basic_json
empty	client/cmdln.h	/^			empty,$/;"	m	class:Commandline::Param_value_status
empty	client/cmdln.h	/^			empty,$/;"	m	class:Commandline::Value_status
empty	client/gui/core/event/dispatcher.h	/^					bool empty(const Dispatcher::Event_queue_type queue_type) const$/;"	f	struct:gui::event::Dispatcher::Signal_type
empty	client/utils/json.h	/^    bool empty() const $/;"	f	class:basic_json
empty	common/cmdline/variables_map.h	/^	bool empty() const { return v_.has_value() ? false : true; }$/;"	f	class:variable_value
empty	common/threading/producer_consumer_queue.h	/^	bool empty()$/;"	f	class:producer_consumer_queue
empty	server/shared/packets/byte_buffer.h	/^	bool empty() const { return storage_.empty(); }$/;"	f	class:byte_buffer
enable	client/hotkey/hotkey_item.h	/^			void enable() { is_disabled_ = false; }$/;"	f	class:hotkey::Hotkey_base
enable_read	client/net/channel.h	/^	void enable_read() { events_ |= read_event_; update(); }$/;"	f	class:net::Channel
enable_read	server/shared/networking/channel.h	/^	void enable_read() $/;"	f	class:channel
enable_write	client/net/channel.h	/^	void enable_write() { events_ |= write_event_; update(); }$/;"	f	class:net::Channel
enable_write	server/shared/networking/channel.h	/^	void enable_write() $/;"	f	class:channel
enabled_	server/database/logging/appender_DB.h	/^        bool enabled_; $/;"	m	class:appender_DB
encode	client/old/utils.cpp	/^Byte_buffer encode(const std::string& str)$/;"	f
encrypt	client/old/packet_protocol.h	/^	uint16_t encrypt : 1;		\/\/ 加密算法： 0 - 不使用，1 - 使用$/;"	m	struct:Frame
encrypt	client/old/stream.cpp	/^void encrypt(BYTE * buffer, WORD len, BYTE key)$/;"	f
encrypt_	server/game/server/world_tcp_socket.cpp	/^	bool encrypt_;$/;"	m	class:encryptable_packet	file:
encrypt_key_	server/game/server/world_tcp_socket.h	/^	uint8_t encrypt_key_[16];$/;"	m	class:world_tcp_socket::read_data_handler_result
encrypt_method	client/old/packet_protocol.h	/^	uint16_t encrypt_method : 3;	\/\/ 加密算法方式: 0 -RC4????$/;"	m	struct:Frame
encryptable_packet	server/game/server/world_tcp_socket.cpp	/^	encryptable_packet(const world_packet& packet, bool encrypt) : $/;"	f	class:encryptable_packet
encryptable_packet	server/game/server/world_tcp_socket.cpp	/^class encryptable_packet : public world_packet$/;"	c	file:
encryption_key_seed	server/game/server/world_tcp_socket.cpp	/^constexpr uint8_t world_tcp_socket::encryption_key_seed[16] = { $/;"	m	class:world_tcp_socket	file:
encryption_key_seed	server/game/server/world_tcp_socket.h	/^	static constexpr uint8_t encryption_key_seed[16];$/;"	m	class:world_tcp_socket
end	client/events.h	/^auto end(Reversion<T>& t)$/;"	f
end	client/serialization/ucs4_iterator_base.h	/^		        static Iterator_base end(const String_type& str)$/;"	f	class:ucs4::Iterator_base
end	client/utils/json.h	/^    const_iterator end() const { return cend(); }$/;"	f	class:basic_json
end	client/utils/json.h	/^    iterator end() $/;"	f	class:basic_json
end	common/logging/old_logging/log_buffer.h	/^	const char* end() const { return data_ + sizeof data_; }$/;"	f	class:lg::Log_buffer
end	common/utility/util.h	/^    const_iterator end() const { return storage_.end(); }$/;"	f	class:tokenizer
end_	client/json.h	/^	Iter cur_, end_;$/;"	m	class:Format::Input
endpoint	server/shared/networking/ip/endpoint.cpp	/^endpoint::endpoint() : data_()$/;"	f	class:endpoint
endpoint	server/shared/networking/ip/endpoint.cpp	/^endpoint::endpoint(const address& addr, uint16_t port_num) : data_()$/;"	f	class:endpoint
endpoint	server/shared/networking/ip/endpoint.cpp	/^endpoint::endpoint(int family, uint16_t port_num) : data_()$/;"	f	class:endpoint
endpoint	server/shared/networking/ip/endpoint.h	/^	endpoint(const endpoint& other) : data_(other.data_) {}$/;"	f	class:endpoint
endpoint	server/shared/networking/ip/endpoint.h	/^class endpoint$/;"	c
endpoint	server/shared/networking/ip/tcp.h	/^	typedef basic_endpoint<tcp> endpoint;$/;"	t	class:tcp
endpoint	server/shared/networking/ip/udp.h	/^	typedef basic_endpoint<udp> endpoint;$/;"	t	class:udp
endpoint_	server/shared/networking/acceptor.h	/^	tcp::endpoint endpoint_;$/;"	m	class:acceptor
ends_with	client/hotkey/hotkey_item.cpp	/^	static bool ends_with(const std::string& str, const char c)$/;"	f	namespace:hotkey
enqueue	server/database/database/database_worker_pool.cpp	/^void database_worker_pool<T>::enqueue(sql_operation* op)$/;"	f	class:database_worker_pool
ensure_free_space	common/utility/message_buffer.h	/^	void ensure_free_space()$/;"	f	class:message_buffer
ensure_writable_bytes	client/net/buffer.h	/^	void ensure_writable_bytes(size_t len)$/;"	f	class:net::Buffer
env	server/process/executor.h	/^	char** env;$/;"	m	struct:executor
env	server/process/test.cpp	/^	char** env;$/;"	m	struct:executor	file:
epoll	server/shared/networking/epoll.cpp	/^epoll::epoll(event_loop* loop) : $/;"	f	class:epoll
epoll	server/shared/networking/epoll.h	/^class epoll$/;"	c
epoll_	server/shared/networking/event_loop.h	/^  	std::unique_ptr<epoll> epoll_;$/;"	m	class:event_loop
epollfd_	client/net/poller.h	/^	int epollfd_;$/;"	m	class:net::Poller
epollfd_	client/old/epoll_handler.h	/^			int epollfd_;$/;"	m	class:event::Epoll_handler
epollfd_	client/old/server.h	/^		int listenfd_, epollfd_;$/;"	m	class:Server
epollfd_	server/shared/networking/epoll.h	/^	int epollfd_;$/;"	m	class:epoll
erase	client/serialization/unicode.cpp	/^std::string& erase(std::string& str, size_t start, size_t len)$/;"	f	namespace:utf8
erase	client/utils/json.h	/^    IteratorType erase(IteratorType first, IteratorType last)$/;"	f	class:basic_json
erase	client/utils/json.h	/^    IteratorType erase(IteratorType pos)$/;"	f	class:basic_json
erase	client/utils/json.h	/^    size_type erase(const typename object_t::key_type& key)$/;"	f	class:basic_json
erase	client/utils/json.h	/^    void erase(const size_type idx)$/;"	f	class:basic_json
err	client/log.cpp	/^	Logger& err()$/;"	f	namespace:lg
error	client/exceptions.h	/^	error() : message() {}$/;"	f	struct:error
error	client/exceptions.h	/^	error(const std::string& msg) : message(msg) {}$/;"	f	struct:error
error	client/exceptions.h	/^struct error : std::exception$/;"	s
error	common/debugging/errors.cpp	/^void error(const char* file, int line, const char* function, const char* message)$/;"	f
error	server/exceptions.h	/^	error() : message() {}$/;"	f	struct:error
error	server/exceptions.h	/^	error(const std::string& msg) : message(msg) {}$/;"	f	struct:error
error	server/exceptions.h	/^struct error : std::exception$/;"	s
error	server/game/server/world_tcp_socket.h	/^		error = 1;$/;"	m	class:world_tcp_socket::read_data_handler_result
error_buf	common/logging/old_logging/logging.cpp	/^ __thread char error_buf[MAX_ERROR_BUF];$/;"	m	namespace:__anon15	file:
error_callback_	client/net/channel.h	/^	Event_callback error_callback_;$/;"	m	class:net::Channel
error_callback_	server/shared/networking/channel.h	/^	event_callback error_callback_;$/;"	m	class:channel
error_except_not_found	client/filesystem.cpp	/^	static inline bool error_except_not_found(const std::error_code& ec)$/;"	f	namespace:filesystem
error_wrapper	server/shared/networking/socket_operations.cpp	/^inline ReturnType error_wrapper(ReturnType return_value, std::error_code& ec)$/;"	f
escape_string	server/database/database/database_worker_pool.cpp	/^unsigned long database_worker_pool<T>::escape_string(char* to, const char* from, unsigned long length)$/;"	f	class:database_worker_pool
escape_string	server/database/database/database_worker_pool.cpp	/^void database_worker_pool<T>::escape_string(std::string& str)$/;"	f	class:database_worker_pool
escape_text	client/font/pango/escape.h	/^	inline std::string escape_text(const std::string& text)$/;"	f	namespace:font
event	client/gui/core/event/dispatcher.cpp	/^	namespace event$/;"	n	namespace:gui	file:
event	client/gui/core/event/dispatcher.h	/^	namespace event$/;"	n	namespace:gui
event	client/gui/core/event/dispatcher_private.h	/^	namespace event$/;"	n	namespace:gui
event	client/gui/core/event/distributor.cpp	/^	namespace event$/;"	n	namespace:gui	file:
event	client/gui/core/event/distributor.h	/^	namespace event$/;"	n	namespace:gui
event	client/gui/core/event/handler.cpp	/^	namespace event$/;"	n	namespace:gui	file:
event	client/gui/core/event/handler.h	/^	namespace event$/;"	n	namespace:gui
event	client/gui/core/event/message.h	/^	namespace event$/;"	n	namespace:gui
event	client/old/dispatcher.cpp	/^namespace event$/;"	n	file:
event	client/old/dispatcher.h	/^namespace event$/;"	n
event	client/old/epoll_handler.cpp	/^namespace event$/;"	n	file:
event	client/old/epoll_handler.h	/^namespace event$/;"	n
event	client/old/event.cpp	/^namespace event$/;"	n	file:
event	client/old/event.h	/^namespace event$/;"	n
event	client/old/listen_handler.cpp	/^namespace event$/;"	n	file:
event_	client/sdl/userevent.h	/^			SDL_UserEvent event_;$/;"	m	class:sdl::User_event
event_callback	server/shared/networking/channel.h	/^	typedef std::function<void()> event_callback;$/;"	t	class:channel
event_handling	client/net/event_loop.h	/^	bool event_handling() const { return event_handling_; }$/;"	f	class:net::Event_loop
event_handling	server/shared/networking/event_loop.h	/^	bool event_handling() const { return event_handling_; }$/;"	f	class:event_loop
event_handling_	client/net/channel.h	/^	bool event_handling_;$/;"	m	class:net::Channel
event_handling_	client/net/event_loop.h	/^  	bool event_handling_; \/* atomic *\/$/;"	m	class:net::Event_loop
event_handling_	server/shared/networking/channel.h	/^	bool event_handling_;$/;"	m	class:channel
event_handling_	server/shared/networking/event_loop.h	/^  	bool event_handling_; \/* atomic *\/$/;"	m	class:event_loop
event_list	server/shared/networking/epoll.h	/^	typedef std::vector<struct epoll_event> event_list;$/;"	t	class:epoll
event_list_size	server/shared/networking/epoll.h	/^	static const int event_list_size = 16;$/;"	m	class:epoll
event_loop	client/old/server.cpp	/^void Server::event_loop()$/;"	f	class:Server
event_loop	server/shared/networking/event_loop.cpp	/^event_loop::event_loop() : looping_(false), quit_(false), $/;"	f	class:event_loop
event_loop	server/shared/networking/event_loop.h	/^class event_loop$/;"	c
event_loop_	common/logging/log.h	/^	event_loop* event_loop_;$/;"	m	class:log
event_loop_thread	server/shared/networking/event_loop_thread.cpp	/^event_loop_thread::event_loop_thread() :$/;"	f	class:event_loop_thread
event_loop_thread	server/shared/networking/event_loop_thread.h	/^class event_loop_thread$/;"	c
event_loop_threadpool	server/shared/networking/event_loop_threadpool.cpp	/^event_loop_threadpool::event_loop_threadpool(event_loop* base_loop) : $/;"	f	class:event_loop_threadpool
event_loop_threadpool	server/shared/networking/event_loop_threadpool.h	/^class event_loop_threadpool$/;"	c
events	client/events.cpp	/^namespace events$/;"	n	file:
events	client/events.h	/^namespace events$/;"	n
events	client/net/channel.h	/^	int events() const { return events_; }$/;"	f	class:net::Channel
events	server/shared/networking/channel.h	/^	int events() const { return events_; }$/;"	f	class:channel
events_	client/net/channel.h	/^	int events_;$/;"	m	class:net::Channel
events_	client/net/poller.h	/^	Event_list events_;$/;"	m	class:net::Poller
events_	client/old/epoll_handler.h	/^			epoll_event* events_;$/;"	m	class:event::Epoll_handler
events_	client/old/server.h	/^		epoll_event events_[64];$/;"	m	class:Server
events_	server/shared/networking/channel.h	/^	int events_;$/;"	m	class:channel
events_	server/shared/networking/epoll.h	/^	event_list events_;$/;"	m	class:epoll
events_to_string	client/net/channel.cpp	/^std::string Channel::events_to_string() const$/;"	f	class:net::Channel
events_to_string	client/net/channel.cpp	/^std::string Channel::events_to_string(int fd, int ev)$/;"	f	class:net::Channel
events_to_string	server/shared/networking/channel.cpp	/^std::string channel::events_to_string(int fd, int ev)$/;"	f	class:channel
exclusive	client/cmdln.cpp	/^int Commandline::exclusive = 0x0001;$/;"	m	class:Commandline	file:
exclusive	client/cmdln.h	/^		static int exclusive;$/;"	m	class:Commandline
exclusive_option	client/cmdln.h	/^			exclusive_option,$/;"	m	class:Commandline::Parse_status
exclusive_option_	client/cmdln.h	/^		bool exclusive_option_;$/;"	m	class:Commandline
exe	server/process/executor.h	/^	const char* exe;$/;"	m	struct:executor
exe	server/process/test.cpp	/^	const char* exe;$/;"	m	struct:executor	file:
exec_prefix	client/Makefile	/^exec_prefix = ${prefix}$/;"	m
exec_prefix	client/old/Makefile	/^exec_prefix = ${prefix}$/;"	m
execute	server/database/database/adhoc_statement.cpp	/^bool basic_statement_task::execute()$/;"	f	class:basic_statement_task
execute	server/database/database/database_worker_pool.cpp	/^void database_worker_pool<T>::execute(const char* sql)$/;"	f	class:database_worker_pool
execute	server/database/database/database_worker_pool.cpp	/^void database_worker_pool<T>::execute(prepared_statement<T>* stmt)$/;"	f	class:database_worker_pool
execute	server/database/database/mysql_connection.cpp	/^bool mysql_connection::execute(const char* sql)$/;"	f	class:mysql_connection
execute	server/database/database/mysql_connection.cpp	/^bool mysql_connection::execute(prepared_statement_base* stmt)$/;"	f	class:mysql_connection
execute	server/database/database/prepared_statement.cpp	/^bool prepared_statement_task::execute()$/;"	f	class:prepared_statement_task
execute	server/database/database/query_holder.cpp	/^bool sql_query_holder_task::execute()$/;"	f	class:sql_query_holder_task
execute	server/database/database/transaction.cpp	/^bool transaction_task::execute()$/;"	f	class:transaction_task
execute	server/process/executor.h	/^child execute(Args&&... args)$/;"	f
execute	server/process/test.cpp	/^child execute(Args&&... args)$/;"	f
execute_hotkey	client/gui/core/event/dispatcher.cpp	/^		bool Dispatcher::execute_hotkey(const hotkey::Hotkey_command id)$/;"	f	class:gui::event::Dispatcher
execute_native_thread_routine	client/thread/thread.cpp	/^static void* execute_native_thread_routine(void* p)$/;"	f	file:
execute_non_query	client/old/mysql_pool.cpp	/^	bool Connection_pool::execute_non_query(const std::string& sql)$/;"	f	class:db::Connection_pool
execute_non_query	client/old/mysql_pool.cpp	/^	bool Database::execute_non_query(const std::string& sql)$/;"	f	class:db::Database
execute_or_append	server/database/database/database_worker_pool.cpp	/^void database_worker_pool<T>::execute_or_append(sql_transaction<T>& trans, const char* sql)$/;"	f	class:database_worker_pool
execute_or_append	server/database/database/database_worker_pool.cpp	/^void database_worker_pool<T>::execute_or_append(sql_transaction<T>& trans, prepared_statement<T>* stmt)$/;"	f	class:database_worker_pool
execute_query	client/old/mysql_pool.cpp	/^	Query Connection_pool::execute_query(const std::string& sql)$/;"	f	class:db::Connection_pool
execute_query	client/old/mysql_pool.cpp	/^	Query Database::execute_query(const std::string& sql)$/;"	f	class:db::Database
execute_query	client/old/mysql_pool.cpp	/^	bool Connection_pool::execute_query(const std::string& sql, Query& query)$/;"	f	class:db::Connection_pool
execute_query	client/old/mysql_pool.cpp	/^	bool Database::execute_query(const std::string& sql, Query& query)$/;"	f	class:db::Database
execute_transaction	server/database/database/mysql_connection.cpp	/^int mysql_connection::execute_transaction(std::shared_ptr<transaction_base> transaction)$/;"	f	class:mysql_connection
executed_	server/database/database/query_holder.h	/^	bool executed_;$/;"	m	class:sql_query_holder_task
executor	server/process/executor.h	/^	executor() : exe(0), cmd_line(0), env(0) {}$/;"	f	struct:executor
executor	server/process/executor.h	/^struct executor$/;"	s
executor	server/process/test.cpp	/^	executor() : exe(0), cmd_line(0), env(0) {}$/;"	f	struct:executor
executor	server/process/test.cpp	/^struct executor$/;"	s	file:
exiting_	client/net/event_loop_thread.h	/^	bool exiting_;$/;"	m	class:net::Event_loop_thread
exiting_	server/shared/networking/event_loop_thread.h	/^	bool exiting_;$/;"	m	class:event_loop_thread
exp	common/cryptography/big_number.cpp	/^big_number big_number::exp(big_number const& bn)$/;"	f	class:big_number
expect	client/json.h	/^	bool expect(const int expected) $/;"	f	class:Format::Input
expiration	client/net/timer.h	/^	Timestamp expiration() const  { return expiration_; }$/;"	f	class:net::Timer
expiration	server/shared/networking/timer.h	/^	Timestamp expiration() const  { return expiration_; }$/;"	f	class:timer
expiration_	client/net/timer.h	/^	Timestamp expiration_;$/;"	m	class:net::Timer
expiration_	server/shared/networking/timer.h	/^	Timestamp expiration_;$/;"	m	class:timer
f	client/events.cpp	/^		const std::function<void(void)>& f;$/;"	m	struct:__anon30::Invoked_function_data	file:
factory_	client/old/connection_pool.h	/^		Mysql_connection_factory* factory_;$/;"	m	class:Connection_pool
factory_	client/old/mysql_pool.h	/^			Connection_factory factory_;$/;"	m	class:db::Connection_pool
fadingout_time	client/sound.cpp	/^	int fadingout_time = 5000;$/;"	m	namespace:__anon27	file:
fake_interactive	client/video.cpp	/^bool fake_interactive = false;$/;"	v
fake_screen_	client/video.h	/^		bool fake_screen_;$/;"	m	class:Video
faked	client/video.h	/^		bool faked() const { return fake_screen_; }$/;"	f	class:Video
family	client/net/inet_address.h	/^	sa_family_t family() const { return addr_.sin_family; }$/;"	f	class:net::Inet_address
family	server/shared/networking/ip/tcp.h	/^	int family() const { return family_; }$/;"	f	class:tcp
family	server/shared/networking/ip/udp.h	/^	int family() const { return family_; }$/;"	f	class:udp
family_	server/shared/networking/ip/tcp.h	/^	int family_;$/;"	m	class:tcp
family_	server/shared/networking/ip/udp.h	/^	int family_;$/;"	m	class:udp
family_order_light	client/font/font_config.cpp	/^	std::string family_order_light;$/;"	m	namespace:font	file:
family_order_mono	client/font/font_config.cpp	/^	std::string family_order_mono;$/;"	m	namespace:font	file:
family_order_sans	client/font/font_config.cpp	/^	std::string family_order_sans;$/;"	m	namespace:font	file:
family_order_script	client/font/font_config.cpp	/^	std::string family_order_script;$/;"	m	namespace:font	file:
fatal	common/debugging/errors.cpp	/^void fatal(const char* file, int line, const char* function, const char* message, ...)$/;"	f
fd	client/net/channel.h	/^	int fd() const { return fd_; }$/;"	f	class:net::Channel
fd	client/old/packet.h	/^			int		fd ;$/;"	m	union:Packet::Params
fd	client/old/server.h	/^	int fd;$/;"	m	struct:Descriptor
fd_	client/net/channel.h	/^	const int  fd_;$/;"	m	class:net::Channel
fd_	client/net/socket.h	/^	const int fd_;$/;"	m	class:net::Socket
fd_	client/old/listen_handler.h	/^		Socket& fd_;$/;"	m	class:Listen_handler
fd_	server/process/bind_stderr.h	/^	const int fd_;$/;"	m	class:bind_stderr
fd_	server/process/bind_stdin.h	/^	const int fd_;$/;"	m	class:bind_stdin
fd_	server/process/bind_stdout.h	/^	int fd_;$/;"	m	class:bind_stdout
fd_	server/process/file_descriptor.h	/^	int fd_;$/;"	m	class:file_descriptor
fd_	server/process/test.cpp	/^	const int fd_;$/;"	m	class:bind_stderr	file:
fd_	server/process/test.cpp	/^	const int fd_;$/;"	m	class:bind_stdin	file:
fd_	server/process/test.cpp	/^	int fd_;$/;"	m	class:bind_stdout	file:
fd_	server/shared/networking/socket.h	/^	int fd_;$/;"	m	class:socket
fetch	server/database/database/query_result.cpp	/^field* prepared_result_set::fetch() const$/;"	f	class:prepared_result_set
fetch	server/database/database/query_result.h	/^	field* fetch() const { return current_row_; }$/;"	f	class:result_set
field	server/database/database/field.cpp	/^field::field()$/;"	f	class:field
field	server/database/database/field.h	/^class field$/;"	c
field_	client/old/mysql_pool.h	/^			MYSQL_FIELD* field_;$/;"	m	class:db::Query
field_count_	client/old/mysql_pool.h	/^			int field_count_;$/;"	m	class:db::Query
field_count_	server/database/database/query_result.h	/^	uint32_t field_count_;$/;"	m	class:prepared_result_set
field_count_	server/database/database/query_result.h	/^	uint32_t field_count_;$/;"	m	class:result_set
fields_	server/database/database/query_result.h	/^	MYSQL_FIELD* fields_;$/;"	m	class:result_set
file	client/image.h	/^				file,$/;"	m	class:image::Locator::Type
file	client/sound.cpp	/^			std::string file;$/;"	m	class:__anon28::Sound_cache_chunk	file:
file_	client/config.h	/^		std::string file_;$/;"	m	class:Config
file_	common/logging/old_logging/log_file.h	/^	std::unique_ptr<Append_file> file_;$/;"	m	class:lg::Log_file
file_	server/game/server/protocol/packet_log.h	/^	FILE* file_;$/;"	m	class:packet_log
file_descriptor	server/process/file_descriptor.cpp	/^file_descriptor::file_descriptor(const std::string& path) : fd_(-1)$/;"	f	class:file_descriptor
file_descriptor	server/process/file_descriptor.h	/^	file_descriptor(const file_descriptor& fd) : fd_(fd.fd), close_on_exit_(fd.close_on_exit_) {}$/;"	f	class:file_descriptor
file_descriptor	server/process/file_descriptor.h	/^	file_descriptor(const int fd, bool close_on_exit = true) : $/;"	f	class:file_descriptor
file_descriptor	server/process/file_descriptor.h	/^	file_descriptor(file_descriptor&& fd) : $/;"	f	class:file_descriptor
file_descriptor	server/process/file_descriptor.h	/^class file_descriptor$/;"	c
file_exists	client/filesystem.cpp	/^	bool file_exists(const std::string& name)$/;"	f	namespace:filesystem
file_exists	client/filesystem.cpp	/^	static bool file_exists(const fs::path& fpath)$/;"	f	namespace:filesystem
file_exists	client/filesystem.cpp	/^int file_exists(const std::string& file)$/;"	f
file_path	client/sound_music_track.h	/^			const std::string& file_path() const { return file_path_; }$/;"	f	class:sound::Music_track
file_path_	client/sound_music_track.h	/^			std::string file_path_;$/;"	m	class:sound::Music_track
file_size_	common/logging/appender_file.h	/^	std::atomic<uint64_t> file_size_;$/;"	m	class:appender_file
filename	client/image.h	/^				std::string filename;$/;"	m	struct:image::Locator::Value
filename	common/configuration/config.cpp	/^static std::string filename;$/;"	v	file:
filename_	common/configuration/ini_parser.h	/^	std::string filename_;$/;"	m	class:ini_parser
filename_	common/logging/appender_file.h	/^	std::string filename_;$/;"	m	class:appender_file
filename_	common/logging/old_logging/async_log.h	/^	std::string filename_;$/;"	m	class:lg::Async_log
filesystem	client/filesystem.cpp	/^namespace filesystem$/;"	n	file:
filesystem	client/filesystem.h	/^namespace filesystem$/;"	n
fill	client/sdl/window.cpp	/^void Window::fill(Uint8 r, Uint8 g, Uint8 b, Uint8 a)$/;"	f	class:Window
fill_active_channels	client/net/poller.cpp	/^void Poller::fill_active_channels(int num_events,$/;"	f	class:net::Poller
fill_active_channels	server/shared/networking/epoll.cpp	/^void epoll::fill_active_channels(int num_events,$/;"	f	class:epoll
fill_file_list_recursively	server/database/update/update_fetcher.cpp	/^void update_fetcher::fill_file_list_recursively(const path& path, locale_file_storage& storage, const state state, const uint32_t depth) const$/;"	f	class:update_fetcher
fill_rect	client/sdl/rect.cpp	/^void fill_rect(const SDL_Rect& rect, const Color& color)$/;"	f
fill_renderer_rect	client/sdl/rect.h	/^inline void fill_renderer_rect(SDL_Renderer* renderer, const SDL_Rect& rect)$/;"	f
final	client/gui/core/event/handler.cpp	/^				virtual void draw() override final;$/;"	m	class:gui::event::Sdl_event_handler	file:
final	client/thread/condition_variable.cpp	/^struct Notifier final : At_thread_exit_elt$/;"	s	file:
final	server/game/server/packet.h	/^	const world_packet* write() override final;$/;"	m	struct:world_packets::client_packet
final	server/game/server/packet.h	/^	void read() override final;$/;"	m	struct:world_packets::server_packet
finalize	client/events.cpp	/^		void finalize() { \/* Add things as necessary *\/ }$/;"	f	namespace:events
finalize	client/old/mysql_pool.cpp	/^	void Query::finalize()$/;"	f	class:db::Query
finalize	client/sdl/texture.cpp	/^void Texture::finalize()$/;"	f	class:Texture
find	client/font/text_cache.cpp	/^Text_surface& Text_cache::find(const Text_surface& t)$/;"	f	class:Text_cache
find	client/utils/json.h	/^    const_iterator find(KeyT&& key) const$/;"	f	class:basic_json
find	client/utils/json.h	/^    iterator find(KeyT&& key)$/;"	f	class:basic_json
find	common/cmdline/option_description.cpp	/^const option_description* options_description::find(const std::string& name) const$/;"	f	class:options_description
find_cmd_option	client/cmdln.cpp	/^const Cmd_option* Commandline::find_cmd_option($/;"	f	class:Commandline
find_crlf	client/net/buffer.h	/^	const char* find_crlf() const$/;"	f	class:net::Buffer
find_crlf	client/net/buffer.h	/^	const char* find_crlf(const char* start) const$/;"	f	class:net::Buffer
find_eol	client/net/buffer.h	/^	const char* find_eol() const$/;"	f	class:net::Buffer
find_eol	client/net/buffer.h	/^	const char* find_eol(const char* start) const$/;"	f	class:net::Buffer
find_track	client/sound.cpp	/^		find_track(const sound::Music_track& track)$/;"	f	namespace:__anon28
finish	common/logging/old_logging/logging.cpp	/^void Logger::finish(const std::string& file, int line)$/;"	f	class:lg::Logger
finish_option	common/cmdline/cmdline.cpp	/^void cmdline::finish_option(option& opt, std::vector<std::string>& other_tokens, $/;"	f	class:cmdline
finished	client/events.cpp	/^		bool finished;$/;"	m	struct:__anon30::Invoked_function_data	file:
fire	client/gui/core/event/dispatcher.cpp	/^		bool Dispatcher::fire(const Ui_event event, Widget& target)$/;"	f	class:gui::event::Dispatcher
fire	client/gui/core/event/dispatcher.cpp	/^		bool Dispatcher::fire(const Ui_event event, Widget& target, $/;"	f	class:gui::event::Dispatcher
fire	client/gui/core/event/dispatcher.cpp	/^		bool Dispatcher::fire(const Ui_event event, Widget& target, void*)$/;"	f	class:gui::event::Dispatcher
fire	client/gui/core/event/dispatcher.cpp	/^		bool Dispatcher::fire(const Ui_event event, Widget& target,$/;"	f	class:gui::event::Dispatcher
fire_event	client/gui/core/event/dispatcher_private.h	/^			inline bool fire_event(const Ui_event event,$/;"	f	namespace:gui::event::implementation
fire_event	client/gui/core/event/dispatcher_private.h	/^		fire_event(const Ui_event event, Dispatcher& d, Widget* w, F&&... params)$/;"	f	namespace:gui::event
fire_event_double_click	client/gui/core/event/dispatcher_private.h	/^		inline bool fire_event_double_click(Dispatcher* dsp, Widget* wgt, F&&... params)$/;"	f	namespace:gui::event
first	client/cmdln.h	/^			first,$/;"	m	class:Commandline::Find_option_mode
first_from_left	client/cmdln.h	/^			first_from_left,$/;"	m	class:Commandline::Find_option_mode
flag	client/old/packet_protocol.h	/^	Frame flag;				\/\/帧标志位$/;"	m	struct:Packet_head
flags	client/cmdln.cpp	/^	int flags;$/;"	m	struct:Cmd_option	file:
flags_	common/logging/appender.h	/^	appender_flags flags_;$/;"	m	class:appender
flatten	client/utils/json.h	/^    basic_json flatten() const$/;"	f	class:basic_json
flip_locked_	client/video.h	/^		int flip_locked_;$/;"	m	class:Video
float_t	server/database/database/field.h	/^	float_t,$/;"	m	class:database_field_type
float_t	server/database/database/prepared_statement.h	/^	float float_t;$/;"	m	union:prepared_statement_data_union
flush	client/image.cpp	/^			void flush() { content_.clear(); }$/;"	f	class:image::Cache_type
flush	common/logging/old_logging/log_file.cpp	/^void Append_file::flush()$/;"	f	class:lg::Append_file
flush	common/logging/old_logging/log_file.cpp	/^void Log_file::flush()$/;"	f	class:lg::Log_file
flush_bits	server/shared/packets/byte_buffer.h	/^	void flush_bits()$/;"	f	class:byte_buffer
flush_interval_	common/logging/old_logging/async_log.h	/^	const int flush_interval_ = 3;$/;"	m	class:lg::Async_log
flush_interval_	common/logging/old_logging/log_file.h	/^	const int flush_interval_;$/;"	m	class:lg::Log_file
focus_	client/gui/core/event/distributor.h	/^				Widget* focus_;$/;"	m	class:gui::event::Mouse_button
focus_handler	client/events.cpp	/^        void focus_handler(const Sdl_handler* ptr)$/;"	f	namespace:events
focused_handler	client/events.h	/^	        Handler_list::iterator focused_handler; \/\/ 重点处理程序$/;"	m	struct:events::Context
font	client/font/error.h	/^namespace font$/;"	n
font	client/font/font_config.cpp	/^namespace font$/;"	n	file:
font	client/font/font_config.h	/^namespace font$/;"	n
font	client/font/font_options.h	/^namespace font$/;"	n
font	client/font/pango/escape.h	/^namespace font$/;"	n
font	client/font/pango/font.h	/^namespace font$/;"	n
font	client/font/pango/hyperlink.h	/^namespace font$/;"	n
font	client/font/pango/stream_ops.h	/^namespace font$/;"	n
font	client/font/sdl_ttf.cpp	/^	TTF_Font* font;$/;"	m	struct:TTF_record	file:
font	client/font/standard_colors.h	/^namespace font$/;"	n
font	client/font/subset_descriptor.h	/^namespace font$/;"	n
font	client/font/text.cpp	/^namespace font$/;"	n	file:
font	client/font/text.h	/^namespace font$/;"	n
font_	client/font/pango/font.h	/^			PangoFontDescription* font_;$/;"	m	class:font::Pango_font
font_class_	client/font/text.h	/^			font::Family_class font_class_;$/;"	m	class:font::Pango_text
font_manager_	client/game_launcher.h	/^		font::Manager font_manager_;$/;"	m	class:Game_launcher
font_names	client/font/sdl_ttf.cpp	/^static std::vector<std::string> font_names;$/;"	v	file:
font_scaled	client/preferences/general.cpp	/^int font_scaled(int size)$/;"	f
font_scaling	client/preferences/general.cpp	/^int font_scaling()$/;"	f
font_size_	client/font/text.h	/^			unsigned font_size_;$/;"	m	class:font::Pango_text
font_size_	client/font/text_surface.h	/^		int font_size_;$/;"	m	class:Text_surface
font_style_	client/font/text.h	/^			FONT_STYLE font_style_;$/;"	m	class:font::Pango_text
font_table	client/font/sdl_ttf.cpp	/^static std::map<Font_id, TTF_record> font_table;$/;"	v	file:
for_each	server/process/executor.h	/^void for_each(F&& f, T&& t)$/;"	f
for_each	server/process/executor.h	/^void for_each(F&& f, T&& t, Args&&... args)$/;"	f
for_each	server/process/test.cpp	/^void for_each(F&& f, T&& t)$/;"	f
for_each	server/process/test.cpp	/^void for_each(F&& f, T&& t, Args&&... args)$/;"	f
force_close	client/net/tcp_connection.cpp	/^void Tcp_connection::force_close()$/;"	f	class:net::Tcp_connection
force_close_in_loop	client/net/tcp_connection.cpp	/^void Tcp_connection::force_close_in_loop()$/;"	f	class:net::Tcp_connection
force_close_with_delay	client/net/tcp_connection.cpp	/^void Tcp_connection::force_close_with_delay(double seconds)$/;"	f	class:net::Tcp_connection
foreground	client/tooltips.cpp	/^	Surface foreground;$/;"	m	struct:Tooltip	file:
foreground_color_	client/font/text.h	/^			Color foreground_color_;$/;"	m	class:font::Pango_text
format	client/sdl/texture.h	/^			Uint32 format;$/;"	m	struct:Texture::Info
format_as_link	client/font/pango/hyperlink.h	/^	inline std::string format_as_link(const std::string& link, Color color)$/;"	f	namespace:font
format_description	common/cmdline/option_description.cpp	/^void format_description(std::ostream& os, const std::string& description, $/;"	f	namespace:__anon12
format_name	common/cmdline/option_description.cpp	/^std::string option_description::format_name() const$/;"	f	class:option_description
format_one	common/cmdline/option_description.cpp	/^void format_one(std::ostream& os, const option_description& option, uint32_t first_column_width,$/;"	f	namespace:__anon12
format_paragraph	common/cmdline/option_description.cpp	/^void format_paragraph(std::ostream& os, std::string par, uint32_t indent, uint32_t line_length)$/;"	f	namespace:__anon12
format_parameter	common/cmdline/option_description.cpp	/^std::string option_description::format_parameter() const$/;"	f	class:option_description
format_time	common/logging/old_logging/logging.cpp	/^const char* Logger::format_time(time_t time)$/;"	f	class:lg::Logger
format_version	server/game/server/protocol/packet_log.cpp	/^	uint16_t format_version;$/;"	m	struct:log_header	file:
former	common/define.h	/^enum former$/;"	g
fp_	common/logging/old_logging/log_file.h	/^	FILE* fp_;$/;"	m	class:lg::Append_file
fps	client/commandline_options.h	/^		bool fps;$/;"	m	class:Commandline_options
frame_buffer	client/video.cpp	/^Texture frame_buffer = nullptr;$/;"	v
free_surface	client/sdl/surface.cpp	/^void Surface::free_surface()$/;"	f	class:Surface
from_argb_bytes	client/color.cpp	/^Color Color::from_argb_bytes(uint32_t c)$/;"	f	class:Color
from_bson	client/utils/json.h	/^    static basic_json from_bson(A1 && a1, A2 && a2,$/;"	f	class:basic_json
from_bson	client/utils/json.h	/^    static basic_json from_bson(detail::input_adapter&& i,$/;"	f	class:basic_json
from_cbor	client/utils/json.h	/^    static basic_json from_cbor(A1 && a1, A2 && a2,$/;"	f	class:basic_json
from_cbor	client/utils/json.h	/^    static basic_json from_cbor(detail::input_adapter&& i,$/;"	f	class:basic_json
from_hex_string	client/color.cpp	/^Color Color::from_hex_string(const std::string& c)$/;"	f	class:Color
from_msgpack	client/utils/json.h	/^    static basic_json from_msgpack(A1 && a1, A2 && a2,$/;"	f	class:basic_json
from_msgpack	client/utils/json.h	/^    static basic_json from_msgpack(detail::input_adapter&& i,$/;"	f	class:basic_json
from_rgb_string	client/color.cpp	/^Color Color::from_rgb_string(const std::string& c)$/;"	f	class:Color
from_rgba_bytes	client/color.cpp	/^Color Color::from_rgba_bytes(uint32_t c)$/;"	f	class:Color
from_rgba_string	client/color.cpp	/^Color Color::from_rgba_string(const std::string& c)$/;"	f	class:Color
from_ubjson	client/utils/json.h	/^    static basic_json from_ubjson(A1 && a1, A2 && a2,$/;"	f	class:basic_json
from_ubjson	client/utils/json.h	/^    static basic_json from_ubjson(detail::input_adapter&& i,$/;"	f	class:basic_json
from_unix_time	common/utility/timestamp.h	/^	static Timestamp from_unix_time(time_t t)$/;"	f	class:Timestamp
from_unix_time	common/utility/timestamp.h	/^	static Timestamp from_unix_time(time_t t, int microseconds)$/;"	f	class:Timestamp
front	client/utils/json.h	/^    const_reference front() const { return *cbegin(); }$/;"	f	class:basic_json
front	client/utils/json.h	/^    reference front() { return *begin(); }$/;"	f	class:basic_json
front_child	client/gui/core/event/dispatcher.h	/^					front_child,$/;"	e	enum:gui::event::Dispatcher::Queue_postion
front_post_child	client/gui/core/event/dispatcher.h	/^					front_post_child,$/;"	e	enum:gui::event::Dispatcher::Queue_postion
front_pre_child	client/gui/core/event/dispatcher.h	/^					front_pre_child,$/;"	e	enum:gui::event::Dispatcher::Queue_postion
fs_	common/configuration/ini_parser.h	/^	std::fstream fs_;$/;"	m	class:ini_parser
full_screen	client/sdl/window.cpp	/^void Window::full_screen()$/;"	f	class:Window
fullscreen	client/commandline_options.h	/^		bool fullscreen;$/;"	m	class:Commandline_options
func	client/thread/thread.h	/^			Callable func;$/;"	m	struct:Thread::State_impl
functor	server/shared/networking/event_loop.h	/^	typedef std::function<void()> functor;$/;"	t	class:event_loop
g	client/color.h	/^	uint8_t r, g, b, a; \/\/ red value, green value, blue value, alpha value$/;"	m	struct:Color
g_log_level	common/logging/old_logging/logging.cpp	/^Logger::Log_level g_log_level = initLogLevel();$/;"	m	namespace:lg	file:
g_output	common/logging/old_logging/logging.cpp	/^Logger::Output_func g_output = defaultOutput;$/;"	m	namespace:lg	file:
game_config	client/game_config.cpp	/^namespace game_config$/;"	n	file:
game_config	client/game_config.h	/^namespace game_config$/;"	n
game_program_dir	client/game_config.cpp	/^	std::string game_program_dir;$/;"	m	namespace:game_config	file:
game_terminate_handler	client/main.cpp	/^static void game_terminate_handler(int) { exit(0); }$/;"	f	file:
gen_	client/random.cpp	/^			std::mt19937 gen_;$/;"	m	class:__anon23::Rng_default	file:
general	client/log.cpp	/^	Log_domain& general()$/;"	f	namespace:lg
generator	client/random.cpp	/^	Rng* generator = &Rng::default_instance();$/;"	m	namespace:randomness	file:
get	client/cursor.cpp	/^	Cursor_type get()$/;"	f	namespace:cursor
get	client/font/pango/font.h	/^			PangoFontDescription* get() { return font_; }$/;"	f	class:font::Pango_font
get	client/json.h	/^	Value &get(const std::string &key)$/;"	f	class:Format::Value
get	client/json.h	/^	const T &get() const$/;"	f	class:Format::Value
get	client/json.h	/^	const Value &get(const size_t idx) const$/;"	f	class:Format::Value
get	client/json.h	/^	const Value &get(const std::string &key) const$/;"	f	class:Format::Value
get	client/old/byte_buffer.h	/^		T get()$/;"	f	class:Byte_buffer
get	client/old/byte_buffer.h	/^		T get(size_t pos) const$/;"	f	class:Byte_buffer
get	client/sdl/surface.h	/^		SDL_Surface* get() const { return surface_; }$/;"	f	class:Surface
get	client/utils/json.h	/^    BasicJsonType get() const$/;"	f	class:basic_json
get	client/utils/json.h	/^    ValueType get() const (($/;"	f	class:basic_json
get	client/utils/json.h	/^    basic_json get() const$/;"	f	class:basic_json
get_active_size	common/utility/message_buffer.h	/^	size_type get_active_size() const { return wpos_ - rpos_; }$/;"	f	class:message_buffer
get_addr	client/net/inet_address.h	/^			sockaddr_in get_addr() const { return addr_; }$/;"	f	class:net::Inet_address
get_age	client/old/player.h	/^		int get_age() const { return age_; }$/;"	f	class:Character
get_all_dispatchers	client/gui/core/event/handler.cpp	/^		std::vector<Dispatcher*>& get_all_dispatchers()$/;"	f	namespace:gui::event
get_all_loops	client/net/event_loop_threadpool.cpp	/^std::vector<Event_loop*> Event_loop_threadpool::get_all_loops()$/;"	f	class:net::Event_loop_threadpool
get_all_loops	server/shared/networking/event_loop_threadpool.cpp	/^std::vector<event_loop*> event_loop_threadpool::get_all_loops()$/;"	f	class:event_loop_threadpool
get_allocator	client/utils/json.h	/^    static allocator_type get_allocator()$/;"	f	class:basic_json
get_appender_by_name	common/logging/log.cpp	/^appender* log::get_appender_by_name(std::string const& name)$/;"	f	class:log
get_application_send_buffer_size	server/game/server/world_tcp_socket_mgr.h	/^	size_t get_application_send_buffer_size() const { return socket_application_send_buffer_size_; }$/;"	f	class:world_tcp_socket_mgr
get_arg_count	client/cmdln.h	/^		int get_arg_count() const { return argument_list_.size(); }$/;"	f	class:Commandline
get_array	client/json.h	/^	const Array& get_array() const $/;"	f	class:Format::Value
get_array_item	client/config.cpp	/^Config::Node* Config::get_array_item(Config::Node* array, int item)$/;"	f	class:Config
get_base_file	server/database/update/db_update.cpp	/^std::string db_updater<character_database_connection>::get_base_file()$/;"	f	class:db_updater
get_base_file	server/database/update/db_update.cpp	/^std::string db_updater<hotfix_database_connection>::get_base_file()$/;"	f	class:db_updater
get_base_file	server/database/update/db_update.cpp	/^std::string db_updater<login_database_connection>::get_base_file()$/;"	f	class:db_updater
get_base_file	server/database/update/db_update.cpp	/^std::string db_updater<world_database_connection>::get_base_file()$/;"	f	class:db_updater
get_base_location_type	server/database/update/db_update.cpp	/^base_location db_updater<T>::get_base_location_type()$/;"	f	class:db_updater
get_base_location_type	server/database/update/db_update.cpp	/^base_location db_updater<hotfix_database_connection>::get_base_location_type()$/;"	f	class:db_updater
get_base_location_type	server/database/update/db_update.cpp	/^base_location db_updater<world_database_connection>::get_base_location_type()$/;"	f	class:db_updater
get_base_pointer	common/utility/message_buffer.h	/^	uint8_t* get_base_pointer() { return storage_.data(); }$/;"	f	class:message_buffer
get_binary	server/database/database/field.cpp	/^std::vector<uint8_t> field::get_binary() const$/;"	f	class:field
get_binary_file_location	client/filesystem.cpp	/^	std::string get_binary_file_location(const std::string& type,$/;"	f	namespace:filesystem
get_binary_paths	client/filesystem.cpp	/^	const std::vector<std::string>& get_binary_paths($/;"	f	namespace:filesystem
get_bind	server/database/database/mysql_prepared_statement.h	/^	MYSQL_BIND* get_bind() { return bind_; }$/;"	f	class:mysql_prepared_statement
get_bool	server/database/database/field.h	/^	bool get_bool() const { return get_uint8() == 1 ? true : false; }$/;"	f	class:field
get_boolean	client/json.h	/^	const bool& get_boolean() const $/;"	f	class:Format::Value
get_buffer_size	common/utility/message_buffer.h	/^	size_type get_buffer_size() const { return storage_.size(); }$/;"	f	class:message_buffer
get_center_x	client/image.h	/^			int get_center_x() const { return val_.center_x_; }$/;"	f	class:image::Locator
get_center_y	client/image.h	/^			int get_center_y() const { return val_.center_y_; }$/;"	f	class:image::Locator
get_column_line	client/font/text.cpp	/^	Point pango_text::get_column_line(const Point& position) const$/;"	f	class:font::pango_text
get_command	client/hotkey/hotkey_item.h	/^			const std::string get_command() const { return command_; }$/;"	f	class:hotkey::Hotkey_base
get_command_by_command	client/hotkey/hotkey_command.cpp	/^	const Hotkey_command& Hotkey_command::get_command_by_command(Hotkey_command command)$/;"	f	class:hotkey::Hotkey_command
get_component	client/version.h	/^		unsigned int get_component(size_t index) const $/;"	f	class:Version_info
get_config_entry	server/database/update/db_update.cpp	/^std::string db_updater<character_database_connection>::get_config_entry()$/;"	f	class:db_updater
get_config_entry	server/database/update/db_update.cpp	/^std::string db_updater<hotfix_database_connection>::get_config_entry()$/;"	f	class:db_updater
get_config_entry	server/database/update/db_update.cpp	/^std::string db_updater<login_database_connection>::get_config_entry()$/;"	f	class:db_updater
get_config_entry	server/database/update/db_update.cpp	/^std::string db_updater<world_database_connection>::get_config_entry()$/;"	f	class:db_updater
get_connection	server/game/server/packet.h	/^	connection_type get_connection() const { return world_packet_.get_connection(); }$/;"	f	class:world_packets::packet
get_connection	server/game/server/world_packet.h	/^	connection_type get_connection() const { return connection_; }$/;"	f	class:world_packet
get_connection_count	server/shared/networking/network_thread.h	/^	int32_t get_connection_count() const { return connections_; }$/;"	f	class:network_thread
get_connection_info	server/database/database/database_worker_pool.h	/^	inline mysql_connection_info const* get_connection_info() const$/;"	f	class:database_worker_pool
get_connection_type	server/game/server/world_tcp_socket.h	/^	connection_type get_connection_type() const { return type_; }$/;"	f	class:world_tcp_socket
get_console_arguments	server/main.cpp	/^variables_map get_console_arguments(int argc, char** argv)$/;"	f
get_context	client/net/event_loop.h	/^	const std::any& get_context() const { return context_; }$/;"	f	class:net::Event_loop
get_context	client/net/tcp_connection.h	/^  const std::any& get_context() const$/;"	f	class:net::Tcp_connection
get_corrected_mysql_executable	server/database/update/db_update.cpp	/^std::string db_updater_util::get_corrected_mysql_executable()$/;"	f	class:db_updater_util
get_cstring	server/database/database/field.cpp	/^const char* field::get_cstring() const$/;"	f	class:field
get_current_track	client/sound.cpp	/^	std::shared_ptr<Music_track> get_current_track()$/;"	f	namespace:sound
get_current_track_index	client/sound.cpp	/^	std::optional<unsigned int> get_current_track_index()$/;"	f	namespace:sound
get_cursor	client/cursor.cpp	/^		SDL_Cursor* get_cursor(cursor::Cursor_type type)$/;"	f	namespace:cursor::__anon26
get_cursor_position	client/font/text.cpp	/^	Point Pango_text::get_cursor_position(unsigned column, unsigned line)$/;"	f	class:font::Pango_text
get_cwd	client/filesystem.cpp	/^	std::string get_cwd()$/;"	f	namespace:filesystem
get_data	client/old/packet.h	/^		uint8_t * get_data()$/;"	f	class:Packet
get_data	client/old/packet.h	/^		uint8_t* get_data()$/;"	f	class:Packet
get_data	client/sound.cpp	/^			Mix_Chunk* get_data() const { return data_; }$/;"	f	class:__anon28::Sound_cache_chunk
get_data_len	client/old/packet.h	/^		uint16_t get_data_len()$/;"	f	class:Packet
get_database_name	server/database/database/database_worker_pool.cpp	/^const char* database_worker_pool<T>::get_database_name() const$/;"	f	class:database_worker_pool
get_dataset_info	client/old/mysql_pool.cpp	/^	void get_dataset_info()$/;"	f	namespace:db
get_description	client/hotkey/hotkey_command.cpp	/^	const std::string& get_description(const std::string& command)$/;"	f	namespace:hotkey
get_descriptor	server/shared/networking/channel.h	/^	int get_descriptor() const { return sockfd_; }$/;"	f	class:channel
get_dispatchers	client/gui/core/event/handler.cpp	/^				std::vector<Dispatcher*>& get_dispatchers() $/;"	f	class:gui::event::Sdl_event_handler
get_display_index	client/sdl/window.cpp	/^int Window::get_display_index()$/;"	f	class:Window
get_double	server/database/database/field.cpp	/^double field::get_double() const$/;"	f	class:field
get_element	client/image.cpp	/^			Cache_type<T>& get_element(int index)$/;"	f	class:image::Cache_type
get_enc_key	client/old/packet.h	/^		uint8_t get_enc_key()$/;"	f	class:Packet
get_event_loop_of_current_thread	client/net/event_loop.cpp	/^Event_loop* Event_loop::get_event_loop_of_current_thread()$/;"	f	class:net::Event_loop
get_event_loop_of_current_thread	server/shared/networking/event_loop.cpp	/^event_loop* event_loop::get_event_loop_of_current_thread()$/;"	f	class:event_loop
get_exe_dir	client/filesystem.cpp	/^	std::string get_exe_dir()$/;"	f	namespace:filesystem
get_expired	client/net/timer_queue.cpp	/^std::vector<Timer_queue::Entry> Timer_queue::get_expired(Timestamp now)$/;"	f	class:net::Timer_queue
get_expired	server/shared/networking/timer_queue.cpp	/^std::vector<timer_queue::Entry> timer_queue::get_expired(Timestamp now)$/;"	f	class:timer_queue
get_fd	client/old/listen_handler.h	/^		int get_fd() const { return fd_; }$/;"	f	class:Listen_handler
get_fd	client/old/packet.h	/^		int get_fd()$/;"	f	class:Packet
get_field	client/old/mysql_pool.h	/^			MYSQL_FIELD* get_field() const { return field_; }$/;"	f	class:db::Query
get_field_count	client/old/mysql_pool.h	/^			int get_field_count() const { return filed_count_; }$/;"	f	class:db::Query
get_field_count	server/database/database/query_result.h	/^	uint32_t get_field_count() const { return field_count_; }$/;"	f	class:prepared_result_set
get_field_count	server/database/database/query_result.h	/^	uint32_t get_field_count() const { return field_count_; }$/;"	f	class:result_set
get_field_value	client/old/mysql_pool.cpp	/^	std::string Query::get_field_value(const std::string& field)$/;"	f	class:db::Query
get_file_bytes_count	client/filesystem.cpp	/^int get_file_bytes_count(std::ifstream& fd)$/;"	f
get_file_bytes_count	client/filesystem.cpp	/^long get_file_bytes_count(FILE* fd)$/;"	f
get_file_list	server/database/update/update_fetcher.cpp	/^update_fetcher::locale_file_storage update_fetcher::get_file_list() const$/;"	f	class:update_fetcher
get_file_location	client/filesystem.cpp	/^std::string get_file_location(const std::string& file)$/;"	f
get_filed_index	client/old/mysql_pool.cpp	/^	int Query::get_filed_index(const std::string& field)$/;"	f	class:db::Query
get_filed_num	client/old/mysql_pool.cpp	/^	float Query::get_filed_num(const std::string& field)$/;"	f	class:db::Query
get_filed_value	client/old/mysql_pool.cpp	/^	std::string Query::get_filed_value(int field_index)$/;"	f	class:db::Query
get_filename	client/image.h	/^			const std::string& get_filename() const $/;"	f	class:image::Locator
get_flags	client/sdl/window.cpp	/^uint32_t Window::get_flags()$/;"	f	class:Window
get_flags	common/logging/appender.h	/^	appender_flags get_flags() const { return flags_; }$/;"	f	class:appender
get_float	client/config.h	/^double Config::get_float(Args&&... keys)$/;"	f	class:Config
get_float	server/database/database/field.cpp	/^float field::get_float() const$/;"	f	class:field
get_font	client/font/sdl_ttf.cpp	/^TTF_Font* get_font(Font_id& id)$/;"	f
get_font_families	client/font/font_config.cpp	/^	const std::string& get_font_families(const Family_class& fc)$/;"	f	namespace:font
get_free_connection	server/database/database/database_worker_pool.cpp	/^T* database_worker_pool<T>::get_free_connection() const$/;"	f	class:database_worker_pool
get_full_database	common/configuration/revision.cpp	/^const char* get_full_database()$/;"	f	namespace:revision
get_full_version	common/configuration/revision.cpp	/^const char* get_full_version()$/;"	f	namespace:revision
get_future	server/database/database/adhoc_statement.h	/^	query_result_future get_future() const { return result_->get_future(); }$/;"	f	class:basic_statement_task
get_future	server/database/database/prepared_statement.h	/^	prepared_query_result_future get_future() { return result_->get_future(); }$/;"	f	class:prepared_statement_task
get_future	server/database/database/query_holder.h	/^	query_result_holder_future get_future() { return result_.get_future(); }$/;"	f	class:sql_query_holder_task
get_handle	server/database/database/mysql_connection.h	/^	MYSQL* get_handle() { return mysql_; }$/;"	f	class:mysql_connection
get_handler	client/old/packet.h	/^		void * get_handler()$/;"	f	class:Packet
get_height	client/font/text.cpp	/^	int Pango_text::get_height() const { return get_size().y; }$/;"	f	class:font::Pango_text
get_hostname	client/net/net_utils.cpp	/^std::string get_hostname()$/;"	f	namespace:net
get_hotfixes_database	common/configuration/revision.cpp	/^const char* get_hotfixes_database()$/;"	f	namespace:revision
get_hotkey	client/hotkey/hotkey_item.cpp	/^	const Hotkey_ptr get_hotkey(const SDL_Event& event)$/;"	f	namespace:hotkey
get_hotkey_command	client/hotkey/hotkey_command.cpp	/^	const Hotkey_command& get_hotkey_command(const std::string& command)$/;"	f	namespace:hotkey
get_hotkey_commands	client/hotkey/hotkey_command.cpp	/^	const std::vector<Hotkey_command>& get_hotkey_commands()$/;"	f	namespace:hotkey
get_hotkey_null	client/hotkey/hotkey_command.cpp	/^	const Hotkey_comand& get_hotkey_null()$/;"	f	namespace:hotkey
get_hotkeys	client/hotkey/hotkey_item.cpp	/^	const Hotkey_list& get_hotkeys() { return hotkeys; }$/;"	f	namespace:hotkey
get_id	client/hotkey/hotkey_command.cpp	/^	Hotkey_command get_id(const std::string& command)$/;"	f	namespace:hotkey
get_id	client/thread/thread.h	/^		Thread::Id get_id() const { return id_; }$/;"	f	class:Thread
get_id	client/thread/thread.h	/^inline Thread::Id get_id() { return Thread::Id(pthread_self()); }$/;"	f
get_id	common/logging/appender.h	/^	uint8_t get_id() const { return id_; }$/;"	f	class:appender
get_image	client/image.cpp	/^	Surface get_image(const image::Locator& locator, Img_type type)$/;"	f	namespace:image
get_impl	client/utils/json.h	/^    boolean_t get_impl(boolean_t* \/*unused*\/) const$/;"	f	class:basic_json
get_impl_ptr	client/utils/json.h	/^    array_t* get_impl_ptr(array_t* \/*unused*\/) $/;"	f	class:basic_json
get_impl_ptr	client/utils/json.h	/^    boolean_t* get_impl_ptr(boolean_t* \/*unused*\/) $/;"	f	class:basic_json
get_impl_ptr	client/utils/json.h	/^    constexpr const array_t* get_impl_ptr(const array_t* \/*unused*\/) const $/;"	f	class:basic_json
get_impl_ptr	client/utils/json.h	/^    constexpr const boolean_t* get_impl_ptr(const boolean_t* \/*unused*\/) const $/;"	f	class:basic_json
get_impl_ptr	client/utils/json.h	/^    constexpr const number_float_t* get_impl_ptr(const number_float_t* \/*unused*\/) const $/;"	f	class:basic_json
get_impl_ptr	client/utils/json.h	/^    constexpr const number_integer_t* get_impl_ptr(const number_integer_t* \/*unused*\/) const $/;"	f	class:basic_json
get_impl_ptr	client/utils/json.h	/^    constexpr const number_unsigned_t* get_impl_ptr(const number_unsigned_t* \/*unused*\/) const $/;"	f	class:basic_json
get_impl_ptr	client/utils/json.h	/^    constexpr const object_t* get_impl_ptr(const object_t* \/*unused*\/) const $/;"	f	class:basic_json
get_impl_ptr	client/utils/json.h	/^    constexpr const string_t* get_impl_ptr(const string_t* \/*unused*\/) const $/;"	f	class:basic_json
get_impl_ptr	client/utils/json.h	/^    number_float_t* get_impl_ptr(number_float_t* \/*unused*\/) $/;"	f	class:basic_json
get_impl_ptr	client/utils/json.h	/^    number_integer_t* get_impl_ptr(number_integer_t* \/*unused*\/) $/;"	f	class:basic_json
get_impl_ptr	client/utils/json.h	/^    number_unsigned_t* get_impl_ptr(number_unsigned_t* \/*unused*\/) $/;"	f	class:basic_json
get_impl_ptr	client/utils/json.h	/^    object_t* get_impl_ptr(object_t* \/*unused*\/) $/;"	f	class:basic_json
get_impl_ptr	client/utils/json.h	/^    string_t* get_impl_ptr(string_t* \/*unused*\/) $/;"	f	class:basic_json
get_info	client/sdl/texture.h	/^		const Info get_info() const { return Info(*this); }$/;"	f	class:Texture
get_instance	client/old/singleton.h	/^		static T* get_instance()$/;"	f	class:Singleton
get_int16	server/database/database/field.cpp	/^int16_t field::get_int16() const$/;"	f	class:field
get_int32	server/database/database/field.cpp	/^int32_t field::get_int32() const$/;"	f	class:field
get_int64	client/json.h	/^	const int64_t& get_int64() const $/;"	f	class:Format::Value
get_int64	server/database/database/field.cpp	/^int64_t field::get_int64() const$/;"	f	class:field
get_int8	server/database/database/field.cpp	/^int8_t field::get_int8() const$/;"	f	class:field
get_integer	client/config.h	/^int Config::get_integer(Args&&... keys)$/;"	f	class:Config
get_json_location	client/filesystem.cpp	/^	std::string get_json_location(const std::string& filename,$/;"	f	namespace:filesystem
get_keys_by_string	common/configuration/config.h	/^	std::vector<std::string> get_keys_by_string(const std::string& section, const std::string& name)$/;"	f	class:config_mgr
get_keys_by_string	common/configuration/ini_parser.cpp	/^std::vector<std::string> ini_parser::get_keys_by_string(const std::string& section, const std::string& name)$/;"	f	class:ini_parser
get_last_effect_row	client/old/mysql_pool.h	/^			int get_last_effect_row() { return effect_row_; }$/;"	f	class:db::Database
get_last_error	client/old/mysql_pool.cpp	/^	std::string Database::get_last_error()$/;"	f	class:db::Database
get_last_error	client/old/mysql_pool.h	/^			int get_last_error() { return mysql_errno(mysql_); }$/;"	f	class:db::Database
get_last_error	server/database/database/mysql_connection.cpp	/^uint32_t mysql_connection::get_last_error()$/;"	f	class:mysql_connection
get_last_row_id	client/old/mysql_pool.h	/^			size_t get_last_row_id() { return mysql_insert_id(mysql_); }$/;"	f	class:db::Database
get_length	client/font/text.h	/^			size_t get_length() const { return length_; }$/;"	f	class:font::Pango_text
get_library_vserion	server/database/database/mysql_threading.cpp	/^const char* get_library_vserion()$/;"	f
get_link	client/font/text.cpp	/^	std::string Pango_txt::get_link(const Point& position) const$/;"	f	class:font::Pango_txt
get_local_addr	client/net/net_utils.cpp	/^sockaddr_in get_local_addr(int sockfd)$/;"	f	namespace:net
get_localized_path	client/image.cpp	/^	static std::string get_localized_path(const std::string& file, $/;"	f	namespace:image
get_log_domain_severity	client/log.cpp	/^	bool get_log_domain_severity(const std::string& name, int& severity)$/;"	f	namespace:lg
get_log_filename	common/logging/old_logging/log_file.cpp	/^std::string Log_file::get_log_filename(const std::string& basename, time_t* now)$/;"	f	class:lg::Log_file
get_log_level	common/logging/appender.h	/^	log_level get_log_level() const { return level_; }$/;"	f	class:appender
get_log_level	common/logging/logger.h	/^	log_level get_log_level() const { return level_; }$/;"	f	class:logger
get_log_level_str	common/logging/appender.cpp	/^const char* appender::get_log_level_str(log_level level)$/;"	f	class:appender
get_logger_by_type	common/logging/log.cpp	/^const logger* log::get_logger_by_type(const std::string& type) const$/;"	f	class:log
get_logs_dir	common/logging/log.h	/^	std::string const& get_logs_dir() const { return logs_dir_; }$/;"	f	class:log::std
get_logs_timestamp	common/logging/log.h	/^	std::string const& get_logs_timestamp() const { return logs_timestamp_; }$/;"	f	class:log::std
get_loop	client/net/tcp_connection.h	/^  Event_loop* get_loop() const { return loop_; }$/;"	f	class:net::Tcp_connection
get_loop	client/net/tcp_server.h	/^	Event_loop* get_loop() const { return loop_; }$/;"	f	class:net::Tcp_server
get_loop	server/shared/networking/tcp_server.h	/^	Event_loop* get_loop() const { return loop_; }$/;"	f	class:net::Tcp_server
get_loop	server/shared/networking/tcp_socket.h	/^	event_loop* get_loop() const { return loop_; }$/;"	f	class:tcp_socket
get_loop_for_hash	client/net/event_loop_threadpool.cpp	/^Event_loop* Event_loop_threadpool::get_loop_for_hash(size_t hash_code)$/;"	f	class:net::Event_loop_threadpool
get_loop_for_hash	server/shared/networking/event_loop_threadpool.cpp	/^event_loop* event_loop_threadpool::get_loop_for_hash(size_t hash_code)$/;"	f	class:event_loop_threadpool
get_modifications	client/image.h	/^			const std::string& get_modifications() const $/;"	f	class:image::Locator
get_mouse_behavior	client/gui/core/event/dispatcher.h	/^				Mouse_behavior get_mouse_behavior() const $/;"	f	class:gui::event::Dispatcher
get_ms_time	common/utility/timer.h	/^inline uint32_t get_ms_time()$/;"	f
get_ms_time_diff	common/utility/timer.h	/^inline uint32_t get_ms_time_diff(uint32_t old_ms_time, uint32_t new_ms_time)$/;"	f
get_ms_time_diff_to_now	common/utility/timer.h	/^inline uint32_t get_ms_time_diff_to_now(uint32_t old_ms_time)$/;"	f
get_mutable_context	client/net/event_loop.h	/^	std::any* get_mutable_context() { return &context_; }$/;"	f	class:net::Event_loop
get_mutable_context	client/net/tcp_connection.h	/^  std::any* get_mutable_context()$/;"	f	class:net::Tcp_connection
get_mysql	client/old/mysql_pool.h	/^			MYSQL* get_mysql() { return mysql_; }$/;"	f	class:db::Database
get_mysql_executable	common/configuration/builtin_config.cpp	/^std::string get_mysql_executable()$/;"	f
get_mysql_executable	common/configuration/revision.cpp	/^const char* get_mysql_executable()$/;"	f	namespace:revision
get_name	client/hotkey/hotkey_item.cpp	/^	const std::string Hotkey_base::get_name() const$/;"	f	class:hotkey::Hotkey_base
get_name	client/hotkey/hotkey_item.cpp	/^	std::string get_name(const std::string& id)$/;"	f	namespace:hotkey
get_name	client/log.h	/^			std::string get_name() const$/;"	f	class:lg::Logger
get_name	client/old/player.h	/^		std::string get_name() const { return name_; }$/;"	f	class:Character
get_name	client/serialization/ucs4_convert_impl.h	/^			static const char* get_name() { return "UCS-4"; }$/;"	f	struct:ucs4_convert_impl::Utf32_impl
get_name	client/serialization/ucs4_convert_impl.h	/^			static const char* get_name() { return "utf16"; }$/;"	f	struct:ucs4_convert_impl::Utf16_impl
get_name	client/serialization/ucs4_convert_impl.h	/^	        static const char* get_name() { return "UTF-8"; }$/;"	f	struct:ucs4_convert_impl::Utf8_impl
get_name	common/logging/appender.h	/^	std::string const& get_name() const { return name_; }$/;"	f	class:appender::std
get_name	common/logging/logger.h	/^	const std::string& get_name() const { return name_; }$/;"	f	class:logger
get_name_helper	client/hotkey/hotkey_item.cpp	/^	const std::string Hotkey_keyboard::get_name_helper() const $/;"	f	class:hotkey::Hotkey_keyboard
get_name_helper	client/hotkey/hotkey_item.cpp	/^	const std::string Hotkey_mouse::get_name_helper() const$/;"	f	class:hotkey::Hotkey_mouse
get_name_helper	client/hotkey/hotkey_item.h	/^			virtual const std::string get_name_helper() const { return ""; }$/;"	f	class:hotkey::Hotkey_void
get_network_thread_count	server/shared/networking/tcp_socket_mgr.h	/^	int32_t get_network_thread_count() const { return thread_count_; }$/;"	f	class:tcp_socket_mgr
get_neutral_pixel_format	client/sdl/utils.cpp	/^static SDL_PixelFormat& get_neutral_pixel_format()$/;"	f	file:
get_next_loop	client/net/event_loop_threadpool.cpp	/^Event_loop* Event_loop_threadpool::get_next_loop()$/;"	f	class:net::Event_loop_threadpool
get_next_loop	server/shared/networking/event_loop_threadpool.cpp	/^event_loop* event_loop_threadpool::get_next_loop()$/;"	f	class:event_loop_threadpool
get_num_bytes	common/cryptography/big_number.cpp	/^int32_t big_number::get_num_bytes(void)$/;"	f	class:big_number
get_num_tracks	client/sound.cpp	/^	unsigned int get_num_tracks()$/;"	f	namespace:sound
get_number	client/json.h	/^	const double& get_number() const $/;"	f	class:Format::Value
get_object	client/json.h	/^	const Object& get_object() const $/;"	f	class:Format::Value
get_object_item	client/config.cpp	/^Config::Node* Config::get_object_item(Config::Node* object,$/;"	f	class:Config
get_opcode	server/game/server/packet.h	/^	opcode_client get_opcode() const { return opcode_client(world_packet_.get_opcode()); }$/;"	f	struct:world_packets::client_packet
get_opcode	server/game/server/packet.h	/^	opcode_server get_opcode() const { return opcode_server(world_packet_.get_opcode()); }$/;"	f	struct:world_packets::server_packet
get_opcode	server/game/server/world_packet.h	/^	uint16_t get_opcode() const { return opcode_; }$/;"	f	class:world_packet
get_opcode_name_for_logging	server/game/server/protocol/opcodes.cpp	/^std::string get_opcode_name_for_logging(opcode_client opcode)$/;"	f
get_opcode_name_for_logging	server/game/server/protocol/opcodes.cpp	/^std::string get_opcode_name_for_logging(opcode_server opcode)$/;"	f
get_opcode_name_for_logging_impl	server/game/server/protocol/opcodes.cpp	/^inline std::string get_opcode_name_for_logging_impl(T id)$/;"	f
get_option_column_width	common/cmdline/option_description.cpp	/^uint32_t options_description::get_option_column_width() const$/;"	f	class:options_description
get_option_string	client/cmdln.cpp	/^void Commandline::get_option_string(std::string& option_str)$/;"	f	class:Commandline
get_output_size	client/sdl/window.cpp	/^SDL_Point Window::get_output_size()$/;"	f	class:Window
get_packet	client/old/packet.h	/^		uint8_t * get_packet()$/;"	f	class:Packet
get_packet	client/old/packet.h	/^		uint8_t* get_packet()$/;"	f	class:Packet
get_packet_class	server/game/server/protocol/opcodes.cpp	/^struct get_packet_class {};$/;"	s	file:
get_packet_class	server/game/server/protocol/opcodes.cpp	/^struct get_packet_class<void(world_session::*)(T&)> $/;"	s	file:
get_packet_len	client/old/packet.h	/^		uint16_t get_packet_len()$/;"	f	class:Packet
get_packet_seq	client/old/packet.h	/^		uint16_t get_packet_seq()$/;"	f	class:Packet
get_packet_seq	client/old/packet.h	/^		uint32_t get_packet_seq()$/;"	f	class:Packet
get_packet_type	client/old/packet.h	/^		uint16_t get_packet_type()$/;"	f	class:Packet
get_param_count	client/cmdln.h	/^		int get_param_count() const { return param_pos_list_.size(); }$/;"	f	class:Commandline
get_parameter_count	server/database/database/mysql_prepared_statement.h	/^	uint32_t get_parameter_count() const { return param_count_; }$/;"	f	class:mysql_prepared_statement
get_peer_addr	client/net/net_utils.cpp	/^sockaddr_in get_peer_addr(int sockfd)$/;"	f	namespace:net
get_players	client/old/clients.h	/^		Map_player get_players() const { return players_; }$/;"	f	class:Clients
get_prepared_result	server/database/database/query_holder.cpp	/^prepared_query_result sql_query_holder_base::get_prepared_result(size_t index)$/;"	f	class:sql_query_holder_base
get_prepared_statement	server/database/database/database_worker_pool.cpp	/^prepared_statement<T>* database_worker_pool<T>::get_prepared_statement(prepared_statement_index index)$/;"	f	class:database_worker_pool
get_prepared_statement	server/database/database/mysql_connection.cpp	/^mysql_prepared_statement* mysql_connection::get_prepared_statement(uint32_t index)$/;"	f	class:mysql_connection
get_previous_music_track	client/sound.cpp	/^	std::shared_ptr<Music_track> get_previous_music_track()$/;"	f	namespace:sound
get_protocal_version	client/old/packet.h	/^		uint8_t get_protocal_version()$/;"	f	class:Packet
get_ptr	client/utils/json.h	/^    auto get()  -> decltype(std::declval<basic_json_t&>().template get_ptr<PointerType>())$/;"	f	class:basic_json
get_ptr	client/utils/json.h	/^    constexpr auto get() const  -> decltype(std::declval<const basic_json_t&>().template get_ptr<PointerType>())$/;"	f	class:basic_json
get_query_string	server/database/database/mysql_prepared_statement.cpp	/^std::string mysql_prepared_statement::get_query_string(const std::string& sql_pattern) const$/;"	f	class:mysql_prepared_statement
get_random_bool	client/random.cpp	/^	bool Rng::get_random_bool(double probability)$/;"	f	class:randomness::Rng
get_random_calls	client/random.cpp	/^	unsigned int Rng::get_random_calls() const$/;"	f	class:randomness::Rng
get_random_double	client/random.cpp	/^	double Rng::get_random_double()$/;"	f	class:randomness::Rng
get_random_element	client/random.h	/^	unsigned int Rng::get_random_element(T frist, T last)$/;"	f	class:randomness::Rng
get_random_int	client/random.h	/^			int get_random_int(int min, int max)$/;"	f	class:randomness::Rng
get_random_int_in_range_zero_to	client/random.cpp	/^	int Rng::get_random_int_in_range_zero_to(int max)$/;"	f	class:randomness::Rng
get_raw_packet	server/game/server/packet.h	/^	const world_packet* get_raw_packet() const { return world_packet_; }$/;"	f	class:world_packets::packet
get_read_buffer	server/shared/networking/tcp_socket.h	/^	message_buffer& get_read_buffer() { return read_buffer_; }$/;"	f	class:tcp_socket
get_read_pointer	common/utility/message_buffer.h	/^	uint8_t* get_read_pointer() { return get_base_pointer() + rpos_; }$/;"	f	class:message_buffer
get_ref	client/utils/json.h	/^    ReferenceType get_ref() const$/;"	f	class:basic_json
get_ref	client/utils/json.h	/^    ReferenceType get_ref()$/;"	f	class:basic_json
get_ref_impl	client/utils/json.h	/^    static ReferenceType get_ref_impl(ThisType& obj)$/;"	f	class:basic_json
get_remaining_space	common/utility/message_buffer.h	/^	size_type get_remaining_space() const { return storage_.size() - wpos_; }$/;"	f	class:message_buffer
get_remote_ip_address	server/shared/networking/tcp_socket.h	/^	address get_remote_ip_address() const { return remote_address_; }$/;"	f	class:tcp_socket
get_remote_port	server/shared/networking/tcp_socket.h	/^	uint16_t get_remote_port() const { return remote_port_; }$/;"	f	class:tcp_socket
get_rendered_text	client/font/sdl_ttf.cpp	/^inline Surface get_rendered_text(SDL_Renderer* r, const std::string& str, int size, $/;"	f
get_renderer_info	client/sdl/window.h	/^		const SDL_RendererInfo& get_renderer_info() const$/;"	f	class:Window
get_row_count	client/old/mysql_pool.h	/^			int get_row_count() const { return row_count_; }$/;"	f	class:db::Query
get_row_count	server/database/database/query_result.h	/^	uint64_t get_row_count() const { return row_count_; }$/;"	f	class:prepared_result_set
get_row_count	server/database/database/query_result.h	/^	uint64_t get_row_count() const { return row_count_; }$/;"	f	class:result_set
get_severity	client/log.h	/^			int get_severity() const$/;"	f	class:lg::Logger
get_sex	client/old/player.h	/^		Sex get_sex() const { return sex_; }$/;"	f	class:Character
get_singletion	client/video.h	/^		static Video& get_singletion() { return *singleton_; }$/;"	f	class:Video
get_size	client/font/text.cpp	/^	Point Pango_text::get_size() const $/;"	f	class:font::Pango_text
get_size	client/sdl/window.cpp	/^SDL_Point Window::get_size()$/;"	f	class:Window
get_size	server/database/database/transaction.h	/^	size_t get_size() const { return queries_.size(); }$/;"	f	class:transaction_base
get_size	server/game/server/packet.h	/^	size_t get_size() const { return world_packet_.size(); }$/;"	f	class:world_packets::packet
get_socket_error	client/net/net_utils.cpp	/^int get_socket_error(int sockfd)$/;"	f	namespace:net
get_socket_for_accept	server/shared/networking/network_thread.h	/^	socket* get_socket_for_accept() { return accept_socket_; }$/;"	f	class:network_thread
get_socket_for_accept	server/shared/networking/tcp_socket_mgr.h	/^	std::pair<socket*, uint32_t> get_socket_for_accept()$/;"	f	class:tcp_socket_mgr
get_socketfd	client/net/socket.h	/^	int get_socketfd() const { return fd_; }$/;"	f	class:net::Socket
get_source_directory	common/configuration/builtin_config.cpp	/^std::string get_source_directory()$/;"	f
get_source_directory	common/configuration/revision.cpp	/^const char* get_source_directory()$/;"	f	namespace:revision
get_state	server/shared/networking/channel.h	/^	state get_state() const { return state_; }$/;"	f	class:channel
get_state_as_string	server/database/update/update_fetcher.h	/^		std::string get_state_as_string() const { return state_convert(_state); }$/;"	f	struct:update_fetcher::applied_file_entry
get_stmt	server/database/database/mysql_prepared_statement.h	/^	MYSQL_STMT* get_stmt() { return stmt_; }$/;"	f	class:mysql_prepared_statement
get_string	client/config.h	/^std::string Config::get_string(Args&&... keys)$/;"	f	class:Config
get_string	client/json.h	/^	const std::string& get_string() const $/;"	f	class:Format::Value
get_string	server/database/database/field.cpp	/^std::string field::get_string() const$/;"	f	class:field
get_string_with_default_value	common/configuration/builtin_config.cpp	/^static std::string get_string_with_default_value(const std::string& section,$/;"	f	file:
get_surface	client/font/text_surface.cpp	/^std::vector<Surface> const& Text_surface::get_surface() const$/;"	f	class:std::Text_surface
get_sys_datetime	common/utility/system_info.cpp	/^std::string get_sys_datetime()$/;"	f	namespace:sys
get_table_id	client/old/packet.h	/^		int get_table_id()$/;"	f	class:Packet
get_table_name	server/database/update/db_update.cpp	/^std::string db_updater<character_database_connection>::get_table_name()$/;"	f	class:db_updater
get_table_name	server/database/update/db_update.cpp	/^std::string db_updater<hotfix_database_connection>::get_table_name()$/;"	f	class:db_updater
get_table_name	server/database/update/db_update.cpp	/^std::string db_updater<login_database_connection>::get_table_name()$/;"	f	class:db_updater
get_table_name	server/database/update/db_update.cpp	/^std::string db_updater<world_database_connection>::get_table_name()$/;"	f	class:db_updater
get_texture	client/image.cpp	/^	Texture get_texture(const image::Locator& locator, Img_type type)$/;"	f	namespace:image
get_texture	client/image.cpp	/^	Texture get_texture(const image::Locator& locator, Scale_quality quality, Img_type type)$/;"	f	namespace:image
get_texture_portion	client/sdl/utils.cpp	/^Texture get_texture_portion(SDL_Renderer* r, const Texture& t, SDL_Rect& area)$/;"	f
get_time_str	common/logging/log_message.cpp	/^std::string log_message::get_time_str()$/;"	f	class:log_message
get_time_str	common/logging/log_message.cpp	/^std::string log_message::get_time_str(time_t time)$/;"	f	class:log_message
get_time_str	common/utility/timer.h	/^std::string get_time_str(time_t time)$/;"	f
get_timespan	client/log.cpp	/^	std::string get_timespan(const time_t& t)$/;"	f	namespace:lg
get_timestamp	client/log.cpp	/^	std::string get_timestamp(const time_t& t, const std::string& format)$/;"	f	namespace:lg
get_timestamp_str	common/logging/log.cpp	/^std::string log::get_timestamp_str()$/;"	f	class:log
get_to	client/utils/json.h	/^    ValueType & get_to(ValueType& v) const (($/;"	f	class:basic_json
get_token	client/font/text.cpp	/^	std::string Pango_text::get_token(const Point& position,$/;"	f	class:font::Pango_text
get_tooltip	client/hotkey/hotkey_command.cpp	/^	const std::string& get_tooltip(const std::string& command)$/;"	f	namespace:hotkey
get_track	client/sound.cpp	/^	std::shared_ptr<Music_track> get_track(unsigned int i)$/;"	f	namespace:sound
get_type	client/image.h	/^			Type get_type() const { return val_.type_; }$/;"	f	class:image::Locator
get_uint16	server/database/database/field.cpp	/^uint16_t field::get_uint16() const$/;"	f	class:field
get_uint32	server/database/database/field.cpp	/^uint32_t field::get_uint32() const$/;"	f	class:field
get_uint64	server/database/database/field.cpp	/^uint64_t field::get_uint64() const$/;"	f	class:field
get_uint8	server/database/database/field.cpp	/^uint8_t field::get_uint8() const$/;"	f	class:field
get_user_data_dir	client/filesystem.cpp	/^	std::string get_user_data_dir()$/;"	f	namespace:filesystem
get_user_data_path	client/filesystem.cpp	/^	static const fs::path& get_user_data_path()$/;"	f	namespace:filesystem
get_value	common/configuration/ini_parser.cpp	/^std::string ini_parser::get_value(const std::string& section, const std::string& key) const$/;"	f	class:ini_parser
get_value	server/database/database/field.cpp	/^	static T get_value(D& data, Func func)$/;"	f	struct:__anon4::conversion
get_value_default	common/configuration/config.h	/^	T get_value_default(const std::string& section, const std::string& key, T def) const$/;"	f	class:config_mgr
get_value_default	common/configuration/config.h	/^	std::string get_value_default(const std::string& section, const std::string& key, const char* def) const$/;"	f	class:config_mgr
get_version_path_suffix	client/filesystem.cpp	/^	static const std::string& get_version_path_suffix()$/;"	f	namespace:filesystem
get_want_keyboard_input	client/gui/core/event/dispatcher.h	/^				bool get_want_keyboard_input() const $/;"	f	class:gui::event::Dispatcher
get_width	client/font/text.cpp	/^	int Pango_text::get_width() const { return get_size().x; }$/;"	f	class:font::Pango_text
get_write_pointer	common/utility/message_buffer.h	/^	uint8_t* get_write_pointer() { return get_base_pointer() + wpos_; }$/;"	f	class:message_buffer
getc	client/json.h	/^	int getc() $/;"	f	class:Format::Input
gethostname	common/utility/system_info.cpp	/^std::string gethostname()$/;"	f	namespace:sys
getpeername	server/shared/networking/socket_operations.cpp	/^int getpeername(int sockfd, socket_addr_type* addr, socklen_t* addrlen, std::error_code& ec)$/;"	f
getsockname	server/shared/networking/socket_operations.cpp	/^int getsockname(int sockfd, socket_addr_type* addr, socklen_t* addrlen, std::error_code& ec)$/;"	f
getsockopt	server/shared/networking/socket_operations.cpp	/^int getsockopt(int sockfd, int level, int optname, void* optval, socklen_t* optlen, std::error_code& ec)$/;"	f
goto_next_row	server/database/database/query_result.cpp	/^bool prepared_result_set::goto_next_row()$/;"	f	class:prepared_result_set
group	client/sound.cpp	/^			sound::Channel_group group;$/;"	m	class:__anon28::Sound_cache_chunk	file:
groups_	common/cmdline/option_description.h	/^	std::vector<std::shared_ptr<options_description>> groups_;$/;"	m	class:options_description
gui	client/gui/core/event/dispatcher.cpp	/^namespace gui$/;"	n	file:
gui	client/gui/core/event/dispatcher.h	/^namespace gui$/;"	n
gui	client/gui/core/event/dispatcher_private.h	/^namespace gui$/;"	n
gui	client/gui/core/event/distributor.cpp	/^namespace gui$/;"	n	file:
gui	client/gui/core/event/distributor.h	/^namespace gui$/;"	n
gui	client/gui/core/event/handler.cpp	/^namespace gui$/;"	n	file:
gui	client/gui/core/event/handler.h	/^namespace gui$/;"	n
gui	client/gui/core/event/message.h	/^namespace gui$/;"	n
gui	client/gui/core/placer.cpp	/^namespace gui$/;"	n	file:
gui	client/gui/core/placer.h	/^namespace gui$/;"	n
gunzip	client/commandline_options.h	/^		std::optional<std::string> gunzip;$/;"	m	class:Commandline_options
gzip	client/commandline_options.h	/^		std::optional<std::string> gzip;$/;"	m	class:Commandline_options
h	client/sdl/texture.h	/^			int h;$/;"	m	struct:Texture::Info
h_	client/font/text_surface.h	/^		mutable int w_, h_;$/;"	m	class:Text_surface
handleRead	client/net/timer_queue.cpp	/^void Timer_queue::handleRead()$/;"	f	class:net::Timer_queue
handleRead	server/shared/networking/timer_queue.cpp	/^void timer_queue::handleRead()$/;"	f	class:timer_queue
handle_accept	client/old/client_handler.h	/^		bool handle_accept(int listenfd)$/;"	f	class:Client_handler
handle_accept	client/old/epoll_handler.cpp	/^	void handle_accept(epoll_event ev)$/;"	f	namespace:event
handle_accept	client/old/server.cpp	/^bool Server::handle_accept()$/;"	f	class:Server
handle_client	client/old/epoll_handler.cpp	/^	void handle_client(epoll_event ev)$/;"	f	namespace:event
handle_client	client/old/server.cpp	/^bool Server::handle_client(epoll_event ev)$/;"	f	class:Server
handle_close	client/net/tcp_connection.cpp	/^void Tcp_connection::handle_close()$/;"	f	class:net::Tcp_connection
handle_close	server/shared/networking/tcp_socket.cpp	/^void tcp_socket::handle_close()$/;"	f	class:tcp_socket
handle_enable_encryption_ack	server/game/server/world_tcp_socket.cpp	/^void world_tcp_socket::handle_enable_encryption_ack()$/;"	f	class:world_tcp_socket
handle_error	client/net/tcp_connection.cpp	/^void Tcp_connection::handle_error()$/;"	f	class:net::Tcp_connection
handle_error	server/shared/networking/tcp_socket.cpp	/^void tcp_socket::handle_error()$/;"	f	class:tcp_socket
handle_event	client/gui/core/event/handler.cpp	/^		void Sdl_event_handler::handle_event(const SDL_Event& event)$/;"	f	class:gui::event::Sdl_event_handler
handle_event	client/net/channel.cpp	/^void Channel::handle_event(Timestamp&& receive_time)$/;"	f	class:net::Channel
handle_event	server/shared/networking/channel.cpp	/^void channel::handle_event()$/;"	f	class:channel
handle_event_with_guard	client/net/channel.cpp	/^void Channel::handle_event_with_guard(Timestamp&& receive_time)$/;"	f	class:net::Channel
handle_event_with_guard	server/shared/networking/channel.cpp	/^void channel::handle_event_with_guard()$/;"	f	class:channel
handle_mysql_errno	server/database/database/mysql_connection.cpp	/^bool mysql_connection::handle_mysql_errno(uint32_t error_code, uint8_t attempts)$/;"	f	class:mysql_connection
handle_ping	server/game/server/world_tcp_socket.cpp	/^bool world_tcp_socket::handle_ping(world_packets::Auth::Ping& ping)$/;"	f	class:world_tcp_socket
handle_queue	server/shared/networking/tcp_socket.cpp	/^bool tcp_socket::handle_queue()$/;"	f	class:tcp_socket
handle_read	client/net/acceptor.cpp	/^void Acceptor::handle_read()$/;"	f	class:net::Acceptor
handle_read	client/net/event_loop.cpp	/^void Event_loop::handle_read()$/;"	f	class:net::Event_loop
handle_read	client/net/tcp_connection.cpp	/^void Tcp_connection::handle_read(Timestamp receive_time)$/;"	f	class:net::Tcp_connection
handle_read	client/old/server.cpp	/^bool TInputStreamsHandler::handle_read(int fd){$/;"	f	class:TInputStreamsHandler
handle_read	client/old/server.h	/^bool TInputStreamsHandler::handle_read( TEventHandler * object ){$/;"	f	class:Descriptor::TInputStreamsHandler
handle_read	server/shared/networking/acceptor.cpp	/^void acceptor::handle_read()$/;"	f	class:acceptor
handle_read	server/shared/networking/event_loop.cpp	/^void event_loop::handle_read()$/;"	f	class:event_loop
handle_read	server/shared/networking/tcp_socket.cpp	/^void tcp_socket::handle_read()$/;"	f	class:tcp_socket
handle_send_auth_session	server/game/server/world_tcp_socket.cpp	/^void world_tcp_socket::handle_send_auth_session()$/;"	f	class:world_tcp_socket
handle_window_event	client/gui/core/event/handler.cpp	/^		void Sdl_event_handler::handle_window_event(const SDL_Event& event)$/;"	f	class:gui::event::Sdl_event_handler
handle_write	client/net/tcp_connection.cpp	/^void Tcp_connection::handle_write()$/;"	f	class:net::Tcp_connection
handle_write	client/old/server.h	/^bool TInputStreamsHandler::handle_write( TEventHandler * object ){$/;"	f	class:Descriptor::TInputStreamsHandler
handler	client/gui/core/event/handler.cpp	/^		static std::unique_ptr<class Sdl_event_handler> handler = nullptr;$/;"	m	namespace:gui::event	file:
handler	client/old/packet.h	/^		void *  handler;$/;"	m	class:Packet
handler_members	client/events.h	/^		        virtual std::vector<Sdl_handler*> handler_members()$/;"	f	class:events::Sdl_handler
handler_members	client/old/event.h	/^			virtual Handler_list handler_members() $/;"	f	class:event::Event_handler
handlers	client/events.h	/^	        Handler_list handlers;$/;"	m	struct:events::Context
handlers	client/old/event.h	/^		Handler_list handlers;$/;"	m	struct:event::Context
hardware_concurrency	client/thread/thread.cpp	/^unsigned int Thread::hardware_concurrency() $/;"	f	class:Thread
has_channel	client/net/event_loop.cpp	/^bool Event_loop::has_channel(Channel* channel)$/;"	f	class:net::Event_loop
has_channel	client/net/poller.cpp	/^bool Poller::has_channel(Channel* channel) const$/;"	f	class:net::Poller
has_channel	server/shared/networking/epoll.cpp	/^bool epoll::has_channel(channel* channel) const$/;"	f	class:epoll
has_channel	server/shared/networking/event_loop.cpp	/^bool event_loop::has_channel(channel* channel)$/;"	f	class:event_loop
has_event	client/gui/core/event/dispatcher.cpp	/^		bool Dispatcher::has_event(const Ui_event event, $/;"	f	class:gui::event::Dispatcher
has_exclusive_option	client/cmdln.h	/^		bool has_exclusive_option() const { return exclusive_option_; }$/;"	f	class:Commandline
has_focus	client/events.cpp	/^        bool has_focus(const Sdl_handler* ptr, const SDL_Event* event)$/;"	f	namespace:events
has_handler	client/gui/core/event/dispatcher_private.h	/^				static bool has_handler(Dispatcher& dispatcher,$/;"	f	struct:gui::event::Dispatcher_implementation
has_hotkey_command	client/hotkey/hotkey_command.cpp	/^	bool has_hotkey_command(const std::string& id)$/;"	f	namespace:hotkey
has_hotkey_item	client/hotkey/hotkey_item.cpp	/^	bool has_hotkey_item(const std::string& command)$/;"	f	namespace:hotkey
has_joined	client/events.h	/^		        virtual bool has_joined() { return has_joined_; }$/;"	f	class:events::Sdl_handler
has_joined_	client/events.h	/^		        bool has_joined_;$/;"	m	class:events::Sdl_handler
has_joined_global	client/events.h	/^		        virtual bool has_joined_global() { return has_joined_global_; }$/;"	f	class:events::Sdl_handler
has_joined_global_	client/events.h	/^		        bool has_joined_global_;$/;"	m	class:events::Sdl_handler
has_key	common/configuration/ini_parser.h	/^		bool has_key(const std::string& key)$/;"	f	struct:ini_parser::section
has_result_	server/database/database/adhoc_statement.h	/^	bool has_result_;$/;"	m	class:basic_statement_task
has_result_	server/database/database/prepared_statement.h	/^	bool has_result_;$/;"	m	class:prepared_statement_task
has_section	common/configuration/ini_parser.cpp	/^bool ini_parser::has_section(const std::string& section)$/;"	f	class:ini_parser
has_unfinished_bit_pack	server/shared/packets/byte_buffer.h	/^	bool has_unfinished_bit_pack() const { return bitpos_ != 0; }$/;"	f	class:byte_buffer
has_written	client/net/buffer.h	/^	void has_written(size_t len)$/;"	f	class:net::Buffer
hash	client/color.h	/^        struct hash<Color>$/;"	s	namespace:std
hash	client/font/text_surface.cpp	/^void Text_surface::hash()$/;"	f	class:Text_surface
hash	client/image.cpp	/^	struct hash<image::Locator::Value>$/;"	s	namespace:std	file:
hash	server/database/update/update_fetcher.h	/^		const std::string& hash;$/;"	m	struct:update_fetcher::applied_file_entry
hash_	client/font/text_surface.h	/^		int hash_;$/;"	m	class:Text_surface
hash_to_file_name_storage	server/database/update/update_fetcher.h	/^	typedef std::unordered_map<std::string, std::string> hash_to_file_name_storage;$/;"	t	class:update_fetcher
hat_motion	client/gui/core/event/handler.cpp	/^		void Sdl_event_handler:hat_motion(const SDL_Event& event)$/;"	f	namespace:gui::event
have_focus	client/cursor.cpp	/^		bool have_focus = true;$/;"	m	namespace:cursor::__anon26	file:
header_buffer_	server/game/server/world_tcp_socket.h	/^	message_buffer header_buffer_;$/;"	m	class:world_tcp_socket::read_data_handler_result
heart_beat	client/old/server.h	/^	bool heart_beat()$/;"	f	struct:Descriptor
height	client/font/text_surface.cpp	/^size_t Text_surface::height() const$/;"	f	class:Text_surface
help	client/commandline_options.h	/^		bool help;$/;"	m	class:Commandline_options
help_string_	client/video.h	/^		int help_string_;$/;"	m	class:Video
hexed	client/image.h	/^	enum Img_type{unscaled, scaled_to_zoom, hexed, scaled_to_hex, tod_colored, brightened};$/;"	e	enum:image::Img_type
hexed_images_	client/image.cpp	/^		hexed_images_, $/;"	m	namespace:__anon32	file:
hexlike	server/shared/packets/byte_buffer.cpp	/^void byte_buffer::hexlike() const$/;"	f	class:byte_buffer
hidden	client/hotkey/hotkey_command.h	/^		bool hidden; \/\/ 如果隐藏则需要显示$/;"	m	struct:hotkey::Hotkey_command
hidden	client/hotkey/hotkey_command.h	/^		bool hidden;$/;"	m	struct:hotkey::Hotkey_command_temp
hidden	client/hotkey/hotkey_item.h	/^			virtual bool hidden() const { return false; }$/;"	f	class:hotkey::Hotkey_base
high_water_mark_	client/net/tcp_connection.h	/^  size_t high_water_mark_;$/;"	m	class:net::Tcp_connection
high_water_mark_callback_	client/net/tcp_connection.h	/^  High_water_mark_callback high_water_mark_callback_;$/;"	m	class:net::Tcp_connection
hit	client/gui/core/event/dispatcher.h	/^					hit,$/;"	e	enum:gui::event::Dispatcher::Mouse_behavior
holder_	server/database/database/query_holder.h	/^	sql_query_holder_base* holder_;$/;"	m	class:sql_query_holder_task
host	server/database/database/mysql_connection.h	/^	std::string host;$/;"	m	struct:mysql_connection_info
host_	client/old/connection_pool.h	/^		std::string host_;$/;"	m	class:Mysql_connection_factory
host_	client/old/mysql_pool.h	/^			std::string host_;$/;"	m	class:db::Connection_factory
host_	client/old/mysql_pool.h	/^			std::string host_;$/;"	m	class:db::Database
host_alias	client/Makefile	/^host_alias = $/;"	m
host_alias	client/old/Makefile	/^host_alias = $/;"	m
host_to_network_long	server/shared/networking/socket_operations.cpp	/^uint32_t host_to_network_long(uint32_t value) { return ::htonl(value); }$/;"	f
host_to_network_short	server/shared/networking/socket_operations.cpp	/^uint16_t host_to_network_short(uint16_t value) { return ::htons(value); }$/;"	f
hot_x	client/cursor.cpp	/^			int hot_x;$/;"	m	struct:cursor::__anon26::Cursor_data	file:
hot_y	client/cursor.cpp	/^			int hot_y;$/;"	m	struct:cursor::__anon26::Cursor_data	file:
hotfix_database_connection	server/database/database/implementation/hotfix_database.cpp	/^hotfix_database_connection::hotfix_database_connection(mysql_connection_info& conn_info) : mysql_connection(conn_info) {}$/;"	f	class:hotfix_database_connection
hotfix_database_connection	server/database/database/implementation/hotfix_database.cpp	/^hotfix_database_connection::hotfix_database_connection(producer_consumer_queue<sql_operation*>* q, mysql_connection_info& conn_info) : mysql_connection(q, conn_info) {}$/;"	f	class:hotfix_database_connection
hotfix_database_connection	server/database/database/implementation/hotfix_database.h	/^class hotfix_database_connection : public mysql_connection$/;"	c
hotkey	client/hotkey/hotkey_command.cpp	/^namespace hotkey$/;"	n	file:
hotkey	client/hotkey/hotkey_command.h	/^namespace hotkey$/;"	n
hotkey	client/hotkey/hotkey_item.cpp	/^namespace hotkey$/;"	n	file:
hotkey	client/hotkey/hotkey_item.h	/^namespace hotkey$/;"	n
hotkey_pressed	client/gui/core/event/handler.cpp	/^		bool Sdl_event_handler::hotkey_pressed(const hotkey::Hotkey_ptr key)$/;"	f	class:gui::event::Sdl_event_handler
hotkeys	client/hotkey/hotkey_item.cpp	/^	Hotkey_list hotkeys;$/;"	m	namespace:hotkey	file:
hotkeys_	client/gui/core/event/dispatcher.h	/^				std::map<hotkey::Hotkey_command, Hotkey_function> hotkeys_;$/;"	m	class:gui::event::Dispatcher
hover_position_	client/gui/core/event/distributor.h	/^				Point hover_position_;$/;"	m	class:gui::event::Mouse_motion
hover_shown_	client/gui/core/event/distributor.h	/^				bool hover_shown_;$/;"	m	class:gui::event::Mouse_motion
hover_timer_	client/gui/core/event/distributor.h	/^				size_t hover_timer_;$/;"	m	class:gui::event::Mouse_motion
hover_widget_	client/gui/core/event/distributor.h	/^				Widget* hover_widget_;$/;"	m	class:gui::event::Mouse_motion
how_much_time_from_now	client/net/timer_queue.cpp	/^timespec how_much_time_from_now(Timestamp when)$/;"	f	namespace:detail
how_much_time_from_now	server/shared/networking/timer_queue.cpp	/^timespec how_much_time_from_now(Timestamp when)$/;"	f	namespace:detail
htmldir	client/Makefile	/^htmldir = ${docdir}$/;"	m
htmldir	client/old/Makefile	/^htmldir = ${docdir}$/;"	m
hyperlink	client/cursor.h	/^		hyperlink,$/;"	e	enum:cursor::Cursor_type
id	client/hotkey/hotkey_command.h	/^		Hotkey_command id;$/;"	m	struct:hotkey::Hotkey_command
id	client/hotkey/hotkey_command.h	/^		Hotkey_command id;$/;"	m	struct:hotkey::Hotkey_command_temp
id	client/sound_music_track.h	/^			const std::string& id() const { return id_; }$/;"	f	class:sound::Music_track
id_	client/sound_music_track.h	/^			std::string id_;$/;"	m	class:sound::Music_track
id_	client/thread/thread.h	/^		Id id_;$/;"	m	class:Thread
id_	common/logging/appender.h	/^	uint8_t id_;$/;"	m	class:appender
idle_fd_	client/net/acceptor.h	/^int idle_fd_;$/;"	m	class:net::Acceptor
idle_fd_	server/shared/networking/acceptor.h	/^	int idle_fd_;$/;"	m	class:acceptor
ifs_close	client/filesystem.cpp	/^	static int SDLCALL ifs_close(struct SDL_RWops* context)$/;"	f	namespace:filesystem
ifs_read	client/filesystem.cpp	/^	static size_t SDLCALL ifs_read(struct SDL_RWops* context, void* ptr, size_t size, size_t maxnum)$/;"	f	namespace:filesystem
ifs_seek	client/filesystem.cpp	/^	static int64_t SDLCALL ifs_seek(struct SDL_RWops* context, int64_t offset, int whence)$/;"	f	namespace:filesystem
ifs_size	client/filesystem.cpp	/^	static int64_t ifs_size(struct SDL_RWops* context)$/;"	f	namespace:filesystem
ifs_write	client/filesystem.cpp	/^	static size_t SDLCALL ifs_write(struct SDL_RWops* context, const void* ptr, size_t size, size_t num)$/;"	f	namespace:filesystem
image	client/image.cpp	/^namespace image$/;"	n	file:
image	client/image.h	/^namespace image$/;"	n
image_bw	client/cursor.cpp	/^			std::string image_bw;$/;"	m	struct:cursor::__anon26::Cursor_data	file:
image_color	client/cursor.cpp	/^			std::string image_color;$/;"	m	struct:cursor::__anon26::Cursor_data	file:
images_	client/image.cpp	/^	image::Image_cache images_, $/;"	m	namespace:__anon32	file:
immediate	client/sound_music_track.h	/^			bool immediate() const { return immediate_; }$/;"	f	class:sound::Music_track
immediate_	client/sound_music_track.h	/^			bool immediate_;$/;"	m	class:sound::Music_track
impl_	server/shared/networking/ip/basic_endpoint.h	/^	endpoint impl_;$/;"	m	class:basic_endpoint
implementation	client/gui/core/event/dispatcher_private.h	/^		namespace implementation$/;"	n	namespace:gui::event
in4_addr_type	server/shared/networking/socket_types.h	/^typedef in_addr in4_addr_type;$/;"	t
in6_addr_type	server/shared/networking/socket_types.h	/^typedef in6_addr in6_addr_type;$/;"	t
in_cache	client/image.cpp	/^	bool Locator::in_cache(Cache_type<T>& cache) const$/;"	f	class:image::Locator
inaddr_any	client/net/inet_address.cpp	/^static const in_addr_t inaddr_any = INADDR_ANY;$/;"	v	file:
inaddr_loopback	client/net/inet_address.cpp	/^static const in_addr_t inaddr_loopback = INADDR_LOOPBACK;$/;"	v	file:
includedir	client/Makefile	/^includedir = ${prefix}\/include$/;"	m
includedir	client/old/Makefile	/^includedir = ${prefix}\/include$/;"	m
increment_chunk_usage	client/sound.cpp	/^static void increment_chunk_usage(Mix_chunk* mcp)$/;"	f	file:
indent	client/log.cpp	/^static int indent = 0;$/;"	v	file:
indent_width	client/json.h	/^enum class Format : uint8_t { indent_width = 2 };$/;"	m	class:Format
index	client/net/channel.h	/^	int index() { return index_; }$/;"	f	class:net::Channel
index	client/serialization/unicode.cpp	/^size_t index(const std::string& str, size_t index)$/;"	f	namespace:utf8
index_	client/image.h	/^			int index_;$/;"	m	class:image::Locator
index_	client/net/channel.h	/^	int index_; \/\/ used by Poller.$/;"	m	class:net::Channel
index_	server/database/database/prepared_statement.h	/^	uint32_t index_;$/;"	m	class:prepared_statement_base
inet_ntop	server/shared/networking/socket_operations.cpp	/^const char* inet_ntop(int domain, const void* addrptr, char* dst_str, size_t len, uint64_t scope_id, std::error_code& ec)$/;"	f
inet_pton	server/shared/networking/socket_operations.cpp	/^int inet_pton(int domain, const char* src_str, void* addrptr, uint64_t* scope_id, std::error_code& ec)$/;"	f
info	client/log.cpp	/^	Logger& info()$/;"	f	namespace:lg
info_	client/sdl/window.h	/^		SDL_RendererInfo info_;$/;"	m	class:Window
infodir	client/Makefile	/^infodir = ${datarootdir}\/info$/;"	m
infodir	client/old/Makefile	/^infodir = ${datarootdir}\/info$/;"	m
inherit_env	server/process/inherit_env.h	/^struct inherit_env : public initializer_base$/;"	s
ini_	common/configuration/config.h	/^	ini_parser ini_;$/;"	m	class:config_mgr
ini_parser	common/configuration/ini_parser.h	/^class ini_parser$/;"	c
init	common/cmdline/cmdline.cpp	/^void cmdline::init(const std::vector<std::string>& args)$/;"	f	class:cmdline
init	common/logging/old_logging/async_log.cpp	/^void Async_log::init(const std::string& filename, off_t roll_size,$/;"	f	class:lg::Async_log
init	common/logging/old_logging/logging.cpp	/^void Logger::init(Logger::Log_level level, int old_errno, const std::string& file, int line, $/;"	f	class:lg::Logger
initLogLevel	common/logging/old_logging/logging.cpp	/^Logger::Log_level initLogLevel()$/;"	f	namespace:lg
init_binary_paths	client/filesystem.cpp	/^	static void init_binary_paths()$/;"	f	namespace:filesystem
init_colors	common/logging/appender_console.cpp	/^void appender_console::init_colors(const std::string& str)$/;"	f	class:appender_console
init_index	client/image.cpp	/^	void Locator::init_index()$/;"	f	class:image::Locator
init_locale	client/main.cpp	/^static void init_locale()$/;"	f	file:
init_locale	client/old/main.cpp	/^void init_locale()$/;"	f
init_log	common/logging/old_logging/log_stream.cpp	/^void init_log(const std::string& file, int rolle_size)$/;"	f	namespace:lg
init_log	common/logging/old_logging/logging.cpp	/^void init_log(const std::string& file, int rolle_size)$/;"	f
init_mouse_location	client/gui/core/event/handler.cpp	/^		void init_mouse_location()$/;"	f	namespace:gui::event
init_sdl	client/video.cpp	/^void init_sdl()$/;"	f
init_sound	client/sound.cpp	/^	bool init_sound()$/;"	f	namespace:sound
init_window	client/video.cpp	/^void Video::init_window()$/;"	f	class:Video
initial_bit_pos	server/shared/packets/byte_buffer.h	/^	static uint8_t const initial_bit_pos = 8;$/;"	m	class:byte_buffer
initial_size	client/net/buffer.cpp	/^const size_t Buffer::initial_size = 1024;$/;"	m	class:net::Buffer	file:
initial_size	client/net/buffer.h	/^	static const size_t initial_size;$/;"	m	class:net::Buffer
initialise	client/events.cpp	/^		void initialise() { \/* Add things as necessary *\/ }$/;"	f	namespace:events
initialize	common/logging/log.cpp	/^void log::initialize(event_loop* event_loop)$/;"	f	class:log
initialize	server/game/server/protocol/opcodes.cpp	/^void opcode_table::initialize()$/;"	f	class:opcode_table
initialize	server/game/server/protocol/packet_log.cpp	/^void packet_log::initialize()$/;"	f	class:packet_log
initialize	server/game/server/world_packet.h	/^	void initialize(uint16_t opcode, size_t newres = 200, connection_type connection = CONNECTION_TYPE_DEFAULT)$/;"	f	class:world_packet
initialize_handler	server/game/server/world_tcp_socket.cpp	/^void world_tcp_socket::initialize_handler(std::error_code error, size_t transfered_bytes)$/;"	f	class:world_tcp_socket
initialized_	client/font/text_surface.h	/^		mutable bool initialized_;$/;"	m	class:Text_surface
initializer_base	server/process/initializer.h	/^struct initializer_base$/;"	s
initializer_base	server/process/test.cpp	/^struct initializer_base$/;"	s	file:
input_buffer	client/net/tcp_connection.h	/^  Buffer* input_buffer()$/;"	f	class:net::Tcp_connection
input_buffer_	client/net/tcp_connection.h	/^  Buffer input_buffer_;$/;"	m	class:net::Tcp_connection
insert	client/net/timer_queue.cpp	/^bool Timer_queue::insert(Timer* timer)$/;"	f	class:net::Timer_queue
insert	client/serialization/unicode.cpp	/^std::string& insert(std::string& str, size_t pos, const std::string& insert)$/;"	f	namespace:utf8
insert	client/utils/json.h	/^    iterator insert(const_iterator pos, basic_json&& val)$/;"	f	class:basic_json
insert	client/utils/json.h	/^    iterator insert(const_iterator pos, const basic_json& val)$/;"	f	class:basic_json
insert	client/utils/json.h	/^    iterator insert(const_iterator pos, const_iterator first, const_iterator last)$/;"	f	class:basic_json
insert	client/utils/json.h	/^    iterator insert(const_iterator pos, initializer_list_t ilist)$/;"	f	class:basic_json
insert	client/utils/json.h	/^    iterator insert(const_iterator pos, size_type cnt, const basic_json& val)$/;"	f	class:basic_json
insert	client/utils/json.h	/^    void insert(const_iterator first, const_iterator last)$/;"	f	class:basic_json
insert	server/shared/networking/timer_queue.cpp	/^bool timer_queue::insert(timer* timer)$/;"	f	class:timer_queue
insert_data	client/old/database.cpp	/^	bool insert_data(MYSQL* mysql, const std::string& sql)$/;"	f	namespace:db
insert_item_in_array	client/config.cpp	/^void Config::insert_item_in_array(Config::Node* array, int which, $/;"	f	class:Config
insert_iterator	client/utils/json.h	/^    iterator insert_iterator(const_iterator pos, Args&& ... args)$/;"	f	class:basic_json
insert_text	client/font/text.cpp	/^	unsigned Pango_text::insert_text(unsigned offset, $/;"	f	class:font::Pango_text
install_sh	client/Makefile	/^install_sh = ${SHELL} \/home\/mylw\/cpp\/Martial_arts\/install-sh$/;"	m
install_sh	client/old/Makefile	/^install_sh = ${SHELL} \/home\/mylw\/Martial_arts\/src\/server\/install-sh$/;"	m
install_sh_DATA	client/Makefile	/^install_sh_DATA = $(install_sh) -c -m 644$/;"	m
install_sh_DATA	client/old/Makefile	/^install_sh_DATA = $(install_sh) -c -m 644$/;"	m
install_sh_PROGRAM	client/Makefile	/^install_sh_PROGRAM = $(install_sh) -c$/;"	m
install_sh_PROGRAM	client/old/Makefile	/^install_sh_PROGRAM = $(install_sh) -c$/;"	m
install_sh_SCRIPT	client/Makefile	/^install_sh_SCRIPT = $(install_sh) -c$/;"	m
install_sh_SCRIPT	client/old/Makefile	/^install_sh_SCRIPT = $(install_sh) -c$/;"	m
instance	common/configuration/config.cpp	/^config_mgr* config_mgr::instance()$/;"	f	class:config_mgr
instance	common/logging/log.cpp	/^log* log::instance()$/;"	f	class:log
instance	common/logging/old_logging/async_log.cpp	/^Async_log* Async_log::instance()$/;"	f	class:lg::Async_log
instance	server/game/server/protocol/packet_log.cpp	/^packet_log* packet_log::instance()$/;"	f	class:packet_log
instance	server/game/server/world_tcp_socket_mgr.cpp	/^world_socket_mgr& world_socket_mgr::instance()$/;"	f	class:world_socket_mgr
int16	common/define.h	/^typedef int16_t int16;$/;"	t
int16	server/database/database/field.h	/^	int16,$/;"	m	class:database_field_type
int16	server/database/database/prepared_statement.h	/^	int16_t int16;$/;"	m	union:prepared_statement_data_union
int2byte	client/old/utils.cpp	/^void int2byte(char* data, int num)$/;"	f
int32	common/define.h	/^typedef int32_t int32;$/;"	t
int32	server/database/database/field.h	/^	int32,$/;"	m	class:database_field_type
int32	server/database/database/prepared_statement.h	/^	int32_t int32;$/;"	m	union:prepared_statement_data_union
int64	common/define.h	/^typedef int64_t int64;$/;"	t
int64	server/database/database/field.h	/^	int64,$/;"	m	class:database_field_type
int64	server/database/database/prepared_statement.h	/^	int64_t int64;$/;"	m	union:prepared_statement_data_union
int8	common/define.h	/^typedef int8_t int8;$/;"	t
int8	server/database/database/field.h	/^	int8,$/;"	m	class:database_field_type
int8	server/database/database/prepared_statement.h	/^	int8_t int8;$/;"	m	union:prepared_statement_data_union
int8_t	server/game/server/protocol/opcodes.h	/^enum connection_type : int8_t$/;"	g
int8_t	server/game/server/protocol/packet_log.h	/^enum connection_type : int8_t;$/;"	v	typeref:enum:connection_type
internal	client/cmdln.cpp	/^int Commandline::internal  = 0x0002;$/;"	m	class:Commandline	file:
internal	client/cmdln.h	/^		static int internal;$/;"	m	class:Commandline
internal_capacity	client/net/buffer.h	/^	size_t internal_capacity() const { return buffer_.capacity(); }$/;"	f	class:net::Buffer
internal_index	server/database/database/database_worker_pool.h	/^	enum internal_index$/;"	g	class:database_worker_pool
internal_table_client_	server/game/server/protocol/opcodes.h	/^	client_opcode_handler* internal_table_client_[NUM_OPCODE_HANDLES];$/;"	m	class:opcode_table
internal_table_server_	server/game/server/protocol/opcodes.h	/^	server_opcode_handler* internal_table_server_[NUM_OPCODE_HANDLES];$/;"	m	class:opcode_table
intersect_rects	client/sdl/rect.cpp	/^SDL_Rect intersect_rects(SDL_Rect const& rect1, SDL_Rect const& rect2)$/;"	f
interval_	client/net/timer.h	/^	const double interval_;$/;"	m	class:net::Timer
interval_	server/shared/networking/timer.h	/^	const double interval_;$/;"	m	class:timer
invalid	client/cmdln.h	/^			invalid,$/;"	m	class:Commandline::Param_value_status
invalid	client/cmdln.h	/^			invalid,$/;"	m	class:Commandline::Value_status
invalid	common/utility/timestamp.h	/^	static Timestamp invalid()$/;"	f	class:Timestamp
invalid_appender_args_exception	common/logging/appender.h	/^	explicit invalid_appender_args_exception(const std::string& message) : std::length_error(message) {}$/;"	f	struct:invalid_appender_args_exception
invalid_appender_args_exception	common/logging/appender.h	/^struct invalid_appender_args_exception : std::length_error$/;"	s
invalid_socket	server/shared/networking/socket_types.h	/^constexpr int invalid_socket = -1;$/;"	v
inverse	client/color.h	/^	Color inverse() const$/;"	f	struct:Color
invoke	client/thread/thread.h	/^			->decltype(std::invoke(declval_s<Ind>()...))$/;"	f	struct:Thread::Invoker
invoke_if_ready	server/database/database/query_callback.cpp	/^query_callback::status query_callback::invoke_if_ready()$/;"	f	class:query_callback
ip_country_	server/game/server/world_tcp_socket.h	/^	std::string ip_country_;$/;"	m	class:world_tcp_socket::read_data_handler_result
ip_len	client/old/utils.cpp	/^	constexpr int ip_len = 128;$/;"	m	namespace:net	file:
ip_port	client/net/tcp_server.h	/^	const std::string& ip_port() const { return ip_port_; }$/;"	f	class:net::Tcp_server
ip_port	server/shared/networking/tcp_server.h	/^	const std::string& ip_port() const { return ip_port_; }$/;"	f	class:net::Tcp_server
ip_port_	client/net/tcp_server.h	/^	const std::string ip_port_;$/;"	m	class:net::Tcp_server
ip_port_	server/shared/networking/tcp_server.h	/^	const std::string ip_port_;$/;"	m	class:net::Tcp_server
ipv4	server/shared/networking/ip/address.h	/^	enum { ipv4, ipv6 } type_;$/;"	e	enum:address::__anon7
ipv4_address_	server/shared/networking/ip/address.h	/^	address_v4 ipv4_address_;$/;"	m	class:address
ipv6	server/shared/networking/ip/address.h	/^	enum { ipv4, ipv6 } type_;$/;"	e	enum:address::__anon7
ipv6_address_	server/shared/networking/ip/address.h	/^	address_v6 ipv6_address_;$/;"	m	class:address
is	client/json.h	/^	bool is() const$/;"	f	class:Format::Value
is_array	client/json.h	/^	bool is_array() const { return type_ == Type::array; }$/;"	f	class:Format::Value
is_array	client/utils/json.h	/^    constexpr bool is_array() const $/;"	f	class:basic_json
is_boolean	client/json.h	/^	bool is_boolean() const { return type_ == Type::boolean; }$/;"	f	class:Format::Value
is_boolean	client/utils/json.h	/^    constexpr bool is_boolean() const \\$/;"	f	class:basic_json
is_canonical	client/version.cpp	/^bool Version_info::is_canonical() const$/;"	f	class:Version_info
is_color	client/cursor.cpp	/^			bool is_color;$/;"	m	struct:cursor::__anon26::Cursor_data	file:
is_data_url	client/image.h	/^				bool is_data_url;$/;"	m	struct:image::Locator::Value
is_data_url	client/image.h	/^			bool is_data_url() const { return val_.is_data_url_; }$/;"	f	class:image::Locator
is_default	client/hotkey/hotkey_item.h	/^			bool is_default() const { return is_default_; }$/;"	f	class:hotkey::Hotkey_base
is_default_	client/hotkey/hotkey_item.h	/^			bool is_default_;$/;"	m	class:hotkey::Hotkey_base
is_disabled	client/hotkey/hotkey_item.h	/^			bool is_disabled() const { return is_disabled_; }$/;"	f	class:hotkey::Hotkey_base
is_disabled_	client/hotkey/hotkey_item.h	/^			bool is_disabled_;$/;"	m	class:hotkey::Hotkey_base
is_discarded	client/utils/json.h	/^    constexpr bool is_discarded() const $/;"	f	class:basic_json
is_down_	client/gui/core/event/distributor.h	/^				bool is_down_;$/;"	m	class:gui::event::Mouse_button
is_enabled	server/database/update/db_update.cpp	/^bool db_updater<character_database_connection>::is_enabled(const uint32_t update_mask)$/;"	f	class:db_updater
is_enabled	server/database/update/db_update.cpp	/^bool db_updater<hotfix_database_connection>::is_enabled(const uint32_t update_mask)$/;"	f	class:db_updater
is_enabled	server/database/update/db_update.cpp	/^bool db_updater<login_database_connection>::is_enabled(const uint32_t update_mask)$/;"	f	class:db_updater
is_enabled	server/database/update/db_update.cpp	/^bool db_updater<world_database_connection>::is_enabled(const uint32_t update_mask)$/;"	f	class:db_updater
is_eof	client/old/mysql_pool.h	/^			bool is_eof() { return row_ == nullptr; }$/;"	f	class:db::Query
is_filename_case_correct	client/filesystem.cpp	/^bool is_filename_case_correct(const std::string& name, std::ifstream& fd)$/;"	f
is_float	client/config.cpp	/^static bool is_float(double number)$/;"	f	file:
is_format_empty_or_null	common/utility/string_format.h	/^inline bool is_format_empty_or_null(const char* fmt)$/;"	f
is_format_empty_or_null	common/utility/string_format.h	/^inline bool is_format_empty_or_null(const std::string& fmt)$/;"	f
is_general_event	client/gui/core/event/dispatcher.h	/^		constexpr bool is_general_event(const Ui_event event)$/;"	f	namespace:gui::event
is_hotkeyable_event	client/hotkey/hotkey_item.cpp	/^	bool is_hotkeyable_event(const SDL_Event& event)$/;"	f	namespace:hotkey
is_in_dialog	client/gui/core/event/handler.cpp	/^	bool is_in_dialog()$/;"	f	namespace:gui
is_in_loop_thread	client/net/event_loop.h	/^  	bool is_in_loop_thread() const $/;"	f	class:net::Event_loop
is_in_loop_thread	server/shared/networking/event_loop.cpp	/^bool event_loop::is_in_loop_thread() const $/;"	f	class:event_loop
is_input	client/events.cpp	/^        bool is_input(const SDL_Event& event)$/;"	f	namespace:events
is_instance_only_opcode	server/game/server/protocol/opcodes.h	/^inline bool is_instance_only_opcode(uint32_t opcode)$/;"	f
is_int64	client/json.h	/^	bool is_int64() const { return type_ == Type::number_float; }$/;"	f	class:Format::Value
is_keyboard_event	client/gui/core/event/dispatcher.h	/^		constexpr bool is_keyboard_event(const Ui_event event)$/;"	f	namespace:gui::event
is_legal_file	client/filesystem.cpp	/^	static bool is_legal_file(const std::string& filename)$/;"	f	namespace:filesystem
is_link_local	server/shared/networking/ip/address_v6.cpp	/^bool address_v6::is_link_local() const $/;"	f	class:address_v6
is_loopback	server/shared/networking/ip/address.cpp	/^bool address::is_loopback() const $/;"	f	class:address
is_loopback	server/shared/networking/ip/address_v4.cpp	/^bool address_v4::is_loopback() const $/;"	f	class:address_v4
is_loopback	server/shared/networking/ip/address_v6.cpp	/^bool address_v6::is_loopback() const $/;"	f	class:address_v6
is_message_event	client/gui/core/event/dispatcher.h	/^		constexpr bool is_message_event(const Ui_event event)$/;"	f	namespace:gui::event
is_mouse_event	client/gui/core/event/dispatcher.h	/^		constexpr bool is_mouse_event(const Ui_event event)$/;"	f	namespace:gui::event
is_multicast	server/shared/networking/ip/address.cpp	/^bool address::is_multicast() const $/;"	f	class:address
is_multicast	server/shared/networking/ip/address_v4.cpp	/^bool address_v4::is_multicast() const $/;"	f	class:address_v4
is_multicast	server/shared/networking/ip/address_v6.cpp	/^bool address_v6::is_multicast() const $/;"	f	class:address_v6
is_multicast_global	server/shared/networking/ip/address_v6.cpp	/^bool address_v6::is_multicast_global() const $/;"	f	class:address_v6
is_multicast_link_local	server/shared/networking/ip/address_v6.cpp	/^bool address_v6::is_multicast_link_local() const $/;"	f	class:address_v6
is_multicast_node_local	server/shared/networking/ip/address_v6.cpp	/^bool address_v6::is_multicast_node_local() const $/;"	f	class:address_v6
is_multicast_org_local	server/shared/networking/ip/address_v6.cpp	/^bool address_v6::is_multicast_org_local() const $/;"	f	class:address_v6
is_multicast_site_local	server/shared/networking/ip/address_v6.cpp	/^bool address_v6::is_multicast_site_local() const $/;"	f	class:address_v6
is_negative	common/cryptography/big_number.cpp	/^bool big_number::is_negative() const$/;"	f	class:big_number
is_neutral	client/sdl/utils.cpp	/^bool is_neutral(const Surface& surf)$/;"	f
is_none_event	client/net/channel.h	/^	bool is_none_event() const { return events_ == none_event_; }$/;"	f	class:net::Channel
is_none_event	server/shared/networking/channel.h	/^	bool is_none_event() const { return events_ == none_event_; }$/;"	f	class:channel
is_notification_event	client/gui/core/event/dispatcher.h	/^		constexpr bool is_notification_event(const Ui_event event)$/;"	f	namespace:gui::event
is_null	client/json.h	/^	bool is_null() const { return type_ == Type::null; }$/;"	f	class:Format::Value
is_null	client/utils/json.h	/^    constexpr bool is_null() const { return (type_ == value_t::null); }$/;"	f	class:basic_json
is_null	server/database/database/field.h	/^	bool is_null() const { return data_.value == nullptr; }$/;"	f	class:field
is_number	client/json.h	/^	bool is_number() const { return type_ == Type::number_integer; }$/;"	f	class:Format::Value
is_number	client/utils/json.h	/^    constexpr bool is_number() const $/;"	f	class:basic_json
is_number_float	client/utils/json.h	/^    constexpr bool is_number_float() const $/;"	f	class:basic_json
is_number_integer	client/utils/json.h	/^    constexpr bool is_number_integer() const $/;"	f	class:basic_json
is_number_unsigned	client/utils/json.h	/^    constexpr bool is_number_unsigned() const $/;"	f	class:basic_json
is_numeric	server/database/database/field.cpp	/^bool field::is_numeric() const$/;"	f	class:field
is_object	client/json.h	/^	bool is_object() const { return type_ == Type::object; }$/;"	f	class:Format::Value
is_object	client/utils/json.h	/^    constexpr bool is_object() const $/;"	f	class:basic_json
is_open	server/shared/networking/acceptor.h	/^	bool is_open() const { return is_open_; }$/;"	f	class:acceptor
is_open	server/shared/networking/socket.h	/^	bool is_open() const { return fd_ != invalid_socket; }$/;"	f	class:socket
is_open	server/shared/networking/tcp_socket.h	/^	bool is_open() const { return !closed_ && !closing_; }$/;"	f	class:tcp_socket
is_open_	server/shared/networking/acceptor.h	/^	bool is_open_;$/;"	m	class:acceptor
is_prepared_	server/database/database/query_callback.cpp	/^	bool is_prepared_;$/;"	m	struct:query_callback::query_callback_data	file:
is_prepared_	server/database/database/query_callback.h	/^	bool is_prepared_;$/;"	m	class:query_callback
is_primitive	client/utils/json.h	/^    constexpr bool is_primitive() const $/;"	f	class:basic_json
is_raw_event_event	client/gui/core/event/dispatcher.h	/^		constexpr bool is_raw_event_event(const Ui_event event)$/;"	f	namespace:gui::event
is_read	client/net/channel.h	/^	bool is_read() const { return events_ & read_event_; }$/;"	f	class:net::Channel
is_read	server/shared/networking/channel.h	/^	bool is_read() const { return events_ & read_event_; }$/;"	f	class:channel
is_reading	client/net/tcp_connection.h	/^  bool is_reading() const { return reading_; }; \/\/ NOT thread safe, may race with start\/stopReadInLoop$/;"	f	class:net::Tcp_connection
is_scope_active	client/hotkey/hotkey_command.cpp	/^	bool is_scope_active(Hk_scopes s)$/;"	f	namespace:hotkey
is_scope_active	client/hotkey/hotkey_command.cpp	/^	bool is_scope_active(Scope s) $/;"	f	namespace:hotkey
is_site_local	server/shared/networking/ip/address_v6.cpp	/^bool address_v6::is_site_local() const $/;"	f	class:address_v6
is_string	client/json.h	/^	bool is_string() const { return type_ == Type::string; }$/;"	f	class:Format::Value
is_string	client/utils/json.h	/^    constexpr bool is_string() const $/;"	f	class:basic_json
is_structured	client/utils/json.h	/^    constexpr bool is_structured() const $/;"	f	class:basic_json
is_surface_split	client/font/text.h	/^			bool is_surface_split() const { return sublayouts_size() > 0; }$/;"	f	class:font::Pango_text
is_text_input_event	client/gui/core/event/dispatcher.h	/^		constexpr bool is_text_input_event(const Ui_event event)$/;"	f	namespace:gui::event
is_touch_event	client/gui/core/event/dispatcher.h	/^		constexpr bool is_touch_event(const Ui_event event)$/;"	f	namespace:gui::event
is_truncated	client/font/text.cpp	/^	bool Pango_text::is_truncated() const$/;"	f	class:font::Pango_text
is_type	server/database/database/field.h	/^	bool is_type(database_field_type type) const { return data_.type == type; }$/;"	f	class:field
is_uncomposable	client/key.cpp	/^bool Key::is_uncomposable(const SDL_KeyboardEvent& event)$/;"	f	class:Key
is_unspecified	server/shared/networking/ip/address.cpp	/^bool address::is_unspecified() const $/;"	f	class:address
is_unspecified	server/shared/networking/ip/address_v4.cpp	/^bool address_v4::is_unspecified() const $/;"	f	class:address_v4
is_unspecified	server/shared/networking/ip/address_v6.cpp	/^bool address_v6::is_unspecified() const $/;"	f	class:address_v6
is_v4	server/shared/networking/ip/address.h	/^	bool is_v4() const { return type_ == ipv4; }$/;"	f	class:address
is_v4	server/shared/networking/ip/endpoint.h	/^	bool is_v4() const $/;"	f	class:endpoint
is_v4_mapped	server/shared/networking/ip/address_v6.cpp	/^bool address_v6::is_v4_mapped() const $/;"	f	class:address_v6
is_v6	server/shared/networking/ip/address.h	/^	bool is_v6() const { return type_ == ipv6; }$/;"	f	class:address
is_valid_size	server/game/server/world_tcp_socket.h	/^	bool is_valid_size() const { return size < 0x10000; }$/;"	f	struct:packet_header
is_void	client/image.h	/^			bool is_void() const { return val_.type_ == Type;;NONE; }$/;"	f	class:image::Locator
is_write	client/net/channel.h	/^	bool is_write() const { return events_ & write_event_; }$/;"	f	class:net::Channel
is_write	server/shared/networking/channel.h	/^	bool is_write() const { return events_ & write_event_; }$/;"	f	class:channel
is_zero	common/cryptography/big_number.cpp	/^bool big_number::is_zero() const$/;"	f	class:big_number
istream_file	client/filesystem.cpp	/^	scoped_istream istream_file(const std::string& name, $/;"	f	namespace:filesystem
iswriting_sync_	server/shared/networking/tcp_socket.h	/^	bool iswriting_sync_;$/;"	m	class:tcp_socket
it	client/json.h	/^	Iter it;$/;"	m	struct:Format::Serialize
italic_name	client/font/font_description.h	/^	std::optional<std::string> italic_name;$/;"	m	struct:Subset_descriptor
italic_name	client/font/subset_descriptor.h	/^		std::optional<std::string> italic_name;$/;"	m	struct:font::Subset_descriptor
italic_names	client/font/sdl_ttf.cpp	/^static std::vector<std::string> italic_names;$/;"	v	file:
item	client/image.cpp	/^	T item;$/;"	m	struct:Cache_item	file:
items	client/utils/json.h	/^    iteration_proxy<const_iterator> items() const $/;"	f	class:basic_json
items	client/utils/json.h	/^    iteration_proxy<iterator> items() $/;"	f	class:basic_json
iterable	client/events.h	/^	T& iterable;$/;"	m	struct:Reversion
iteration	client/net/event_loop.h	/^	int64_t iteration() const { return iteration_; }$/;"	f	class:net::Event_loop
iteration_	client/net/event_loop.h	/^  	int64_t iteration_;$/;"	m	class:net::Event_loop
iterator_wrapper	client/utils/json.h	/^    static iteration_proxy<const_iterator> iterator_wrapper(const_reference ref) $/;"	f	class:basic_json
iterator_wrapper	client/utils/json.h	/^    static iteration_proxy<iterator> iterator_wrapper(reference ref) $/;"	f	class:basic_json
join	client/events.cpp	/^        void Sdl_handler::join()$/;"	f	class:events::Sdl_handler
join	client/events.cpp	/^        void Sdl_handler::join(Context& c)$/;"	f	class:events::Sdl_handler
join	client/thread/thread.cpp	/^void Thread::join()$/;"	f	class:Thread
join	common/serialization/string_utils.cpp	/^std::string join(const std::vector<std::string>& input, const std::string& separator)$/;"	f
join_global	client/events.cpp	/^        void Sdl_handler::join_global()$/;"	f	class:events::Sdl_handler
join_same	client/events.cpp	/^        void Sdl_handler::join_same(Sdl_handler* parent)$/;"	f	class:events::Sdl_handler
joinable	client/thread/thread.h	/^		bool joinable() const { return !(id_ == Id()); }$/;"	f	class:Thread
json_delete	client/config.cpp	/^void Config::json_delete(Config::Node* j)$/;"	f	class:Config
json_minify	client/config.cpp	/^void Config::json_minify(std::string& json)$/;"	f	class:Config
json_print_unformatted	client/config.h	/^		std::string json_print_unformatted(Node* item)$/;"	f	class:Config
json_value	client/utils/json.h	/^        json_value(array_t&& value)$/;"	f	union:basic_json::json_value
json_value	client/utils/json.h	/^        json_value(boolean_t v)  : boolean(v) {}$/;"	f	union:basic_json::json_value
json_value	client/utils/json.h	/^        json_value(const array_t& value)$/;"	f	union:basic_json::json_value
json_value	client/utils/json.h	/^        json_value(const object_t& value)$/;"	f	union:basic_json::json_value
json_value	client/utils/json.h	/^        json_value(const string_t& value)$/;"	f	union:basic_json::json_value
json_value	client/utils/json.h	/^        json_value(number_float_t v)  : number_float(v) {}$/;"	f	union:basic_json::json_value
json_value	client/utils/json.h	/^        json_value(number_integer_t v)  : number_integer(v) {}$/;"	f	union:basic_json::json_value
json_value	client/utils/json.h	/^        json_value(number_unsigned_t v)  : number_unsigned(v) {}$/;"	f	union:basic_json::json_value
json_value	client/utils/json.h	/^        json_value(object_t&& value)$/;"	f	union:basic_json::json_value
json_value	client/utils/json.h	/^        json_value(string_t&& value)$/;"	f	union:basic_json::json_value
json_value	client/utils/json.h	/^        json_value(value_t t)$/;"	f	union:basic_json::json_value
json_value	client/utils/json.h	/^    union json_value$/;"	u	class:basic_json
jump_to_multiplayer_	client/game_launcher.h	/^		bool jump_to_multiplayer_;$/;"	m	class:Game_launcher
kAdded	client/net/poller.cpp	/^const int kAdded = 1;$/;"	m	namespace:__anon19	file:
kConnected	client/net/tcp_connection.h	/^  enum StateE { kDisconnected, kConnecting, kConnected, kDisconnecting };$/;"	e	enum:net::Tcp_connection::StateE
kConnected	server/shared/networking/tcp_socket.h	/^	enum StateE { kDisconnected, kConnecting, kConnected, kDisconnecting };$/;"	e	enum:tcp_socket::StateE
kConnecting	client/net/tcp_connection.h	/^  enum StateE { kDisconnected, kConnecting, kConnected, kDisconnecting };$/;"	e	enum:net::Tcp_connection::StateE
kConnecting	server/shared/networking/tcp_socket.h	/^	enum StateE { kDisconnected, kConnecting, kConnected, kDisconnecting };$/;"	e	enum:tcp_socket::StateE
kDeleted	client/net/poller.cpp	/^const int kDeleted = 2;$/;"	m	namespace:__anon19	file:
kDisconnected	client/net/tcp_connection.h	/^  enum StateE { kDisconnected, kConnecting, kConnected, kDisconnecting };$/;"	e	enum:net::Tcp_connection::StateE
kDisconnected	server/shared/networking/tcp_socket.h	/^	enum StateE { kDisconnected, kConnecting, kConnected, kDisconnecting };$/;"	e	enum:tcp_socket::StateE
kDisconnecting	client/net/tcp_connection.h	/^  enum StateE { kDisconnected, kConnecting, kConnected, kDisconnecting };$/;"	e	enum:net::Tcp_connection::StateE
kDisconnecting	server/shared/networking/tcp_socket.h	/^	enum StateE { kDisconnected, kConnecting, kConnected, kDisconnecting };$/;"	e	enum:tcp_socket::StateE
kInit_event_list_size	client/net/poller.h	/^	static const int kInit_event_list_size = 16;$/;"	m	class:net::Poller
kMicro_seconds_per_second	common/utility/timestamp.h	/^	static const int kMicro_seconds_per_second = 1000 * 1000;$/;"	m	class:Timestamp
kNew	client/net/poller.cpp	/^const int kNew = -1;$/;"	m	namespace:__anon19	file:
kNoReusePort	client/net/tcp_server.h	/^		kNoReusePort,$/;"	e	enum:net::Tcp_server::Option
kNoReusePort	server/shared/networking/tcp_server.h	/^		kNoReusePort,$/;"	e	enum:net::Tcp_server::Option
kReusePort	client/net/tcp_server.h	/^		kReusePort,$/;"	e	enum:net::Tcp_server::Option
kReusePort	server/shared/networking/tcp_server.h	/^		kReusePort,$/;"	e	enum:net::Tcp_server::Option
k_roll_per_seconds_	common/logging/old_logging/log_file.h	/^	const static int k_roll_per_seconds_ = 60*60*24; \/\/ 一天$/;"	m	class:lg::Log_file
keep_alive	server/shared/networking/socket.cpp	/^socket_option option::keep_alive() $/;"	f	class:option
keepalive	server/database/database/database_worker_pool.cpp	/^void database_worker_pool<T>::keepalive()$/;"	f	class:database_worker_pool
key	client/config.h	/^			std::string key, value;$/;"	m	struct:Config::Node
key	client/key.h	/^class key$/;"	c
key	client/thread/condition_variable.cpp	/^pthread_key_t key;$/;"	v
key	common/cmdline/option.h	/^	std::string key;$/;"	m	struct:option
key	common/cmdline/option_description.cpp	/^const std::string& option_description::key() const$/;"	f	class:option_description
key_	server/game/server/world_tcp_socket.h	/^	uint64_t key_;$/;"	m	class:world_tcp_socket::read_data_handler_result
key_down	client/gui/core/event/handler.cpp	/^		void Sdl_event_handler::key_down(const SDL_Event& event)$/;"	f	class:gui::event::Sdl_event_handler
key_down	client/gui/core/event/handler.cpp	/^		void Sdl_event_handler::key_down(const SDL_Keycode key, $/;"	f	class:gui::event::Sdl_event_handler
key_init	client/thread/condition_variable.cpp	/^void key_init()$/;"	f
key_list_	client/key.h	/^		const uint8_t* key_list_;$/;"	m	class:key
keyboard	client/gui/core/event/handler.cpp	/^		void Sdl_event_handler::keyboard(const Ui_event event)$/;"	f	class:gui::event::Sdl_event_handler
keyboard_dispatcher	client/gui/core/event/handler.cpp	/^		Dispatcher* Sdl_event_handler::keyboard_dispatcher()$/;"	f	class:gui::event::Sdl_event_handler
keyboard_focus_	client/gui/core/event/distributor.h	/^				Widget* keyboard_focus_;$/;"	m	class:gui::event::Distributor
keyboard_focus_chain_	client/gui/core/event/distributor.h	/^				std::vector<Widget*> keyboard_focus_chain_;$/;"	m	class:gui::event::Distributor
keyboard_foucs_	client/gui/core/event/handler.cpp	/^				Dispatcher* keyboard_foucs_;$/;"	m	class:gui::event::Sdl_event_handler	file:
keycode_	client/hotkey/hotkey_item.h	/^			SDL_Keyboard keycode_;$/;"	m	class:hotkey::Hotkey_keyboard
known_hotkeys	client/hotkey/hotkey_command.cpp	/^		std::vector<Hotkey_command> known_hotkeys;$/;"	m	namespace:__anon18	file:
language	client/commandline_options.h	/^		std::optional<std::string> language;$/;"	m	class:Commandline_options
large_buffer	common/logging/old_logging/log_buffer.h	/^constexpr int large_buffer = 4194304;$/;"	m	namespace:lg
last_active	client/old/server.h	/^        time_t last_active;$/;"	m	struct:Descriptor
last_click_stamp_	client/gui/core/event/distributor.h	/^				uint32_t last_click_stamp_;$/;"	m	class:gui::event::Mouse_button
last_clicked_widget_	client/gui/core/event/distributor.h	/^				Widget* last_clicked_widget_;$/;"	m	class:gui::event::Mouse_button
last_flush_	common/logging/old_logging/log_file.h	/^	time_t last_flush_;$/;"	m	class:lg::Log_file
last_index	client/image.cpp	/^	static int last_index = 0;$/;"	m	namespace:image	file:
last_ping_time_	server/game/server/world_tcp_socket.h	/^	std::chrono::steady_clock::time_point last_ping_time_;$/;"	m	class:world_tcp_socket::read_data_handler_result
last_rect_	client/sdl/render_utils.h	/^		SDL_Rect last_rect_;$/;"	m	class:Render_raii_rect_setter_base
last_resize_event	client/events.cpp	/^        SDL_Event last_resize_event;$/;"	m	namespace:events	file:
last_resize_event_used	client/events.cpp	/^        bool last_resize_event_used = true;$/;"	m	namespace:events	file:
last_roll_	common/logging/old_logging/log_file.h	/^	time_t last_roll_;$/;"	m	class:lg::Log_file
last_socket_check_	client/old/server.h	/^		time_t last_socket_check_;$/;"	m	class:Server
last_target_	client/sdl/render_utils.h	/^		SDL_Texture* last_target_;$/;"	m	class:Render_target_setter
layout_	client/font/text.h	/^				std::function<void(void*)>> layout_;$/;"	m	class:font::Pango_text
leave	client/events.cpp	/^        void Sdl_handler::leave()$/;"	f	class:events::Sdl_handler
leave_global	client/events.cpp	/^        void Sdl_handler::leave_global()$/;"	f	class:events::Sdl_handler
len	client/old/packet_protocol.h	/^	uint16_t len;			\/\/数据长度 不包含包头和2字节包尾标志长度$/;"	m	struct:Packet_head
length	common/logging/old_logging/log_buffer.h	/^	int length() const { return static_cast<int>(current_ - data_); }$/;"	f	class:lg::Log_buffer
length	server/database/database/field.h	/^		uint32_t length;$/;"	m	struct:field::__anon2
length	server/game/server/protocol/packet_log.cpp	/^	uint32_t length;$/;"	m	struct:packet_header	file:
length_	client/font/text.h	/^			mutable size_t length_;$/;"	m	class:font::Pango_text
level	common/logging/log_message.h	/^	const log_level level;$/;"	m	struct:log_message
level	server/shared/networking/socket.h	/^	int level;$/;"	m	struct:socket_option
level_	common/logging/appender.h	/^	log_level level_;$/;"	m	class:appender
level_	common/logging/logger.h	/^	log_level level_;$/;"	m	class:logger
level_	common/logging/old_logging/logging.h	/^	Log_level level_;$/;"	m	class:Logger
lg	client/log.cpp	/^namespace lg$/;"	n	file:
lg	client/log.h	/^namespace lg$/;"	n
lg	common/logging/old_logging/async_log.cpp	/^namespace lg$/;"	n	file:
lg	common/logging/old_logging/async_log.h	/^namespace lg$/;"	n
lg	common/logging/old_logging/log_buffer.h	/^namespace lg$/;"	n
lg	common/logging/old_logging/log_file.cpp	/^namespace lg$/;"	n	file:
lg	common/logging/old_logging/log_file.h	/^namespace lg$/;"	n
lg	common/logging/old_logging/log_stream.cpp	/^namespace lg$/;"	n	file:
lg	common/logging/old_logging/log_stream.h	/^namespace lg$/;"	n
lg	common/logging/old_logging/logging.cpp	/^namespace lg$/;"	n	file:
libdir	client/Makefile	/^libdir = ${exec_prefix}\/lib$/;"	m
libdir	client/old/Makefile	/^libdir = ${exec_prefix}\/lib$/;"	m
libexecdir	client/Makefile	/^libexecdir = ${exec_prefix}\/libexec$/;"	m
libexecdir	client/old/Makefile	/^libexecdir = ${exec_prefix}\/libexec$/;"	m
library_end	server/database/database/mysql_threading.cpp	/^void mysql::library_end()$/;"	f	class:mysql
library_init	server/database/database/mysql_threading.cpp	/^void mysql::library_init()$/;"	f	class:mysql
line	client/json.h	/^	int line() const { return line_; }$/;"	f	class:Format::Input
line_	client/json.h	/^	int line_;$/;"	m	class:Format::Input
line_	common/logging/old_logging/logging.h	/^	int line_;$/;"	m	class:Logger
line_length_	common/cmdline/option_description.h	/^	const uint32_t line_length_ = 80;$/;"	m	class:options_description
line_size	client/font/sdl_ttf.cpp	/^SDL_Rect line_size(const std::string& line, int font_size, int style)$/;"	f
line_size_cache	client/font/sdl_ttf.cpp	/^static std::map<int, std::map<int, line_size_cache_map>> line_size_cache;$/;"	v	file:
line_size_cache_map	client/font/sdl_ttf.cpp	/^typedef std::map<std::string, SDL_Rect> line_size_cache_map;$/;"	t	file:
line_width	client/font/sdl_ttf.cpp	/^inline int line_width(const std::string& line, int font_size, int style)$/;"	f
link_aware	client/font/text.h	/^			bool link_aware() const { return link_aware_; }$/;"	f	class:font::Pango_text
link_aware_	client/font/text.h	/^			bool link_aware_;$/;"	m	class:font::Pango_text
link_color_	client/font/text.h	/^			Color link_color_;$/;"	m	class:font::Pango_text
list_logdomains	client/log.cpp	/^	std::string list_logdomains(const std::string& filter)$/;"	f	namespace:lg
listen	client/net/acceptor.cpp	/^void Acceptor::listen()$/;"	f	class:net::Acceptor
listen	client/net/net_utils.cpp	/^bool listen(int sockfd)$/;"	f	namespace:net
listen	client/net/socket.cpp	/^bool Socket::listen()$/;"	f	class:net::Socket
listen	client/old/listen_handler.h	/^		bool listen()$/;"	f	class:Listen_handler
listen	server/shared/networking/acceptor.cpp	/^void acceptor::listen(std::error_code& ec)$/;"	f	class:acceptor
listen	server/shared/networking/socket_operations.cpp	/^int listen(int sockfd, int backlog, std::error_code& ec)$/;"	f
listenfd	client/old/epoll_handler.cpp	/^	static int listenfd = -1;$/;"	m	namespace:event	file:
listenfd_	client/old/server.h	/^		int listenfd_, epollfd_;$/;"	m	class:Server
listenning	client/net/acceptor.h	/^  bool listenning() const { return listenning_; }$/;"	f	class:net::Acceptor
listenning_	client/net/acceptor.h	/^  bool listenning_;$/;"	m	class:net::Acceptor
load	server/database/database/database_loader.cpp	/^bool database_loader::load()$/;"	f	class:database_loader
load_font_config	client/font/font_config.cpp	/^	bool load_font_config()$/;"	f	namespace:font
load_from_config	client/hotkey/hotkey_item.cpp	/^	Hotkey_ptr load_from_config(const Config& cfg)$/;"	f	namespace:hotkey
load_from_config	common/logging/log.cpp	/^void log::load_from_config()$/;"	f	class:log
load_from_disk	client/image.cpp	/^	Surface load_from_disk(const Locator& loc)$/;"	f	namespace:image
load_hotkeys	client/hotkey/hotkey_item.cpp	/^	void load_hotkeys(const Config& cfg, bool set_as_default)$/;"	f	namespace:hotkey
load_image_file	client/image.cpp	/^	static Surface load_image_file(const image::Locator& loc)$/;"	f	namespace:image
load_initial	common/configuration/config.cpp	/^bool config_mgr::load_initial(const std::string& file, std::string& error)$/;"	f	class:config_mgr
loaded	client/image.cpp	/^	Cache_item() : item() loaded(false) {}$/;"	f	struct:Cache_item
loaded	client/image.cpp	/^	bool loaded;$/;"	m	struct:Cache_item	file:
local_addr_	client/net/tcp_connection.h	/^  const Inet_address local_addr_;$/;"	m	class:net::Tcp_connection
local_address	client/net/tcp_connection.h	/^  const Inet_address& local_address() const { return local_addr_; }$/;"	f	class:net::Tcp_connection
local_endpoint	server/shared/networking/socket.cpp	/^endpoint socket::local_endpoint(std::error_code& ec)$/;"	f	class:socket
locale	server/game/server/protocol/packet_log.cpp	/^	char locale[4];$/;"	m	struct:log_header	file:
locale_file_entry	server/database/update/update_fetcher.h	/^	typedef std::pair<path, state> locale_file_entry;$/;"	t	class:update_fetcher
locale_file_storage	server/database/update/update_fetcher.h	/^	typedef std::set<locale_file_entry, path_compare> locale_file_storage;$/;"	t	class:update_fetcher
localedir	client/Makefile	/^localedir = ${datarootdir}\/locale$/;"	m
localedir	client/old/Makefile	/^localedir = ${datarootdir}\/locale$/;"	m
localstatedir	client/Makefile	/^localstatedir = ${prefix}\/var$/;"	m
localstatedir	client/old/Makefile	/^localstatedir = ${prefix}\/var$/;"	m
locate_in_cache	client/image.cpp	/^	const T& Locator::locate_in_cache(Cache_type<T>& cache) const$/;"	f	class:image::Locator
location	client/gui/core/event/message.h	/^			const Point location;$/;"	m	struct:gui::event::Message_show_helptip
location	client/gui/core/event/message.h	/^			const Point location;$/;"	m	struct:gui::event::Message_show_tooltip
locator_finder	client/image.cpp	/^	image::Locator::Locator_finder locator_finder;$/;"	m	namespace:__anon32	file:
lock	client/thread/mutex.h	/^		void lock()$/;"	f	class:Mutex
lock	client/thread/mutex.h	/^		void lock()$/;"	f	class:Unique_lock
lock_if_ready	server/database/database/mysql_connection.cpp	/^bool mysql_connection::lock_if_ready()$/;"	f	class:mysql_connection
locked_	client/gui/core/event/distributor.cpp	/^				bool& locked_;$/;"	m	class:gui::event::Resource_locker	file:
log	client/commandline_options.h	/^		std::optional<std::vector<std::pair<int, std::string>>> log;$/;"	m	class:Commandline_options
log	common/logging/log.cpp	/^log::log() : appender_id_(0), lowest_log_level_(LOG_LEVEL_FATAL), event_loop_(nullptr)$/;"	f	class:log
log	common/logging/log.h	/^class log$/;"	c
log_dir_	common/logging/appender_file.h	/^	std::string log_dir_;$/;"	m	class:appender_file
log_header	server/game/server/protocol/packet_log.cpp	/^struct log_header$/;"	s	file:
log_hup_	client/net/channel.h	/^	bool log_hup_;$/;"	m	class:net::Channel
log_level	common/logging/log_common.h	/^enum log_level$/;"	g
log_level	common/logging/old_logging/logging.h	/^inline Logger::Log_level Logger::log_level()$/;"	f	class:Logger
log_message	common/logging/log_message.cpp	/^log_message::log_message(log_level level_, const std::string& type_, std::string&& text_) : $/;"	f	class:log_message
log_message	common/logging/log_message.cpp	/^log_message::log_message(log_level level_, const std::string& type_, std::string&& text_, std::string&& param1_) : $/;"	f	class:log_message
log_message	common/logging/log_message.h	/^struct log_message$/;"	s
log_opcode_text	server/game/server/world_tcp_socket.cpp	/^void world_tcp_socket::log_opcode_text(OpcodeClient opcode, std::unique_lock<std::mutex> const& guard) const$/;"	f	class:world_tcp_socket
log_operation	common/logging/log_operation.cpp	/^log_operation::log_operation(const logger* logger, std::unique_ptr<log_message>&& msg) : $/;"	f	class:log_operation
log_operation	common/logging/log_operation.h	/^class log_operation$/;"	c
log_packet	server/game/server/protocol/packet_log.cpp	/^void packet_log::log_packet(const world_packet& packet, direction direction, const address addr, uint16_t port, connection_type connection_type)$/;"	f	class:packet_log
log_packet_lock_	server/game/server/protocol/packet_log.h	/^	std::mutex log_packet_lock_;$/;"	m	class:packet_log
log_sink	common/utility/start_process.cpp	/^	log_sink(T callback) : callback_(std::move(callback)) {}$/;"	f	class:__anon14::log_sink
log_sink	common/utility/start_process.cpp	/^class log_sink$/;"	c	namespace:__anon14	file:
log_sink	server/process/start_process.cpp	/^	log_sink(T callback) : callback_(std::move(callback)) {}$/;"	f	class:__anon11::log_sink
log_sink	server/process/start_process.cpp	/^auto make_log_sink(T&& callback)->log_sink(typename std::decay<T>::type)$/;"	f	namespace:__anon11
log_sink	server/process/start_process.cpp	/^class log_sink$/;"	c	namespace:__anon11	file:
logfile_	common/logging/appender_file.h	/^	FILE* logfile_;$/;"	m	class:appender_file
logger	common/logging/logger.cpp	/^logger::logger(const std::string& name, log_level level): name_(name), level_(level) { }$/;"	f	class:logger
logger	common/logging/logger.h	/^class logger$/;"	c
logger_	common/logging/log_operation.h	/^	const logger* logger_;$/;"	m	class:log_operation
logger_	server/database/database/database_loader.h	/^	std::string logger_;$/;"	m	class:database_loader
loggers_	common/logging/log.h	/^	std::unordered_map<std::string, std::unique_ptr<logger>> loggers_;$/;"	m	class:log
login_database_connection	server/database/database/implementation/login_database.cpp	/^login_database_connection::login_database_connection(mysql_connection_info& conn_info) : mysql_connection(conn_info) {}$/;"	f	class:login_database_connection
login_database_connection	server/database/database/implementation/login_database.cpp	/^login_database_connection::login_database_connection(producer_consumer_queue<sql_operation*>* q, mysql_connection_info& conn_info) : mysql_connection(q, conn_info) {}$/;"	f	class:login_database_connection
login_database_connection	server/database/database/implementation/login_database.h	/^class login_database_connection : public mysql_connection$/;"	c
logs_dir_	common/logging/log.h	/^	std::string logs_dir_;$/;"	m	class:log
logs_timestamp_	common/logging/log.h	/^	std::string logs_timestamp_;$/;"	m	class:log
long_column_	client/cmdln.h	/^		int long_column_;$/;"	m	class:Commandline
long_names_	common/cmdline/option_description.h	/^	std::vector<std::string> long_names_;$/;"	m	class:option_description
long_option	client/cmdln.cpp	/^	std::string long_option;$/;"	m	struct:Cmd_option	file:
looks_like_pbl	client/filesystem.cpp	/^	bool looks_like_pbl(const std::string& file)$/;"	f	namespace:filesystem
looks_like_url	client/font/pango/hyperlink.h	/^	inline bool looks_like_url(const std::string_view& str)$/;"	f	namespace:font
loop	client/net/event_loop.cpp	/^void Event_loop::loop()$/;"	f	class:net::Event_loop
loop	server/shared/networking/event_loop.cpp	/^void event_loop::loop()$/;"	f	class:event_loop
loop_	client/net/acceptor.h	/^  Event_loop* loop_;$/;"	m	class:net::Acceptor
loop_	client/net/channel.h	/^	Event_loop* loop_;$/;"	m	class:net::Channel
loop_	client/net/event_loop_thread.h	/^	Event_loop* loop_;$/;"	m	class:net::Event_loop_thread
loop_	client/net/tcp_connection.h	/^  Event_loop* loop_;$/;"	m	class:net::Tcp_connection
loop_	client/net/tcp_server.h	/^	Event_loop* loop_;  \/\/ the acceptor loop$/;"	m	class:net::Tcp_server
loop_	client/net/timer_queue.h	/^	Event_loop* loop_;$/;"	m	class:net::Timer_queue
loop_	server/shared/networking/acceptor.h	/^	event_loop* loop_;$/;"	m	class:acceptor
loop_	server/shared/networking/channel.h	/^	event_loop* loop_;$/;"	m	class:channel
loop_	server/shared/networking/event_loop_thread.h	/^	event_loop* loop_;$/;"	m	class:event_loop_thread
loop_	server/shared/networking/tcp_server.h	/^	Event_loop* loop_;  \/\/ the acceptor loop$/;"	m	class:net::Tcp_server
loop_	server/shared/networking/tcp_socket.h	/^	event_loop* loop_;$/;"	m	class:tcp_socket
loop_	server/shared/networking/timer_queue.h	/^	event_loop* loop_;$/;"	m	class:timer_queue
loop_in_this_thread	client/net/event_loop.cpp	/^thread_local net::Event_loop* loop_in_this_thread = nullptr;$/;"	m	namespace:__anon20	file:
loop_in_this_thread	server/shared/networking/event_loop.cpp	/^thread_local event_loop* loop_in_this_thread = nullptr;$/;"	m	namespace:__anon8	file:
loopback	server/shared/networking/ip/address_v4.h	/^	static address_v4 loopback() { return address_v4(0x7F000001); }$/;"	f	class:address_v4
loopback	server/shared/networking/ip/address_v6.cpp	/^address_v6 address_v6::loopback() $/;"	f	class:address_v6
looping_	client/net/event_loop.h	/^  	bool looping_; \/* atomic *\/$/;"	m	class:net::Event_loop
looping_	server/shared/networking/event_loop.h	/^  	bool looping_; \/* atomic *\/$/;"	m	class:event_loop
loops_	client/net/event_loop_threadpool.h	/^			std::vector<Event_loop*> loops_;$/;"	m	class:net::Event_loop_threadpool
loops_	server/shared/networking/event_loop_threadpool.h	/^	std::vector<event_loop*> loops_;$/;"	m	class:event_loop_threadpool
lowercase	client/serialization/unicode.cpp	/^	utf8::String lowercase(const utf8::String& str)$/;"	f	namespace:utf8
lowest_log_level_	common/logging/log.h	/^	log_level lowest_log_level_;$/;"	m	class:log
m_	client/old/singleton.h	/^		std::mutex m_;$/;"	m	class:Singleton
main	client/main.cpp	/^int main(int argc, char* argv[])$/;"	f
main	client/old/main.cpp	/^int main(int argc, char* argv[])$/;"	f
main	client/old/test.cpp	/^int main()$/;"	f
main	common/configuration/test.cpp	/^int main()$/;"	f
main	gtest/test.cpp	/^int main(int argc, char* argv[])$/;"	f
main	server/main.cpp	/^int main(int argc, char* argv[])$/;"	f
main	server/process/test.cpp	/^int main()$/;"	f
main_event_context_	client/game_launcher.h	/^		const Event_context main_event_context_;$/;"	m	class:Game_launcher
main_thread	client/events.cpp	/^        static const std::thread::id main_thread = $/;"	m	namespace:events	file:
major_version	client/version.cpp	/^unsigned int Version_info::major_version() const$/;"	f	class:Version_info
make_address	server/shared/networking/ip/address.cpp	/^address make_address(const char* str)$/;"	f
make_address	server/shared/networking/ip/address.cpp	/^address make_address(const char* str, std::error_code& ec) $/;"	f
make_address	server/shared/networking/ip/address.cpp	/^address make_address(const std::string& str)$/;"	f
make_address	server/shared/networking/ip/address.cpp	/^address make_address(const std::string& str, std::error_code& ec) $/;"	f
make_address_v4	server/shared/networking/ip/address_v4.cpp	/^address_v4 make_address_v4(const char* str)$/;"	f
make_address_v4	server/shared/networking/ip/address_v4.cpp	/^address_v4 make_address_v4(const char* str, std::error_code& ec) $/;"	f
make_address_v4	server/shared/networking/ip/address_v4.cpp	/^address_v4 make_address_v4(const std::string& str)$/;"	f
make_address_v4	server/shared/networking/ip/address_v4.cpp	/^address_v4 make_address_v4(const std::string& str, std::error_code& ec) $/;"	f
make_address_v4	server/shared/networking/ip/address_v4.h	/^inline address_v4 make_address_v4(address_v4::uint_type addr)$/;"	f
make_address_v4	server/shared/networking/ip/address_v4.h	/^inline address_v4 make_address_v4(const address_v4::bytes_type& bytes)$/;"	f
make_address_v4	server/shared/networking/ip/address_v6.cpp	/^address_v4 make_address_v4(v4_mapped_t, const address_v6& v6_addr)$/;"	f
make_address_v6	server/shared/networking/ip/address_v6.cpp	/^address_v6 make_address_v6(const char* str)$/;"	f
make_address_v6	server/shared/networking/ip/address_v6.cpp	/^address_v6 make_address_v6(const char* str, std::error_code& ec) $/;"	f
make_address_v6	server/shared/networking/ip/address_v6.cpp	/^address_v6 make_address_v6(const std::string& str)$/;"	f
make_address_v6	server/shared/networking/ip/address_v6.cpp	/^address_v6 make_address_v6(const std::string& str, std::error_code& ec) $/;"	f
make_address_v6	server/shared/networking/ip/address_v6.cpp	/^address_v6 make_address_v6(v4_mapped_t, const address_v4& v4_addr)$/;"	f
make_address_v6	server/shared/networking/ip/address_v6.h	/^inline address_v6 make_address_v6(const address_v6::bytes_type& bytes,$/;"	f
make_fake	client/video.cpp	/^void Video::make_fake()$/;"	f	class:Video
make_invoker	client/thread/thread.h	/^		static invoker_type<Callable, Args...> make_invoker($/;"	f	class:Thread
make_neutral_surface	client/sdl/utils.cpp	/^Surface make_neutral_surface(const Surface &surf)$/;"	f
make_pipe	server/process/pipe.h	/^pipe make_pipe(int source, int sink)$/;"	f
make_read_RWops	client/filesystem.cpp	/^	Rwops_ptr make_read_RWops(const std::string& path)$/;"	f	namespace:filesystem
make_space	client/net/buffer.h	/^	void make_space(size_t len)$/;"	f	class:net::Buffer
make_state	client/thread/thread.h	/^		static State_ptr make_state(Callable&& f)$/;"	f	class:Thread
make_test_fake	client/video.cpp	/^void Video::make_test_fake(unsigned int width, unsigned int height)$/;"	f	class:Video
make_text_ellipsis	client/font/sdl_ttf.cpp	/^std::string make_text_ellipsis(const std::string& text, int font_size,$/;"	f
make_write_RWops	client/filesystem.cpp	/^	Rwops_ptr make_write_RWops(const std::string& path)$/;"	f	namespace:filesystem
mandatory	client/cmdln.h	/^		mandatory,$/;"	m	class:Cmd_param::Param_mode
mandir	client/Makefile	/^mandir = ${datarootdir}\/man$/;"	m
mandir	client/old/Makefile	/^mandir = ${datarootdir}\/man$/;"	m
markedup_text_	client/font/text.h	/^			bool markedup_text_;$/;"	m	class:font::Pango_text
markup	client/tooltips.cpp	/^	bool markup;$/;"	m	struct:Tooltip	file:
match	client/json.h	/^	bool match(const std::string &pattern) $/;"	f	class:Format::Input
match	common/cmdline/option_description.cpp	/^bool option_description::match(const std::string& option) const$/;"	f	class:option_description
matches	client/hotkey/hotkey_item.cpp	/^	bool Hotkey_base::matches(const SDL_Event& event) const$/;"	f	class:hotkey::Hotkey_base
matches_helper	client/hotkey/hotkey_item.cpp	/^	bool Hotkey_keyboard::matches_helper(const SDL_Event& event) const$/;"	f	class:hotkey::Hotkey_keyboard
matches_helper	client/hotkey/hotkey_item.cpp	/^	bool Hotkey_mouse::matches_helper(const SDL_Event& event) const$/;"	f	class:hotkey::Hotkey_mouse
matches_helper	client/hotkey/hotkey_item.h	/^			virtual bool matches_helper(const SDL_Event&) const { return false; }$/;"	f	class:hotkey::Hotkey_void
max_	client/old/epoll_handler.h	/^			int max_;$/;"	m	class:event::Epoll_handler
max_addr_v4_str_len	server/shared/networking/socket_types.h	/^constexpr int max_addr_v4_str_len = INET_ADDRSTRLEN;$/;"	v
max_addr_v6_str_len	server/shared/networking/socket_types.h	/^constexpr int max_addr_v6_str_len = INET6_ADDRSTRLEN + 1 + IF_NAMESIZE;$/;"	v
max_cached_chunks	client/sound.cpp	/^	unsigned max_cached_chunks = 256;$/;"	m	namespace:__anon27	file:
max_colors	common/logging/appender_console.h	/^constexpr uint8_t max_colors = WHITE + 1;$/;"	v
max_file_size_	common/logging/appender_file.h	/^	uint64_t max_file_size_;$/;"	m	class:appender_file
max_font_scaling	client/preferences/general.cpp	/^const int max_font_scaling = 150;$/;"	v
max_numeric_size	common/logging/old_logging/log_stream.h	/^	static const int max_numeric_size = 32;$/;"	m	class:lg::Log_stream
max_param_count_	client/cmdln.h	/^		int max_param_count_;$/;"	m	class:Commandline
max_size	client/font/text_cache.cpp	/^unsigned int Text_cache::max_size = 50;$/;"	m	class:Text_cache	file:
max_size	client/utils/json.h	/^    size_type max_size() const $/;"	f	class:basic_json
max_size_	client/font/text_cache.h	/^		static unsigned int max_size_;$/;"	m	class:Text_cache
max_text_line_width	client/font/constants.h	/^constexpr size_t max_text_line_width = 4096;$/;"	v
maximize	client/sdl/window.cpp	/^void Window::maximize()$/;"	f	class:Window
maximum_height_	client/font/text.h	/^			int maximum_height_;$/;"	m	class:font::Pango_text
maximum_length_	client/font/text.h	/^			size_t maximum_length_;$/;"	m	class:font::Pango_text
maximum_width_	client/font/text.h	/^			int maximum_width_;$/;"	m	class:font::Pango_text
measure	client/font/text_surface.cpp	/^void Text_surface::measure() const$/;"	f	class:Text_surface
merge_patch	client/utils/json.h	/^    void merge_patch(const basic_json& apply_patch)$/;"	f	class:basic_json
message	client/exceptions.h	/^	std::string message;$/;"	m	struct:error
message	client/gui/core/event/message.h	/^			const std::string message;$/;"	m	struct:gui::event::Message_show_helptip
message	client/gui/core/event/message.h	/^			const std::string message;$/;"	m	struct:gui::event::Message_show_tooltip
message	client/tooltips.cpp	/^	std::string message;$/;"	m	struct:Tooltip	file:
message	server/exceptions.h	/^	std::string message;$/;"	m	struct:error
message	server/shared/networking/network_exception.h	/^	std::string message;$/;"	m	struct:networking_exception
message_buffer	common/utility/message_buffer.h	/^	explicit message_buffer(std::size_t initial_size) : wpos_(0), rpos_(0), storage_()$/;"	f	class:message_buffer
message_buffer	common/utility/message_buffer.h	/^	message_buffer() : wpos_(0), rpos_(0), storage_()$/;"	f	class:message_buffer
message_buffer	common/utility/message_buffer.h	/^	message_buffer(const message_buffer& right) : wpos_(right.wpos_), rpos_(right.rpos_), storage_(right.storage_) {}$/;"	f	class:message_buffer
message_buffer	common/utility/message_buffer.h	/^	message_buffer(message_buffer&& right) : wpos_(right.wpos_), rpos_(right.rpos_), storage_(right.mov()) {}$/;"	f	class:message_buffer
message_buffer	common/utility/message_buffer.h	/^class message_buffer$/;"	c
message_callback_	client/net/tcp_connection.h	/^  Message_callback message_callback_;$/;"	m	class:net::Tcp_connection
message_callback_	client/net/tcp_server.h	/^	Message_callback message_callback_;$/;"	m	class:net::Tcp_server
message_callback_	server/shared/networking/tcp_server.h	/^	Message_callback message_callback_;$/;"	m	class:net::Tcp_server
metadata_result_	server/database/database/query_result.h	/^	MYSQL_RES* metadata_result_; \/\/ 字段元数据，由mysql_stmt_result_metadata返回$/;"	m	class:prepared_result_set
micro_seconds_since_epoch	common/utility/timestamp.h	/^	int64_t micro_seconds_since_epoch() const $/;"	f	class:Timestamp
micro_seconds_since_epoch_	common/utility/timestamp.h	/^	int64_t micro_seconds_since_epoch_;$/;"	m	class:Timestamp
min_description_length_	common/cmdline/option_description.h	/^	const uint32_t min_description_length_ = 40;$/;"	m	class:options_description
min_font_scaling	client/preferences/general.cpp	/^const int min_font_scaling = 80;$/;"	v
min_param_count_	client/cmdln.h	/^		int min_param_count_;$/;"	m	class:Commandline
min_size_for_compression	server/game/server/world_tcp_socket.cpp	/^constexpr uint32_t world_tcp_socket::min_size_for_compression = 0x400;$/;"	m	class:world_tcp_socket	file:
min_size_for_compression	server/game/server/world_tcp_socket.h	/^	static constexpr uint32_t min_size_for_compression;$/;"	m	class:world_tcp_socket
minor_version	client/version.cpp	/^unsigned int Version_info::minor_version() const$/;"	f	class:Version_info
missing_parameter	client/cmdln.h	/^			missing_parameter,$/;"	m	class:Commandline::Parse_status
missing_value	client/cmdln.h	/^			missing_value,$/;"	m	class:Commandline::Parse_status
mix_ok	client/sound.cpp	/^	bool mix_ok = false;$/;"	m	namespace:__anon27	file:
mkdir_p	client/Makefile	/^mkdir_p = $(MKDIR_P)$/;"	m
mkdir_p	client/old/Makefile	/^mkdir_p = $(MKDIR_P)$/;"	m
mkinstalldirs	client/Makefile	/^mkinstalldirs = $(install_sh) -d$/;"	m
mkinstalldirs	client/old/Makefile	/^mkinstalldirs = $(install_sh) -d$/;"	m
mod_	client/hotkey/hotkey_item.h	/^			unsigned int mod_;$/;"	m	class:hotkey::Hotkey_base
mod_exp	common/cryptography/big_number.cpp	/^big_number big_number::mod_exp(big_number const& bn1, big_number const& bn2)$/;"	f	class:big_number
modifications	client/image.h	/^				std::string modifications;$/;"	m	struct:image::Locator::Value
mouse	client/gui/core/event/handler.cpp	/^		void Sdl_event_handler::mouse(const Ui_event event, const Point& position)$/;"	f	class:gui::event::Sdl_event_handler
mouse_behavior_	client/gui/core/event/dispatcher.h	/^				Mouse_behavior mouse_behavior_;$/;"	m	class:gui::event::Dispatcher
mouse_button_down	client/gui/core/event/handler.cpp	/^		void Sdl_event_handler::mouse_button_down(const Point& position,$/;"	f	class:gui::event::Sdl_event_handler
mouse_button_up	client/gui/core/event/handler.cpp	/^		void Sdl_event_handler::mouse_button_up(const Point& position, $/;"	f	class:gui::event::Sdl_event_handler
mouse_captured_	client/gui/core/event/distributor.h	/^				bool mouse_captured_;$/;"	m	class:gui::event::Mouse_motion
mouse_focus	client/gui/core/event/handler.cpp	/^				Dispatcher* mouse_focus;$/;"	m	class:gui::event::Sdl_event_handler	file:
mouse_focus_	client/gui/core/event/distributor.h	/^				Widget* mouse_focus_;$/;"	m	class:gui::event::Mouse_motion
mouse_wheel	client/gui/core/event/handler.cpp	/^		void Sdl_event_handler::mouse_wheel(const Point& position, int x, int y)$/;"	f	class:gui::event::Sdl_event_handler
move	client/cursor.h	/^		move,$/;"	e	enum:cursor::Cursor_type
move	common/utility/message_buffer.h	/^	std::vector<uint8_t>&& move()$/;"	f	class:message_buffer
move	server/game/server/packet.h	/^	world_packet&& move() { return std::move(world_packet_); }$/;"	f	struct:world_packets::server_packet
move	server/shared/packets/byte_buffer.h	/^	std::vector<uint8_t>&& move()$/;"	f	class:byte_buffer
move_drge	client/cursor.h	/^		move_drge,$/;"	e	enum:cursor::Cursor_type
move_first	client/old/mysql_pool.cpp	/^	void Query::move_first()$/;"	f	class:db::Query
move_from	server/database/database/query_callback.cpp	/^inline void move_from(T* to, T&& from)$/;"	f
move_last	client/old/mysql_pool.cpp	/^	void Query::move_last()$/;"	f	class:db::Query
ms_after	client/sound_music_track.h	/^			int ms_after() const { return ms_after_; }$/;"	f	class:sound::Music_track
ms_after_	client/sound_music_track.h	/^			int ms_before, ms_after_;$/;"	m	class:sound::Music_track
ms_before	client/sound_music_track.h	/^			int ms_before() const { return ms_before_; }$/;"	f	class:sound::Music_track
ms_before	client/sound_music_track.h	/^			int ms_before, ms_after_;$/;"	m	class:sound::Music_track
msg	common/cmdline/option_description.h	/^	std::string msg;$/;"	m	struct:options_error
msg_	common/logging/log_operation.h	/^	std::unique_ptr<log_message> msg_;$/;"	m	class:log_operation
msg_	server/database/update/db_update.h	/^	const std::string msg_;$/;"	m	class:update_exception
msg_type	client/old/packet_protocol.h	/^	uint16_t msg_type;		\/\/帧类型$/;"	m	struct:Packet_head
mtime	common/logging/log_message.h	/^	time_t mtime;$/;"	m	struct:log_message
multi_mandatory	client/cmdln.h	/^		multi_mandatory,$/;"	m	class:Cmd_param::Param_mode
multiplayer_server_	client/game_launcher.h	/^		std::string multiplayer_server_;$/;"	m	class:Game_launcher
music_cache	client/sound.cpp	/^	std::map<std::string, std::shared_ptr<Mix_music>> music_cache;$/;"	m	namespace:__anon28	file:
music_refresh	client/sound.cpp	/^	unsigned music_refresh = 0;$/;"	m	namespace:__anon27	file:
music_refresh_rate	client/sound.cpp	/^	unsigned music_refresh_rate = 20;$/;"	m	namespace:__anon27	file:
music_start_time	client/sound.cpp	/^	int music_start_time = 0;$/;"	m	namespace:__anon27	file:
mutex	client/filesystem.cpp	/^static std::mutex mutex;$/;"	v	file:
mutex	client/thread/mutex.h	/^		mutex_type* mutex() const { return device_; }$/;"	f	class:Unique_lock
mutex_	client/net/event_loop.h	/^  	std::mutex mutex_;$/;"	m	class:net::Event_loop
mutex_	client/net/event_loop_thread.h	/^	std::mutex mutex_;$/;"	m	class:net::Event_loop_thread
mutex_	client/old/connection_pool.h	/^		std::mutex mutex_;$/;"	m	class:Connection_pool
mutex_	client/old/mysql_pool.h	/^			std::mutex mutex_;$/;"	m	class:db::Connection_pool
mutex_	client/old/threadpool.h	/^		std::mutex mutex_;$/;"	m	class:Threadpool
mutex_	client/thread/mutex.h	/^		native_type  mutex_ = PTHREAD_MUTEX_INITIALIZER;$/;"	m	class:Mutex_base
mutex_	client/thread/mutex.h	/^		native_type mutex_;$/;"	m	class:Mutex_base
mutex_	common/logging/old_logging/async_log.h	/^	std::mutex mutex_;$/;"	m	class:lg::Async_log
mutex_	common/threading/producer_consumer_queue.h	/^	std::mutex mutex_;$/;"	m	class:producer_consumer_queue
mutex_	server/database/database/mysql_connection.h	/^	std::mutex mutex_;$/;"	m	class:mysql_connection
mutex_	server/shared/networking/event_loop.h	/^  	std::mutex mutex_;$/;"	m	class:event_loop
mutex_	server/shared/networking/event_loop_thread.h	/^	std::mutex mutex_;$/;"	m	class:event_loop_thread
mutex_type	client/thread/mutex.h	/^		typedef Mutex mutex_type;$/;"	t	class:Lock_guard
mutex_type	client/thread/mutex.h	/^		typedef Mutex mutex_type;$/;"	t	class:Unique_lock
mutil_statements_	client/old/mysql_pool.h	/^			bool mutil_statements_;$/;"	m	class:db::Database
mx	client/thread/condition_variable.cpp	/^	Mutex* mx;$/;"	m	struct:final	file:
mysql	server/database/database/mysql_threading.h	/^namespace mysql$/;"	n
mysql_	client/old/mysql_pool.h	/^			MYSQL* mysql_;$/;"	m	class:db::Database
mysql_	server/database/database/mysql_connection.h	/^	MYSQL* mysql_;$/;"	m	class:mysql_connection
mysql_connection	server/database/database/mysql_connection.cpp	/^mysql_connection::mysql_connection(mysql_connection_info& info) : reconnection_(false), prepare_error_(false), queue_(nullptr), mysql_(nullptr), connection_info_(info), connection_flags_(CONNECTION_SYNCH) {}$/;"	f	class:mysql_connection
mysql_connection	server/database/database/mysql_connection.cpp	/^mysql_connection::mysql_connection(producer_consumer_queue<sql_operation*>* queue, mysql_connection_info& conn_info) : $/;"	f	class:mysql_connection
mysql_connection	server/database/database/mysql_connection.h	/^class mysql_connection$/;"	c
mysql_connection_info	server/database/database/mysql_connection.cpp	/^mysql_connection_info::mysql_connection_info(const std::string& info_string){$/;"	f	class:mysql_connection_info
mysql_connection_info	server/database/database/mysql_connection.h	/^struct mysql_connection_info$/;"	s
mysql_prepared_statement	server/database/database/mysql_prepared_statement.cpp	/^mysql_prepared_statement::mysql_prepared_statement(MYSQL_STMT* stmt) : prepared_stmt_(0), stmt_(stmt), bind_(0)$/;"	f	class:mysql_prepared_statement
mysql_prepared_statement	server/database/database/mysql_prepared_statement.h	/^class mysql_prepared_statement$/;"	c
mysql_type_to_field_type	server/database/database/query_result.cpp	/^database_field_type mysql_type_to_field_type(enum_field_types type)$/;"	f
n_of_channels	client/sound.cpp	/^	constexpr size_t n_of_channels = 32;$/;"	m	namespace:__anon27	file:
n_reserved_channels	client/sound.cpp	/^	constexpr size_t n_reserved_channels = UI_sound_channel_last + 1;$/;"	m	namespace:__anon27	file:
name	client/font/font_description.h	/^	std::string name;$/;"	m	struct:Subset_descriptor
name	client/font/subset_descriptor.h	/^		std::string name;$/;"	m	struct:font::Subset_descriptor
name	client/net/tcp_connection.h	/^  const std::string& name() const { return name_; }$/;"	f	class:net::Tcp_connection
name	client/net/tcp_server.h	/^	const std::string& name() const { return name_; }$/;"	f	class:net::Tcp_server
name	server/database/update/update_fetcher.h	/^		const std::string& name;$/;"	m	struct:update_fetcher::applied_file_entry
name	server/game/server/protocol/opcodes.h	/^	const char* name;$/;"	m	struct:opcode_handler
name	server/shared/networking/tcp_server.h	/^	const std::string& name() const { return name_; }$/;"	f	class:net::Tcp_server
name_	client/gui/core/event/distributor.h	/^				const std::string& name_;$/;"	m	class:gui::event::Mouse_button
name_	client/log.h	/^			const char* name_;$/;"	m	class:lg::Logger
name_	client/net/tcp_connection.h	/^  const std::string name_;$/;"	m	class:net::Tcp_connection
name_	client/net/tcp_server.h	/^	const std::string name_;$/;"	m	class:net::Tcp_server
name_	common/logging/appender.h	/^	std::string name_;$/;"	m	class:appender
name_	common/logging/logger.h	/^	std::string name_;$/;"	m	class:logger
name_	server/shared/networking/tcp_server.h	/^	const std::string name_;$/;"	m	class:net::Tcp_server
native_handle	client/thread/condition_variable.h	/^		native_handle_type native_handle() { return &cond_; }$/;"	f	class:Condition_variable
native_handle	client/thread/mutex.h	/^		native_handle_type native_handle() { return &mutex_; }$/;"	f	class:Mutex
native_handle	client/thread/thread.h	/^		Native_handle_type native_handle() { return id_.thread_; }$/;"	f	class:Thread
native_handle_type	client/thread/condition_variable.h	/^		typedef native_type* native_handle_type;$/;"	t	class:Condition_variable
native_handle_type	client/thread/mutex.h	/^		typedef native_type* native_handle_type;$/;"	t	class:Mutex
native_type	client/thread/condition_variable.h	/^		typedef pthread_cond_t native_type;$/;"	t	class:Condition_variable
native_type	client/thread/mutex.h	/^		typedef pthread_mutex_t native_type;$/;"	t	class:Mutex_base
needs_encryption	server/game/server/world_tcp_socket.cpp	/^	bool needs_encryption() const { return encrypt_; }$/;"	f	class:encryptable_packet
net	client/net/acceptor.cpp	/^namespace net$/;"	n	file:
net	client/net/acceptor.h	/^namespace net$/;"	n
net	client/net/buffer.cpp	/^namespace net$/;"	n	file:
net	client/net/buffer.h	/^namespace net$/;"	n
net	client/net/channel.cpp	/^namespace net$/;"	n	file:
net	client/net/channel.h	/^namespace net$/;"	n
net	client/net/event_loop.cpp	/^namespace net$/;"	n	file:
net	client/net/event_loop.h	/^namespace net$/;"	n
net	client/net/event_loop_thread.cpp	/^namespace net$/;"	n	file:
net	client/net/event_loop_thread.h	/^namespace net$/;"	n
net	client/net/event_loop_threadpool.cpp	/^namespace net$/;"	n	file:
net	client/net/event_loop_threadpool.h	/^namespace net$/;"	n
net	client/net/inet_address.cpp	/^namespace net$/;"	n	file:
net	client/net/inet_address.h	/^namespace net$/;"	n
net	client/net/net_utils.cpp	/^namespace net$/;"	n	file:
net	client/net/net_utils.h	/^namespace net$/;"	n
net	client/net/poller.cpp	/^namespace net$/;"	n	file:
net	client/net/poller.h	/^namespace net$/;"	n
net	client/net/socket.cpp	/^namespace net$/;"	n	file:
net	client/net/socket.h	/^namespace net$/;"	n
net	client/net/tcp_connection.cpp	/^namespace net$/;"	n	file:
net	client/net/tcp_connection.h	/^namespace net$/;"	n
net	client/net/tcp_server.cpp	/^namespace net$/;"	n	file:
net	client/net/tcp_server.h	/^namespace net$/;"	n
net	client/net/timer.cpp	/^namespace net$/;"	n	file:
net	client/net/timer.h	/^namespace net$/;"	n
net	client/net/timer_queue.cpp	/^namespace net$/;"	n	file:
net	client/net/timer_queue.h	/^namespace net$/;"	n
net	client/old/utils.cpp	/^namespace net$/;"	n	file:
net	client/old/utils.h	/^namespace net$/;"	n
net	server/shared/networking/tcp_server.cpp	/^namespace net$/;"	n	file:
net	server/shared/networking/tcp_server.h	/^namespace net$/;"	n
network_thread	server/shared/networking/network_thread.h	/^	network_thread() : connections_(0), stopped_(false), thread_(nullptr), {}$/;"	f	class:network_thread
network_thread	server/shared/networking/network_thread.h	/^class network_thread$/;"	c
network_to_host_long	server/shared/networking/socket_operations.cpp	/^uint32_t network_to_host_long(uint32_t value) { return ::ntohl(value); }$/;"	f
network_to_host_short	server/shared/networking/socket_operations.cpp	/^uint16_t network_to_host_short(uint16_t value) { return ::ntohs(value); }$/;"	f
networking_exception	server/shared/networking/network_exception.h	/^	networking_exception() : message() {}$/;"	f	struct:networking_exception
networking_exception	server/shared/networking/network_exception.h	/^	networking_exception(const std::error_code& ec) : message(ec.message) {}$/;"	f	struct:networking_exception
networking_exception	server/shared/networking/network_exception.h	/^	networking_exception(const std::string& msg) : message(msg) {}$/;"	f	struct:networking_exception
networking_exception	server/shared/networking/network_exception.h	/^struct networking_exception : std::exception$/;"	s
new_connection	client/net/tcp_server.cpp	/^void Tcp_server::new_connection(int sockfd, const Inet_address& peer_addr)$/;"	f	class:net::Tcp_server
new_connection	server/shared/networking/tcp_server.cpp	/^void Tcp_server::new_connection(socket& sockfd, const Inet_address& peer_addr, int thread_index)$/;"	f	class:net::Tcp_server
new_connection_callback	server/shared/networking/acceptor.h	/^	typedef std::function<void(socket&&)> new_connection_callback;$/;"	t	class:acceptor
new_connection_callback_	client/net/acceptor.h	/^  New_connection_callback new_connection_callback_;$/;"	m	class:net::Acceptor
new_connection_callback_	server/shared/networking/acceptor.h	/^	new_connection_callback new_connection_callback_;$/;"	m	class:acceptor
new_item	client/config.cpp	/^Config::Node* Config::new_item()$/;"	f	class:Config
new_socket_lock_	server/shared/networking/network_thread.h	/^	std::mutex new_socket_lock_;$/;"	m	class:network_thread
new_sockets_	server/shared/networking/network_thread.h	/^	socket_continer new_sockets_;$/;"	m	class:network_thread
next	client/cmdln.h	/^			next,$/;"	m	class:Commandline::Find_option_mode
next	client/config.h	/^			Node* next, *prev, *child;$/;"	m	struct:Config::Node
next	client/thread/condition_variable.h	/^	At_thread_exit_elt* next;$/;"	m	struct:At_thread_exit_elt
next_	client/net/event_loop_threadpool.h	/^			int next_;$/;"	m	class:net::Event_loop_threadpool
next_	server/shared/networking/event_loop_threadpool.h	/^	int next_;$/;"	m	class:event_loop_threadpool
next_appender_id	common/logging/log.cpp	/^uint8_t log::next_appender_id()$/;"	f	class:log
next_buffer_	common/logging/old_logging/async_log.h	/^	Buffer_ptr next_buffer_;$/;"	m	class:lg::Async_log
next_conn_id_	client/net/tcp_server.h	/^	int next_conn_id_;$/;"	m	class:net::Tcp_server
next_conn_id_	server/shared/networking/tcp_server.h	/^	int next_conn_id_;$/;"	m	class:net::Tcp_server
next_is_end	client/serialization/ucs4_iterator_base.h	/^		        bool next_is_end() const$/;"	f	class:ucs4::Iterator_base
next_random	client/random.cpp	/^	uint32_t Rng::next_random()$/;"	f	class:randomness::Rng
next_random_impl	client/random.cpp	/^			virtual uint32_t next_random_impl()$/;"	f	class:__anon23::Rng_default
next_row	client/old/mysql_pool.cpp	/^	void Query::next_row()$/;"	f	class:db::Query
next_row	server/database/database/query_result.cpp	/^bool prepared_result_set::next_row()$/;"	f	class:prepared_result_set
next_row	server/database/database/query_result.cpp	/^bool result_set::next_row()$/;"	f	class:result_set
next_step	server/database/database/query_callback.h	/^		next_step,$/;"	e	enum:query_callback::status
no_arguments	client/cmdln.h	/^			no_arguments,$/;"	m	class:Commandline::Parse_status
no_cursor	client/cursor.h	/^		no_cursor,$/;"	e	enum:cursor::Cursor_type
no_fading	client/sound.cpp	/^	bool no_fading = false;$/;"	m	namespace:__anon27	file:
no_more	client/cmdln.h	/^			no_more,$/;"	m	class:Commandline::Value_status
no_timeout	client/thread/condition_variable.h	/^enum class Status { no_timeout, timeout };$/;"	m	class:Status
non_blockiing_sendto	server/shared/networking/socket_operations.cpp	/^bool non_blockiing_sendto(int sockfd, const iovec* buf, size_t count, int flags, const socket_addr_type* addr, socklen_t addrlen, std::error_code& ec, size_t& bytes_transferred)$/;"	f
non_blocking_accept	server/shared/networking/socket_operations.cpp	/^bool non_blocking_accept(int sockfd, socket_addr_type* addr, socklen_t addrlen, std::error_code& ec, int new_socket)$/;"	f
non_blocking_read	server/shared/networking/socket_operations.cpp	/^bool non_blocking_read(int sockfd, iovec* buf, size_t count, std::error_code& ec, size_t& bytes_transferred)$/;"	f
non_blocking_recv	server/shared/networking/socket_operations.cpp	/^bool non_blocking_recv(int sockfd, iovec* buf, size_t count, int flags, bool is_stream, std::error_code& ec, size_t& bytes_transferred)$/;"	f
non_blocking_recvfrom	server/shared/networking/socket_operations.cpp	/^bool non_blocking_recvfrom(int sockfd, iovec* buf, size_t count, int flags, socket_addr_type* addr, socklen_t* addrlen, std::error_code& ec, size_t& bytes_transferred)$/;"	f
non_blocking_recvmsg	server/shared/networking/socket_operations.cpp	/^bool non_blocking_recvmsg(int sockfd, iovec* buf, size_t count, int in_flags, int out_flags, std::error_code& ec, size_t& bytes_transferred)$/;"	f
non_blocking_send	server/shared/networking/socket_operations.cpp	/^bool non_blocking_send(int sockfd, const iovec* buf, size_t count, int flags, std::error_code& ec, size_t bytes_transferred)$/;"	f
non_blocking_socket	server/shared/networking/socket_operations.cpp	/^int non_blocking_socket(int domain, int type, int protocol, std::error_code& ec)$/;"	f
non_blocking_write	server/shared/networking/socket_operations.cpp	/^bool non_blocking_write(int sockfd, iovec* buf, size_t count, std::error_code& ec, size_t& bytes_transferred)$/;"	f
non_interactive	client/video.cpp	/^bool Video::non_interactive() const$/;"	f	class:Video
none	client/gui/core/event/dispatcher.h	/^					none$/;"	e	enum:gui::event::Dispatcher::Mouse_behavior
none	client/image.h	/^				none,$/;"	m	class:image::Locator::Type
none_event_	client/net/channel.cpp	/^const int Channel::none_event_ = 0;$/;"	m	class:net::Channel	file:
none_event_	client/net/channel.h	/^	static const int none_event_;$/;"	m	class:net::Channel
none_event_	server/shared/networking/channel.cpp	/^const int channel::none_event_ = 0;$/;"	m	class:channel	file:
none_event_	server/shared/networking/channel.h	/^	static const int none_event_;$/;"	m	class:channel
normal	client/cmdln.h	/^			normal,$/;"	m	class:Commandline::Find_option_mode
normal	client/cmdln.h	/^			normal,$/;"	m	class:Commandline::Param_value_status
normal	client/cmdln.h	/^			normal,$/;"	m	class:Commandline::Parse_status
normal	client/cmdln.h	/^			normal,$/;"	m	class:Commandline::Value_status
normal	client/cursor.h	/^		normal,$/;"	e	enum:cursor::Cursor_type
normalize	common/utility/message_buffer.h	/^	void normalize()$/;"	f	class:message_buffer
normalize_path	client/filesystem.cpp	/^	std::string normalize_path(const std::string& path, $/;"	f	namespace:filesystem
not_ready	server/database/database/query_callback.h	/^		not_ready,$/;"	e	enum:query_callback::status
notice_flag	client/old/packet_protocol.h	/^	uint16_t notice_flag : 2;	\/\/0：请求,必须回复；1：回复，2：通知不需要回复；3: 通知一定要回复$/;"	m	struct:Frame
notify_all	client/thread/condition_variable.cpp	/^void Condition_variable::notify_all() $/;"	f	class:Condition_variable
notify_all_at_thread_exit	client/thread/condition_variable.cpp	/^void notify_all_at_thread_exit(Condition_variable& cv,$/;"	f
notify_one	client/thread/condition_variable.cpp	/^void Condition_variable::notify_one()$/;"	f	class:Condition_variable
now	common/utility/timestamp.cpp	/^Timestamp Timestamp::now()$/;"	f	class:Timestamp
ntop	client/old/utils.cpp	/^	std::unique_ptr<char> ntop(struct sockaddr_in& sin, int domain)$/;"	f	namespace:net
null	client/color.h	/^	bool null() const { return *this == null_color(); }$/;"	f	struct:Color
null	client/hotkey/hotkey_command.cpp	/^	bool Hotkey_command::null() const$/;"	f	class:hotkey::Hotkey_command
null	client/hotkey/hotkey_item.h	/^			bool null() const { return command_ == "null"; }$/;"	f	class:hotkey::Hotkey_base
null	client/json.h	/^	null,$/;"	m	class:Type
null	client/old/mysql_pool.h	/^			bool null() { return dataset_ == nullptr; }$/;"	f	class:db::Query
null	client/sdl/surface.h	/^		bool null() const { return surface_ == nullptr; }$/;"	f	class:Surface
null	client/sdl/texture.h	/^		bool null() const$/;"	f	class:Texture
null	client/utils/json.h	/^	null,           $/;"	m	class:value_t
null	server/database/database/field.h	/^	null,$/;"	m	class:database_field_type
null_color	client/color.h	/^	static Color null_color() { return {0, 0, 0, 0}; }$/;"	f	struct:Color
null_command	client/hotkey/hotkey_command.cpp	/^	const Hotkey_command& Hotkey_command::null_command()$/;"	f	class:hotkey::Hotkey_command
nullptr	server/game/server/world_tcp_socket.cpp	/^	world_session_(nullptr), $/;"	v
num_created	client/net/timer.h	/^	static int64_t num_created() { return num_created_; }$/;"	f	class:net::Timer
num_created	server/shared/networking/timer.h	/^	static int64_t num_created() { return num_created_; }$/;"	f	class:timer
num_created_	client/net/timer.cpp	/^std::atomic<int64_t> Timer::num_created_ = 0;$/;"	m	class:net::Timer	file:
num_created_	client/net/timer.h	/^	static std::atomic<int64_t> num_created_;$/;"	m	class:net::Timer
num_created_	server/shared/networking/timer.cpp	/^std::atomic<int64_t> timer::num_created_ = 0;$/;"	m	class:timer	file:
num_created_	server/shared/networking/timer.h	/^	static std::atomic<int64_t> num_created_;$/;"	m	class:timer
num_cursors	client/cursor.h	/^		num_cursors$/;"	e	enum:cursor::Cursor_type
num_threads_	client/net/event_loop_threadpool.h	/^			size_t num_threads_;$/;"	m	class:net::Event_loop_threadpool
num_threads_	server/shared/networking/event_loop_threadpool.h	/^	size_t num_threads_;$/;"	m	class:event_loop_threadpool
number	client/config.h	/^			double number;$/;"	m	struct:Config::Node
number_float	client/json.h	/^		double number_float;$/;"	m	union:Format::Value::Storage
number_float	client/json.h	/^	number_float,$/;"	m	class:Type
number_float	client/utils/json.h	/^	number_float,   $/;"	m	class:value_t
number_float	client/utils/json.h	/^        number_float_t number_float;$/;"	m	union:basic_json::json_value
number_integer	client/json.h	/^		int64_t number_integer; \/\/int64;$/;"	m	union:Format::Value::Storage
number_integer	client/json.h	/^	number_integer,$/;"	m	class:Type
number_integer	client/utils/json.h	/^	number_integer,  $/;"	m	class:value_t
number_integer	client/utils/json.h	/^        number_integer_t number_integer;$/;"	m	union:basic_json::json_value
number_unsigned	client/utils/json.h	/^	number_unsigned,  $/;"	m	class:value_t
number_unsigned	client/utils/json.h	/^        number_unsigned_t number_unsigned;$/;"	m	union:basic_json::json_value
nums_	client/version.h	/^		std::vector<unsigned int> nums_;$/;"	m	class:Version_info
obj	gtest/makefile	/^obj = $(csrc:.c=.o) $(ccsrc:.cpp=.o)$/;"	m
object	client/json.h	/^		Object *object;$/;"	m	union:Format::Value::Storage
object	client/json.h	/^typedef Value::object object;$/;"	t	class:Format
object	client/utils/json.h	/^	object,          $/;"	m	class:value_t
object	client/utils/json.h	/^        object_t* object;$/;"	m	union:basic_json::json_value
ofs_close	client/filesystem.cpp	/^	static int SDLCALL ofs_close(struct SDL_RWops* context)$/;"	f	namespace:filesystem
ofs_read	client/filesystem.cpp	/^	static size_t SDLCALL ofs_read(struct SDL_RWops* context, void* ptr, size_t size, size_t maxnum)$/;"	f	namespace:filesystem
ofs_seek	client/filesystem.cpp	/^	static int64_t SDLCALL ofs_seek(struct SDL_RWops* context, int64_t offset, int whence)$/;"	f	namespace:filesystem
ofs_size	client/filesystem.cpp	/^	static int64_t ofs_size(const SDL_RWops* context)$/;"	f	namespace:filesystem
ofs_write	client/filesystem.cpp	/^	static size_t SDLCALL ofs_write(struct SDL_RWops* context, const void* ptr, size_t size, size_t num)$/;"	f	namespace:filesystem
ok	server/game/server/world_tcp_socket.h	/^		ok = 0;$/;"	m	class:world_tcp_socket::read_data_handler_result
old_	client/cursor.h	/^			Cursor_type old_;$/;"	m	struct:cursor::Setter
old_stream_	client/log.h	/^			std::ostream* old_stream_;$/;"	m	class:lg::Redirect_output_setter
oldincludedir	client/Makefile	/^oldincludedir = \/usr\/include$/;"	m
oldincludedir	client/old/Makefile	/^oldincludedir = \/usr\/include$/;"	m
onMessage	client/old/main.cpp	/^void onMessage(const net::Tcp_connection_ptr& conn, net::Buffer* buf, Timestamp)$/;"	f
on_close	server/game/server/world_tcp_socket.cpp	/^void world_tcp_socket::on_close()$/;"	f	class:world_tcp_socket
on_close	server/shared/networking/tcp_socket.h	/^	virtual bool void on_close() {}$/;"	f	class:tcp_socket
on_exec_error	server/process/initializer.h	/^	void on_exec_error(T&) const {}$/;"	f	struct:initializer_base
on_exec_error	server/process/test.cpp	/^	void on_exec_error(T&) const {}$/;"	f	struct:initializer_base
on_exec_setup	server/process/bind_stderr.h	/^	void on_exec_setup(T&) const$/;"	f	class:bind_stderr
on_exec_setup	server/process/bind_stdin.h	/^	void on_exec_setup(T&) const$/;"	f	class:bind_stdin
on_exec_setup	server/process/bind_stdout.h	/^	void on_exec_setup(T&) const$/;"	f	class:bind_stdout
on_exec_setup	server/process/initializer.h	/^	void on_exec_setup(T&) const {}$/;"	f	struct:initializer_base
on_exec_setup	server/process/run_exe.h	/^	void on_exec_setup(T& e) const$/;"	f	class:run_exe_
on_exec_setup	server/process/set_args.h	/^	void on_exec_setup(T& e) const$/;"	f	class:set_args_
on_exec_setup	server/process/test.cpp	/^	void on_exec_setup(T&) const {}$/;"	f	struct:initializer_base
on_exec_setup	server/process/test.cpp	/^	void on_exec_setup(T&) const$/;"	f	class:bind_stderr
on_exec_setup	server/process/test.cpp	/^	void on_exec_setup(T&) const$/;"	f	class:bind_stdin
on_exec_setup	server/process/test.cpp	/^	void on_exec_setup(T&) const$/;"	f	class:bind_stdout
on_fork_error	server/process/initializer.h	/^	void on_fork_error(T&) const {}$/;"	f	struct:initializer_base
on_fork_error	server/process/test.cpp	/^	void on_fork_error(T&) const {}$/;"	f	struct:initializer_base
on_fork_setup	server/process/inherit_env.h	/^	void on_fork_setup(T& e) const$/;"	f	struct:inherit_env
on_fork_setup	server/process/initializer.h	/^	void on_fork_setup(T&) const {}$/;"	f	struct:initializer_base
on_fork_setup	server/process/test.cpp	/^	void on_fork_setup(T&) const {}$/;"	f	struct:initializer_base
on_fork_success	server/process/initializer.h	/^	void on_fork_success(T&) const {}$/;"	f	struct:initializer_base
on_fork_success	server/process/test.cpp	/^	void on_fork_success(T&) const {}$/;"	f	struct:initializer_base
on_socket_accept	server/game/server/world_tcp_socket_mgr.cpp	/^static void on_socket_accept(socket&& socket)$/;"	f	file:
on_socket_open	server/game/server/world_tcp_socket_mgr.cpp	/^void world_socket_mgr::on_socket_open(socket&& sock)$/;"	f	class:world_socket_mgr
on_socket_open	server/shared/networking/tcp_socket_mgr.h	/^	virtual void on_socket_open(socket&& socket)$/;"	f	class:tcp_socket_mgr
once_	client/sound_music_track.h	/^			bool once_;$/;"	m	class:sound::Music_track
once_flag_initialize_flag_	server/game/server/protocol/packet_log.h	/^	std::once_flag_initialize_flag_;$/;"	m	class:packet_log::std
opcode	server/game/server/protocol/packet_log.cpp	/^	uint32_t opcode;$/;"	m	struct:packet_header	file:
opcode_	server/game/server/world_packet.h	/^	uint16_t opcode_;$/;"	m	class:world_packet
opcode_handler	server/game/server/protocol/opcodes.h	/^	opcode_handler(const char* name_, session_status status_) : name(name_), status(status_) {}$/;"	f	struct:opcode_handler
opcode_handler	server/game/server/protocol/opcodes.h	/^struct opcode_handler$/;"	s
opcode_table	server/game/server/protocol/opcodes.cpp	/^opcode_table opcode_table;$/;"	v
opcode_table	server/game/server/protocol/opcodes.cpp	/^pcode_table::opcode_table()$/;"	f	class:pcode_table
opcode_table	server/game/server/protocol/opcodes.h	/^class opcode_table$/;"	c
open	client/config.cpp	/^void Config::open(const std::string& fiename)$/;"	f	class:Config
open	client/old/mysql_pool.cpp	/^	bool Database::open(const std::string& host, const std::string& db_name,$/;"	f	class:db::Database
open	server/database/database/database_worker_pool.cpp	/^uint32_t database_worker_pool<T>::open()$/;"	f	class:database_worker_pool
open	server/database/database/mysql_connection.cpp	/^uint32_t mysql_connection::open()$/;"	f	class:mysql_connection
open	server/shared/networking/acceptor.cpp	/^int acceptor::open(std::error_code& ec)$/;"	f	class:acceptor
open	server/shared/networking/socket.cpp	/^void socket::open(int sockfd)$/;"	f	class:socket
open_	server/database/database/database_loader.h	/^	std::queue<predicate_func> open_;$/;"	m	class:database_loader
open_clientfd	client/old/utils.cpp	/^int open_clientfd(const char* hostname, const char* port)$/;"	f
open_connections	server/database/database/database_worker_pool.cpp	/^uint32_t database_worker_pool<T>::open_connections(internal_index type, uint8_t num_connections)$/;"	f	class:database_worker_pool
open_databases	server/database/database/database_loader.cpp	/^bool database_loader::open_databases()$/;"	f	class:database_loader
open_file	common/logging/appender_file.cpp	/^FILE* appender_file::open_file(const std::string& filename, const std::string& mode, bool backup)$/;"	f	class:appender_file
open_file	server/process/file_descriptor.cpp	/^bool file_descriptor::open_file(const std::string& path)$/;"	f	class:file_descriptor
open_font	client/font/sdl_ttf.cpp	/^static TTF_Font* open_font(const std::string& fname, int size)$/;"	f	file:
open_font_cache	client/font/sdl_ttf.cpp	/^typedef std::map<std::pair<std::string, int>, TTF_Font*> open_font_cache;$/;"	t	file:
open_fonts	client/font/sdl_ttf.cpp	/^open_font_cache open_fonts;$/;"	v
open_listenfd	client/old/utils.cpp	/^int open_listenfd(const char* port)$/;"	f
open_window_stack	client/gui/core/event/handler.cpp	/^	std::vector<Window*> open_window_stack{};$/;"	n	namespace:gui	file:
operate_	client/sdl/render_utils.h	/^		const bool operate_;$/;"	m	class:Render_raii_rect_setter_base
operation_to_string	client/net/poller.cpp	/^const char* Poller::operation_to_string(int op)$/;"	f	class:net::Poller
operation_to_string	server/shared/networking/epoll.cpp	/^const char* epoll::operation_to_string(int op)$/;"	f	class:epoll
operator !=	client/color.h	/^	bool operator!=(const Color& c) const { return !(*this == c); }$/;"	f	struct:Color
operator !=	client/font/font_id.h	/^	bool operator!=(const Text_chunk& t) const$/;"	f	struct:Text_chunk
operator !=	client/font/text_surface.h	/^		bool operator!=(const Text_surface& t) const $/;"	f	class:Text_surface
operator !=	client/image.h	/^			bool operator!=(const Locator& a) const $/;"	f	class:image::Locator
operator !=	client/sdl/point.h	/^	bool operator!=(const Point& point) const$/;"	f	struct:Point
operator !=	client/sdl/rect.cpp	/^bool operator!=(const SDL_Rect& a, const SDL_Rect& b)$/;"	f
operator !=	client/serialization/ucs4_iterator_base.h	/^		        bool operator!=(const Iterator_base& a) const$/;"	f	class:ucs4::Iterator_base
operator !=	client/sound.cpp	/^			bool operator!=(const Sound_cache_chunk& scc) const$/;"	f	class:__anon28::Sound_cache_chunk
operator !=	client/sound_music_track.h	/^inline bool operator!=(const sound::Music_track& a,$/;"	f
operator !=	client/thread/thread.h	/^inline bool operator!=(const Thread::Id& l, const Thread::Id& r) { return !(l == r); }$/;"	f
operator !=	client/utils/json.h	/^    friend bool operator!=(const ScalarType lhs, const_reference rhs) $/;"	f	class:basic_json
operator !=	client/utils/json.h	/^    friend bool operator!=(const_reference lhs, const ScalarType rhs) $/;"	f	class:basic_json
operator !=	client/utils/json.h	/^    friend bool operator!=(const_reference lhs, const_reference rhs) $/;"	f	class:basic_json
operator !=	client/version.cpp	/^bool operator!=(const Version_info& l, const Version_info& r)$/;"	f
operator !=	server/shared/networking/ip/address.h	/^	friend bool operator!=(const address& a1, const address& a2) $/;"	f	class:address
operator !=	server/shared/networking/ip/address_v4.h	/^	friend bool operator!=(const address_v4& a1, const address_v4& a2) $/;"	f	class:address_v4
operator !=	server/shared/networking/ip/address_v6.h	/^	friend bool operator!=(const address_v6& a1, const address_v6& a2) $/;"	f	class:address_v6
operator !=	server/shared/networking/ip/basic_endpoint.h	/^	friend bool operator!=(const basic_endpoint<InternetProtocol>& e1,$/;"	f	class:basic_endpoint
operator !=	server/shared/networking/ip/tcp.h	/^	friend bool operator!=(const tcp& p1, const tcp& p2)$/;"	f	class:tcp
operator !=	server/shared/networking/ip/udp.h	/^	friend bool operator!=(const udp& p1, const udp& p2)$/;"	f	class:udp
operator %	common/cryptography/big_number.h	/^        big_number operator%(big_number const& bn)$/;"	f	class:big_number
operator %=	common/cryptography/big_number.cpp	/^big_number big_number::operator%=(big_number const& bn)$/;"	f	class:big_number
operator ()	client/color.h	/^	        size_t operator()(const Color& c) const$/;"	f	struct:std::hash
operator ()	client/image.cpp	/^		size_t operator()(const image::Locator::Value& val) const$/;"	f	struct:std::hash
operator ()	client/json.h	/^	void operator()(char c)$/;"	f	struct:Format::Serialize
operator ()	client/log.cpp	/^	std::ostream& Logger::operator()(Log_domain const& domain, $/;"	f	class:lg::Logger
operator ()	client/random.h	/^			uint32_t operator()() { return next_random(); }$/;"	f	class:randomness::Rng
operator ()	common/cmdline/option_description.cpp	/^options_description_easy_init& options_description_easy_init::operator()(const std::string& name,$/;"	f	class:options_description_easy_init
operator ()	common/configuration/config.h	/^	bool operator()(const std::string& str) $/;"	f	struct:tlp::convert_string
operator ()	common/configuration/config.h	/^	constexpr typename std::enable_if_t<std::is_same_v<std::remove_const_t<T>, std::string>, std::string> operator()(const std::string& str) { return str; }$/;"	f	struct:tlp::convert_string
operator ()	common/configuration/config.h	/^	double operator()(const std::string& str) { return atof(str.c_str()); }$/;"	f	struct:tlp::convert_string
operator ()	common/configuration/config.h	/^	float operator()(const std::string& str) { return strtof(str.c_str(), 0); }$/;"	f	struct:tlp::convert_string
operator ()	common/configuration/config.h	/^	int16_t operator()(const std::string& str) { return atoi(str.c_str()); }$/;"	f	struct:tlp::convert_string
operator ()	common/configuration/config.h	/^	int32_t operator()(const std::string& str) { return atol(str.c_str()); }$/;"	f	struct:tlp::convert_string
operator ()	common/configuration/config.h	/^	int64_t operator()(const std::string& str) { return atoll(str.c_str()); }$/;"	f	struct:tlp::convert_string
operator ()	common/configuration/config.h	/^	int8_t operator()(const std::string& str) { return atoi(str.c_str()); }$/;"	f	struct:tlp::convert_string
operator ()	common/configuration/config.h	/^	std::string operator()(const std::string& str) { return str; }$/;"	f	struct:tlp::convert_string
operator ()	common/configuration/config.h	/^	uint16_t operator()(const std::string& str) { return strtoul(str.c_str(), 0, 10); }$/;"	f	struct:tlp::convert_string
operator ()	common/configuration/config.h	/^	uint32_t operator()(const std::string& str) { return strtoul(str.c_str(), 0, 10); }$/;"	f	struct:tlp::convert_string
operator ()	common/configuration/config.h	/^	uint64_t operator()(const std::string& str) { return strtoull(str.c_str(), 0, 10); }$/;"	f	struct:tlp::convert_string
operator ()	common/configuration/config.h	/^	uint8_t operator()(const std::string& str) { return strtoul(str.c_str(), 0, 10); }$/;"	f	struct:tlp::convert_string
operator ()	server/database/update/update_fetcher.cpp	/^bool update_fetcher::path_compare::operator()(const locale_file_entry& l, const locale_file_entry& r) const$/;"	f	class:update_fetcher::path_compare
operator ()	server/process/executor.h	/^		void operator()(T& arg) const$/;"	f	struct:executor::call_on_exec_error
operator ()	server/process/executor.h	/^		void operator()(T& arg) const$/;"	f	struct:executor::call_on_exec_setup
operator ()	server/process/executor.h	/^		void operator()(T& arg) const$/;"	f	struct:executor::call_on_fork_error
operator ()	server/process/executor.h	/^		void operator()(const T& arg) const$/;"	f	struct:executor::call_on_fork_setup
operator ()	server/process/executor.h	/^		void operator()(const T& arg) const$/;"	f	struct:executor::call_on_fork_success
operator ()	server/process/executor.h	/^	child operator()(Args&&... seq)$/;"	f	struct:executor
operator ()	server/process/run_exe.h	/^		void operator()(T* const p) { delete[] p; }$/;"	f	struct:run_exe_::array_deleter
operator ()	server/process/test.cpp	/^		void operator()(T& arg) const$/;"	f	struct:executor::call_on_exec_error
operator ()	server/process/test.cpp	/^		void operator()(T& arg) const$/;"	f	struct:executor::call_on_exec_setup
operator ()	server/process/test.cpp	/^		void operator()(T& arg) const$/;"	f	struct:executor::call_on_fork_error
operator ()	server/process/test.cpp	/^		void operator()(const T& arg) const$/;"	f	struct:executor::call_on_fork_setup
operator ()	server/process/test.cpp	/^		void operator()(const T& arg) const$/;"	f	struct:executor::call_on_fork_success
operator ()	server/process/test.cpp	/^	child operator()(Args&&... seq)$/;"	f	struct:executor
operator *	client/serialization/ucs4_iterator_base.h	/^		        ucs4::Char operator*() const { return current_char_; }$/;"	f	class:ucs4::Iterator_base
operator *	common/cryptography/big_number.h	/^        big_number operator*(big_number const& bn)$/;"	f	class:big_number
operator *=	common/cryptography/big_number.cpp	/^big_number big_number::operator*=(big_number const& bn)$/;"	f	class:big_number
operator +	client/sdl/point.h	/^	Point operator+(const Point& point) const$/;"	f	struct:Point
operator +	common/cryptography/big_number.h	/^        big_number operator+(big_number const& bn)$/;"	f	class:big_number
operator ++	client/serialization/ucs4_iterator_base.h	/^		        Iterator_base& operator++()$/;"	f	class:ucs4::Iterator_base
operator +=	client/sdl/point.cpp	/^Point& Point::operator+=(const Point& point)$/;"	f	class:Point
operator +=	client/utils/json.h	/^    reference operator+=(basic_json&& val)$/;"	f	class:basic_json
operator +=	client/utils/json.h	/^    reference operator+=(const basic_json& val)$/;"	f	class:basic_json
operator +=	client/utils/json.h	/^    reference operator+=(const typename object_t::value_type& val)$/;"	f	class:basic_json
operator +=	client/utils/json.h	/^    reference operator+=(initializer_list_t init)$/;"	f	class:basic_json
operator +=	common/cryptography/big_number.cpp	/^big_number big_number::operator+=(big_number const& bn)$/;"	f	class:big_number
operator -	client/sdl/point.h	/^	Point operator-(const Point& point) const$/;"	f	struct:Point
operator -	common/cryptography/big_number.h	/^        big_number operator-(big_number const& bn)$/;"	f	class:big_number
operator -=	client/sdl/point.cpp	/^Point& Point::operator-=(const Point& point)$/;"	f	class:Point
operator -=	common/cryptography/big_number.cpp	/^big_number big_number::operator-=(big_number const& bn)$/;"	f	class:big_number
operator ->	client/sdl/surface.h	/^                SDL_Surface* operator->() { return surface_; }$/;"	f	class:Surface
operator /	common/cryptography/big_number.h	/^        big_number operator\/(big_number const& bn)$/;"	f	class:big_number
operator /=	common/cryptography/big_number.cpp	/^big_number big_number::operator\/=(big_number const& bn)$/;"	f	class:big_number
operator <	client/font/font_id.h	/^	bool operator<(const Font_id& id) const$/;"	f	struct:Font_id
operator <	client/image.h	/^			bool operator<(const Locator& a) const$/;"	f	class:image::Locator
operator <	client/sdl/point.h	/^	bool operator<(const Point& point) const$/;"	f	struct:Point
operator <	client/sdl/surface.h	/^bool operator<(const Surface& a, const Surface& b) $/;"	f
operator <	client/thread/thread.h	/^inline bool operator<(const Thread::Id& l, const Thread::Id& r) $/;"	f
operator <	client/utils/json.h	/^    friend bool operator<(const ScalarType lhs, const_reference rhs) $/;"	f	class:basic_json
operator <	client/utils/json.h	/^    friend bool operator<(const_reference lhs, const ScalarType rhs) $/;"	f	class:basic_json
operator <	client/utils/json.h	/^    friend bool operator<(const_reference lhs, const_reference rhs) $/;"	f	class:basic_json
operator <	client/utils/json.h	/^inline bool operator<(const value_t& l, const value_t& r)$/;"	f
operator <	client/version.cpp	/^bool operator<(const Version_info& l, const Version_info& r)$/;"	f
operator <	common/utility/timestamp.h	/^inline bool operator<(Timestamp l, Timestamp r)$/;"	f
operator <	server/shared/networking/ip/address.cpp	/^bool operator<(const address& a1, const address& a2) $/;"	f
operator <	server/shared/networking/ip/address_v4.h	/^	friend bool operator<(const address_v4& a1, const address_v4& a2) $/;"	f	class:address_v4
operator <	server/shared/networking/ip/address_v6.cpp	/^bool operator<(const address_v6& a1, const address_v6& a2) $/;"	f
operator <	server/shared/networking/ip/basic_endpoint.h	/^	friend bool operator<(const basic_endpoint<InternetProtocol>& e1,$/;"	f	class:basic_endpoint
operator <	server/shared/networking/ip/endpoint.cpp	/^bool operator<(const endpoint& e1, const endpoint& e2) $/;"	f
operator <<	client/color.h	/^inline std::ostream& operator<<(std::ostream& s, const Color& c)$/;"	f
operator <<	client/commandline_options.cpp	/^std::ostream& operator<<(std::ostream& os, $/;"	f
operator <<	client/font/pango/stream_ops.h	/^	inline std::ostream& operator<<(std::ostream& os, \\$/;"	f	namespace:font
operator <<	client/gui/core/event/handler.cpp	/^		std::ostream& operator<<(std::ostream& stream, const Ui_event event)$/;"	f	namespace:gui::event
operator <<	client/old/byte_buffer.cpp	/^Byte_buffer& Byte_buffer::operator<<(const char* str)$/;"	f	class:Byte_buffer
operator <<	client/old/byte_buffer.cpp	/^Byte_buffer& Byte_buffer::operator<<(const int32_t& val)$/;"	f	class:Byte_buffer
operator <<	client/old/byte_buffer.cpp	/^Byte_buffer& Byte_buffer::operator<<(const std::string& str)$/;"	f	class:Byte_buffer
operator <<	client/sdl/point.cpp	/^std::ostream& operator<<(std::ostream& stream, const Point& point)$/;"	f
operator <<	client/sdl/rect.cpp	/^std::ostream& operator<<(std::ostream& os, const SDL_Rect& rect)$/;"	f
operator <<	client/thread/thread.h	/^inline std::ostream& operator<<(std::ostream& out, Thread::Id id)$/;"	f
operator <<	client/utils/json.h	/^    friend std::istream& operator<<(basic_json& j, std::istream& i)$/;"	f	class:basic_json
operator <<	client/utils/json.h	/^    friend std::ostream& operator<<(std::ostream& o, const basic_json& j)$/;"	f	class:basic_json
operator <<	common/cmdline/option_description.cpp	/^std::ostream& operator<<(std::ostream& os, const options_description& desc) $/;"	f
operator <<	common/logging/old_logging/log_stream.cpp	/^Log_stream& Log_stream::operator<<(bool v)$/;"	f	class:lg::Log_stream
operator <<	common/logging/old_logging/log_stream.cpp	/^Log_stream& Log_stream::operator<<(const char* str)$/;"	f	class:lg::Log_stream
operator <<	common/logging/old_logging/log_stream.cpp	/^Log_stream& Log_stream::operator<<(const std::string& v)$/;"	f	class:lg::Log_stream
operator <<	common/logging/old_logging/log_stream.cpp	/^Log_stream& Log_stream::operator<<(const unsigned char* str)$/;"	f	class:lg::Log_stream
operator <<	common/logging/old_logging/log_stream.cpp	/^Log_stream& Log_stream::operator<<(double v)$/;"	f	class:lg::Log_stream
operator <<	common/logging/old_logging/log_stream.cpp	/^Log_stream& Log_stream::operator<<(float v)$/;"	f	class:lg::Log_stream
operator <<	common/logging/old_logging/log_stream.cpp	/^Log_stream& Log_stream::operator<<(int16_t v)$/;"	f	class:lg::Log_stream
operator <<	common/logging/old_logging/log_stream.cpp	/^Log_stream& Log_stream::operator<<(int32_t v)$/;"	f	class:lg::Log_stream
operator <<	common/logging/old_logging/log_stream.cpp	/^Log_stream& Log_stream::operator<<(int64_t v)$/;"	f	class:lg::Log_stream
operator <<	common/logging/old_logging/log_stream.cpp	/^Log_stream& Log_stream::operator<<(int8_t v)$/;"	f	class:lg::Log_stream
operator <<	common/logging/old_logging/log_stream.cpp	/^Log_stream& Log_stream::operator<<(uint16_t v)$/;"	f	class:lg::Log_stream
operator <<	common/logging/old_logging/log_stream.cpp	/^Log_stream& Log_stream::operator<<(uint32_t v)$/;"	f	class:lg::Log_stream
operator <<	common/logging/old_logging/log_stream.cpp	/^Log_stream& Log_stream::operator<<(uint64_t v)$/;"	f	class:lg::Log_stream
operator <<	common/logging/old_logging/log_stream.cpp	/^Log_stream& Log_stream::operator<<(uint8_t v)$/;"	f	class:lg::Log_stream
operator <<	common/logging/old_logging/logging.cpp	/^inline Log_stream& operator<<(Log_stream& s, std::string& v)$/;"	f	namespace:lg
operator <<	server/shared/packets/byte_buffer.h	/^	byte_buffer& operator<<(const char* str)$/;"	f	class:byte_buffer
operator <<	server/shared/packets/byte_buffer.h	/^	byte_buffer& operator<<(const std::string& value)$/;"	f	class:byte_buffer
operator <<	server/shared/packets/byte_buffer.h	/^	byte_buffer& operator<<(double value)$/;"	f	class:byte_buffer
operator <<	server/shared/packets/byte_buffer.h	/^	byte_buffer& operator<<(float value)$/;"	f	class:byte_buffer
operator <<	server/shared/packets/byte_buffer.h	/^	byte_buffer& operator<<(int16_t value)$/;"	f	class:byte_buffer
operator <<	server/shared/packets/byte_buffer.h	/^	byte_buffer& operator<<(int32_t value)$/;"	f	class:byte_buffer
operator <<	server/shared/packets/byte_buffer.h	/^	byte_buffer& operator<<(int64_t value)$/;"	f	class:byte_buffer
operator <<	server/shared/packets/byte_buffer.h	/^	byte_buffer& operator<<(int8_t value)$/;"	f	class:byte_buffer
operator <<	server/shared/packets/byte_buffer.h	/^	byte_buffer& operator<<(uint16_t value)$/;"	f	class:byte_buffer
operator <<	server/shared/packets/byte_buffer.h	/^	byte_buffer& operator<<(uint32_t value)$/;"	f	class:byte_buffer
operator <<	server/shared/packets/byte_buffer.h	/^	byte_buffer& operator<<(uint64_t value)$/;"	f	class:byte_buffer
operator <<	server/shared/packets/byte_buffer.h	/^	byte_buffer& operator<<(uint8_t value)$/;"	f	class:byte_buffer
operator <=	client/sdl/point.h	/^	bool operator<=(const Point& point) const$/;"	f	struct:Point
operator <=	client/thread/thread.h	/^inline bool operator<=(const Thread::Id& l, const Thread::Id& r) $/;"	f
operator <=	client/utils/json.h	/^    friend bool operator<=(const ScalarType lhs, const_reference rhs) $/;"	f	class:basic_json
operator <=	client/utils/json.h	/^    friend bool operator<=(const_reference lhs, const ScalarType rhs) $/;"	f	class:basic_json
operator <=	client/utils/json.h	/^    friend bool operator<=(const_reference lhs, const_reference rhs) $/;"	f	class:basic_json
operator <=	client/version.cpp	/^bool operator<=(const Version_info& l, const Version_info& r)$/;"	f
operator <=	server/shared/networking/ip/address.h	/^	friend bool operator<=(const address& a1, const address& a2) $/;"	f	class:address
operator <=	server/shared/networking/ip/address_v4.h	/^	friend bool operator<=(const address_v4& a1, const address_v4& a2) $/;"	f	class:address_v4
operator <=	server/shared/networking/ip/address_v6.h	/^	friend bool operator<=(const address_v6& a1, const address_v6& a2) $/;"	f	class:address_v6
operator <=	server/shared/networking/ip/basic_endpoint.h	/^	friend bool operator<=(const basic_endpoint<InternetProtocol>& e1,$/;"	f	class:basic_endpoint
operator =	client/image.cpp	/^	Locator& Locator::operator=(const Locator& a)$/;"	f	class:image::Locator
operator =	client/json.h	/^	Value& operator=(Value&& x)$/;"	f	class:Format::Value
operator =	client/json.h	/^	Value& operator=(const Value& x)$/;"	f	class:Format::Value
operator =	client/net/inet_address.cpp	/^	Inet_address& Inet_address::operator=(Inet_address&& other)$/;"	f	class:net::Inet_address
operator =	client/net/inet_address.cpp	/^	Inet_address& Inet_address::operator=(const Inet_address& other) $/;"	f	class:net::Inet_address
operator =	client/old/byte_buffer.cpp	/^Byte_buffer& Byte_buffer::operator=(Byte_buffer&& buf)$/;"	f	class:Byte_buffer
operator =	client/old/byte_buffer.cpp	/^Byte_buffer& Byte_buffer::operator=(const Byte_buffer& buf)$/;"	f	class:Byte_buffer
operator =	client/old/mysql_pool.cpp	/^	Query& Query::operator=(const Query& query)$/;"	f	class:db::Query
operator =	client/old/server.h	/^	Descriptor& operator=(Descriptor&& d)$/;"	f	struct:Descriptor
operator =	client/old/server.h	/^	Descriptor& operator=(const Descriptor& d)$/;"	f	struct:Descriptor
operator =	client/sdl/surface.h	/^		Surface& operator=(Surface&& s)$/;"	f	class:Surface
operator =	client/sdl/surface.h	/^		Surface& operator=(const Surface& s)$/;"	f	class:Surface
operator =	client/sdl/texture.cpp	/^Texture& operator=(Texture&& t)$/;"	f
operator =	client/sound.cpp	/^			Sound_cache_chunk& operator=(const Sound_cache_chunk& scc)$/;"	f	class:__anon28::Sound_cache_chunk
operator =	client/thread/mutex.h	/^		Unique_lock& operator=(Unique_lock&& u)$/;"	f	class:Unique_lock
operator =	client/thread/thread.h	/^		Thread& operator=(Thread&& t)$/;"	f	class:Thread
operator =	common/cryptography/big_number.cpp	/^big_number& big_number::operator=(big_number const& bn)$/;"	f	class:big_number
operator =	common/utility/message_buffer.h	/^	message_buffer& operator=(const message_buffer& right)$/;"	f	class:message_buffer
operator =	common/utility/message_buffer.h	/^	message_buffer& operator=(message_buffer&& right)$/;"	f	class:message_buffer
operator =	server/database/database/query_callback.cpp	/^	query_callback_data& operator=(query_callback_data&& r)$/;"	f	struct:query_callback::query_callback_data
operator =	server/database/database/query_callback.cpp	/^query_callback& query_callback::operator=(query_callback&& r)$/;"	f	class:query_callback
operator =	server/game/server/world_packet.h	/^	world_packet& operator=(const world_packet& right)$/;"	f	class:world_packet
operator =	server/game/server/world_packet.h	/^	world_packet& operator=(world_packet&& right)$/;"	f	class:world_packet
operator =	server/process/file_descriptor.cpp	/^file_descriptor::file_descriptor& operator=(const file_descriptor& fd) $/;"	f
operator =	server/process/file_descriptor.cpp	/^file_descriptor::file_descriptor& operator=(file_descriptor&& fd)$/;"	f
operator =	server/shared/networking/ip/address.cpp	/^address& address::operator=(address&& other) $/;"	f	class:address
operator =	server/shared/networking/ip/address.cpp	/^address& address::operator=(const address& other) $/;"	f	class:address
operator =	server/shared/networking/ip/address.cpp	/^address& address::operator=(const address_v4& ipv4_address) $/;"	f	class:address
operator =	server/shared/networking/ip/address.cpp	/^address& address::operator=(const address_v6& ipv6_address) $/;"	f	class:address
operator =	server/shared/networking/ip/address_v4.h	/^	address_v4& operator=(address_v4&& other) $/;"	f	class:address_v4
operator =	server/shared/networking/ip/address_v4.h	/^	address_v4& operator=(const address_v4& other) $/;"	f	class:address_v4
operator =	server/shared/networking/ip/address_v6.cpp	/^address_v6& address_v6::operator=(address_v6&& other) $/;"	f	class:address_v6
operator =	server/shared/networking/ip/address_v6.cpp	/^address_v6& address_v6::operator=(const address_v6& other) $/;"	f	class:address_v6
operator =	server/shared/networking/ip/basic_endpoint.h	/^	basic_endpoint& operator=(basic_endpoint&& other) $/;"	f	class:basic_endpoint
operator =	server/shared/networking/ip/basic_endpoint.h	/^	basic_endpoint& operator=(const basic_endpoint& other) $/;"	f	class:basic_endpoint
operator =	server/shared/networking/ip/endpoint.h	/^	endpoint& operator=(const endpoint& other) $/;"	f	class:endpoint
operator =	server/shared/networking/socket.h	/^	socket& operator=(const socket& right) $/;"	f	class:socket
operator =	server/shared/networking/socket.h	/^	socket& operator=(socket&& right)$/;"	f	class:socket
operator =	server/shared/packets/byte_buffer.h	/^	byte_buffer& operator=(byte_buffer&& right)$/;"	f	class:byte_buffer
operator =	server/shared/packets/byte_buffer.h	/^	byte_buffer& operator=(const byte_buffer& right)$/;"	f	class:byte_buffer
operator ==	client/color.h	/^	bool operator==(const Color& c) const$/;"	f	struct:Color
operator ==	client/font/font_id.h	/^	bool operator==(const Font_id& id) const$/;"	f	struct:Font_id
operator ==	client/font/font_id.h	/^	bool operator==(const Text_chunk& t) const$/;"	f	struct:Text_chunk
operator ==	client/font/text_surface.cpp	/^bool Text_surface::operator==(const Text_surface& t)$/;"	f	class:Text_surface
operator ==	client/image.h	/^			bool operator==(const Locator& a) const $/;"	f	class:image::Locator
operator ==	client/sdl/point.h	/^	bool operator==(const Point& point) const$/;"	f	struct:Point
operator ==	client/sdl/rect.cpp	/^bool operator==(const SDL_Rect& a, const SDL_Rect& b)$/;"	f
operator ==	client/serialization/ucs4_iterator_base.h	/^		        bool operator==(const Iterator_base& a) const$/;"	f	class:ucs4::Iterator_base
operator ==	client/sound.cpp	/^			bool operator==(const Sound_cache_chunk& scc) const$/;"	f	class:__anon28::Sound_cache_chunk
operator ==	client/sound_music_track.h	/^inline bool operator==(const sound::Music_track& a, $/;"	f
operator ==	client/thread/thread.h	/^inline bool operator==(const Thread::Id& l, const Thread::Id& r) $/;"	f
operator ==	client/utils/json.h	/^    friend bool operator==(const ScalarType lhs, const_reference rhs) $/;"	f	class:basic_json
operator ==	client/utils/json.h	/^    friend bool operator==(const_reference lhs, const ScalarType rhs) $/;"	f	class:basic_json
operator ==	client/utils/json.h	/^    friend bool operator==(const_reference lhs, const_reference rhs) $/;"	f	class:basic_json
operator ==	client/version.cpp	/^bool operator==(const Version_info& l, const Version_info& r)$/;"	f
operator ==	common/utility/timestamp.h	/^inline bool operator==(Timestamp l, Timestamp r)$/;"	f
operator ==	server/shared/networking/ip/address.cpp	/^bool operator==(const address& a1, const address& a2) $/;"	f
operator ==	server/shared/networking/ip/address_v4.h	/^	friend bool operator==(const address_v4& a1, const address_v4& a2) $/;"	f	class:address_v4
operator ==	server/shared/networking/ip/address_v6.cpp	/^bool operator==(const address_v6& a1, const address_v6& a2) $/;"	f
operator ==	server/shared/networking/ip/basic_endpoint.h	/^	friend bool operator==(const basic_endpoint<InternetProtocol>& e1,$/;"	f	class:basic_endpoint
operator ==	server/shared/networking/ip/endpoint.cpp	/^bool operator==(const endpoint& e1, const endpoint& e2) $/;"	f
operator ==	server/shared/networking/ip/tcp.h	/^	friend bool operator==(const tcp& p1, const tcp& p2)$/;"	f	class:tcp
operator ==	server/shared/networking/ip/udp.h	/^	friend bool operator==(const udp& p1, const udp& p2)$/;"	f	class:udp
operator >	client/thread/thread.h	/^inline bool operator>(const Thread::Id& l, const Thread::Id& r) $/;"	f
operator >	client/utils/json.h	/^    friend bool operator>(const ScalarType lhs, const_reference rhs) $/;"	f	class:basic_json
operator >	client/utils/json.h	/^    friend bool operator>(const_reference lhs, const ScalarType rhs) $/;"	f	class:basic_json
operator >	client/utils/json.h	/^    friend bool operator>(const_reference lhs, const_reference rhs) $/;"	f	class:basic_json
operator >	client/version.cpp	/^bool operator>(const Version_info& l, const Version_info& r)$/;"	f
operator >	server/shared/networking/ip/address.h	/^	friend bool operator>(const address& a1, const address& a2) $/;"	f	class:address
operator >	server/shared/networking/ip/address_v4.h	/^	friend bool operator>(const address_v4& a1, const address_v4& a2) $/;"	f	class:address_v4
operator >	server/shared/networking/ip/address_v6.h	/^	friend bool operator>(const address_v6& a1, const address_v6& a2) $/;"	f	class:address_v6
operator >	server/shared/networking/ip/basic_endpoint.h	/^	friend bool operator>(const basic_endpoint<InternetProtocol>& e1,$/;"	f	class:basic_endpoint
operator >=	client/thread/thread.h	/^inline bool operator>=(const Thread::Id& l, const Thread::Id& r) $/;"	f
operator >=	client/utils/json.h	/^    friend bool operator>=(const ScalarType lhs, const_reference rhs) $/;"	f	class:basic_json
operator >=	client/utils/json.h	/^    friend bool operator>=(const_reference lhs, const ScalarType rhs) $/;"	f	class:basic_json
operator >=	client/utils/json.h	/^    friend bool operator>=(const_reference lhs, const_reference rhs) $/;"	f	class:basic_json
operator >=	client/version.cpp	/^bool operator >=(const Version_info& l, const Version_info& r)$/;"	f
operator >=	server/shared/networking/ip/address.h	/^	friend bool operator>=(const address& a1, const address& a2) $/;"	f	class:address
operator >=	server/shared/networking/ip/address_v4.h	/^	friend bool operator>=(const address_v4& a1, const address_v4& a2) $/;"	f	class:address_v4
operator >=	server/shared/networking/ip/address_v6.h	/^	friend bool operator>=(const address_v6& a1, const address_v6& a2) $/;"	f	class:address_v6
operator >=	server/shared/networking/ip/basic_endpoint.h	/^	friend bool operator>=(const basic_endpoint<InternetProtocol>& e1,$/;"	f	class:basic_endpoint
operator >>	client/old/byte_buffer.cpp	/^Byte_buffer& Byte_buffer::operator>>(char str[])$/;"	f	class:Byte_buffer
operator >>	client/old/byte_buffer.cpp	/^Byte_buffer& Byte_buffer::operator>>(int32_t& value)$/;"	f	class:Byte_buffer
operator >>	client/old/byte_buffer.cpp	/^Byte_buffer& Byte_buffer::operator>>(std::string& str)$/;"	f	class:Byte_buffer
operator >>	client/utils/json.h	/^    friend std::istream& operator>>(std::istream& i, basic_json& j)$/;"	f	class:basic_json
operator >>	client/utils/json.h	/^    friend std::ostream& operator>>(const basic_json& j, std::ostream& o)$/;"	f	class:basic_json
operator >>	server/shared/packets/byte_buffer.cpp	/^byte_buffer& byte_buffer::operator>>(double& value)$/;"	f	class:byte_buffer
operator >>	server/shared/packets/byte_buffer.h	/^	byte_buffer& operator>>(bool& value)$/;"	f	class:byte_buffer
operator >>	server/shared/packets/byte_buffer.h	/^	byte_buffer& operator>>(int16_t value)$/;"	f	class:byte_buffer
operator >>	server/shared/packets/byte_buffer.h	/^	byte_buffer& operator>>(int32_t value)$/;"	f	class:byte_buffer
operator >>	server/shared/packets/byte_buffer.h	/^	byte_buffer& operator>>(int64_t value)$/;"	f	class:byte_buffer
operator >>	server/shared/packets/byte_buffer.h	/^	byte_buffer& operator>>(int8_t value)$/;"	f	class:byte_buffer
operator >>	server/shared/packets/byte_buffer.h	/^	byte_buffer& operator>>(std::string& value)$/;"	f	class:byte_buffer
operator >>	server/shared/packets/byte_buffer.h	/^	byte_buffer& operator>>(uint16_t value)$/;"	f	class:byte_buffer
operator >>	server/shared/packets/byte_buffer.h	/^	byte_buffer& operator>>(uint32_t value)$/;"	f	class:byte_buffer
operator >>	server/shared/packets/byte_buffer.h	/^	byte_buffer& operator>>(uint64_t value)$/;"	f	class:byte_buffer
operator >>	server/shared/packets/byte_buffer.h	/^	byte_buffer& operator>>(uint8_t value)$/;"	f	class:byte_buffer
operator SDL_Point	client/sdl/point.cpp	/^Point::operator SDL_Point() const$/;"	f	class:Point
operator SDL_Renderer*	client/sdl/window.cpp	/^Window::operator SDL_Renderer*()$/;"	f	class:Window
operator SDL_Surface*	client/sdl/surface.h	/^		operator SDL_Surface*() const { return surface_; }$/;"	f	class:Surface
operator SDL_Texture*	client/sdl/texture.h	/^		operator SDL_Texture*() const$/;"	f	class:Texture
operator SDL_UserEvent	client/sdl/userevent.h	/^			operator SDL_UserEvent() { return event_; }$/;"	f	class:sdl::User_event
operator SDL_Window*	client/sdl/window.cpp	/^Window::operator SDL_Window*()$/;"	f	class:Window
operator ValueType	client/utils/json.h	/^    operator ValueType() const$/;"	f	class:basic_json
operator []	client/cmdln.cpp	/^bool Commandline::operator[](const std::string& long_opt)$/;"	f	class:Commandline
operator []	client/config.h	/^		Node* operator[](const std::string& str)$/;"	f	class:Config
operator []	client/config.h	/^std::string Config::operator[](Args&& ... keys)$/;"	f	class:Config
operator []	client/key.cpp	/^bool Key::operator[](int k) const$/;"	f	class:Key
operator []	client/utils/json.h	/^    const_reference operator[](T* key) const$/;"	f	class:basic_json
operator []	client/utils/json.h	/^    const_reference operator[](const json_pointer& ptr) const$/;"	f	class:basic_json
operator []	client/utils/json.h	/^    const_reference operator[](const typename object_t::key_type& key) const$/;"	f	class:basic_json
operator []	client/utils/json.h	/^    const_reference operator[](size_type idx) const$/;"	f	class:basic_json
operator []	client/utils/json.h	/^    reference operator[](T* key)$/;"	f	class:basic_json
operator []	client/utils/json.h	/^    reference operator[](const json_pointer& ptr)$/;"	f	class:basic_json
operator []	client/utils/json.h	/^    reference operator[](const typename object_t::key_type& key)$/;"	f	class:basic_json
operator []	client/utils/json.h	/^reference operator[](size_type idx)$/;"	f	class:basic_json
operator []	common/utility/util.h	/^    const_reference operator [] (size_type i) const { return storage_[i]; }$/;"	f	class:tokenizer
operator []	common/utility/util.h	/^    reference operator [] (size_type i) { return storage_[i]; }$/;"	f	class:tokenizer
operator []	server/database/database/query_result.cpp	/^const field prepared_result_set::operator[](size_t index) const$/;"	f	class:prepared_result_set
operator []	server/database/database/query_result.cpp	/^const field& result_set::operator[](size_t index) const$/;"	f	class:result_set
operator []	server/game/server/protocol/opcodes.h	/^	const client_opcode_handler* operator[](opcode_client index) const$/;"	f	class:opcode_table
operator []	server/game/server/protocol/opcodes.h	/^	const server_opcode_handler* operator[](opcode_server index) const$/;"	f	class:opcode_table
operator []	server/shared/packets/byte_buffer.h	/^	const uint8_t& operator[](const size_t pos) const$/;"	f	class:byte_buffer
operator []	server/shared/packets/byte_buffer.h	/^	uint8_t& operator[](const size_t pos)$/;"	f	class:byte_buffer
operator bool	client/thread/mutex.h	/^		explicit operator bool() const { return owns_lock(); }$/;"	f	class:Unique_lock
operator char*	client/old/byte_buffer.cpp	/^Byte_buffer::operator char*()$/;"	f	class:Byte_buffer
operator int	client/net/socket.h	/^	operator int() { return fd_; }$/;"	f	class:net::Socket
operator int	server/process/file_descriptor.h	/^	operator int() const { return fd_; }$/;"	f	class:file_descriptor
operator int	server/shared/networking/socket.h	/^	operator int() { return fd_; }$/;"	f	class:socket
operator sockaddr_in&	client/net/inet_address.h	/^			operator sockaddr_in&() { return addr_; }$/;"	f	class:net::Inet_address
operator std::string	client/version.h	/^		operator std::string() const { return str(); }$/;"	f	class:Version_info
operator value_t	client/utils/json.h	/^    constexpr operator value_t() const { return type_; }$/;"	f	class:basic_json
option	common/cmdline/option.h	/^	option() : position_key(-1) {}$/;"	f	struct:option
option	common/cmdline/option.h	/^	option(const std::string& key, const std::vector<std::string>& value) :$/;"	f	struct:option
option	common/cmdline/option.h	/^struct option$/;"	s
option	server/shared/networking/socket.h	/^	option(int level_, int optname_, int optval_, const std::string& desc) :$/;"	f	struct:socket_option
option	server/shared/networking/socket.h	/^struct option$/;"	s
option_chars_	client/cmdln.h	/^		std::string option_chars_;$/;"	m	class:Commandline
option_count	client/cmdln.cpp	/^	int option_count;$/;"	m	struct:Cmd_param_pos	file:
option_description	client/cmdln.cpp	/^	std::string option_description;$/;"	m	struct:Cmd_option	file:
option_description	common/cmdline/option_description.cpp	/^option_description::option_description(const std::string& name, bool vs) :$/;"	f	class:option_description
option_description	common/cmdline/option_description.cpp	/^option_description::option_description(const std::string& name, bool vs,$/;"	f	class:option_description
option_description	common/cmdline/option_description.h	/^	option_description() : value_semantic_(false) {}$/;"	f	class:option_description
option_description	common/cmdline/option_description.h	/^class option_description$/;"	c
option_iter	client/cmdln.cpp	/^	std::vector<std::string>::iterator option_iter;$/;"	m	struct:Cmd_param_pos	file:
option_pos_iterator_	client/cmdln.h	/^		std::vector<std::vector<std::string>::iterator> option_pos_iterator_;$/;"	m	class:Commandline
option_pos_list_	client/cmdln.h	/^		std::vector<std::vector<std::string>::iterator> option_pos_list_;$/;"	m	class:Commandline
optional	client/cmdln.h	/^		optional,$/;"	m	class:Cmd_param::Param_mode
optional_data	server/game/server/protocol/packet_log.cpp	/^	optional_data optional_data;$/;"	m	struct:packet_header	file:
optional_data	server/game/server/protocol/packet_log.cpp	/^	struct optional_data$/;"	s	struct:packet_header	file:
optional_data_size	server/game/server/protocol/packet_log.cpp	/^	uint32_t optional_data_size;$/;"	m	struct:log_header	file:
optional_data_size	server/game/server/protocol/packet_log.cpp	/^	uint32_t optional_data_size;$/;"	m	struct:packet_header	file:
options	common/cmdline/cmdline.cpp	/^cmdline& cmdline::options(const options_description& desc_)$/;"	f	class:cmdline
options_	common/cmdline/option_description.h	/^	std::vector<std::shared_ptr<option_description>> options_;$/;"	m	class:options_description
options_description	common/cmdline/option_description.cpp	/^options_description::options_description(const std::string& caption) : caption_(caption)$/;"	f	class:options_description
options_description	common/cmdline/option_description.h	/^class options_description$/;"	c
options_description_easy_init	common/cmdline/option_description.h	/^	options_description_easy_init(options_description* owner) : owner_(owner) {}$/;"	f	class:options_description_easy_init
options_description_easy_init	common/cmdline/option_description.h	/^class options_description_easy_init$/;"	c
options_error	common/cmdline/option_description.h	/^	options_error(const std::string& str) : msg(str) {}$/;"	f	struct:options_error
options_error	common/cmdline/option_description.h	/^struct options_error : std::exception$/;"	s
optname	server/shared/networking/socket.h	/^	int optname;$/;"	m	struct:socket_option
opts	client/game_launcher.h	/^		const Commandline_options& opts() const { return cmdline_opts_; }$/;"	f	class:Game_launcher
optval	server/shared/networking/socket.h	/^	int optval;$/;"	m	struct:socket_option
original_tokens	common/cmdline/option.h	/^	std::vector<std::string> original_tokens;$/;"	m	struct:option
ostream_file	client/filesystem.cpp	/^	scoped_ostream ostream_file(const std::string& name, $/;"	f	namespace:filesystem
other	client/utils/json.h	/^    basic_json& operator=(basic_json other)  ($/;"	f	class:basic_json
other	client/utils/json.h	/^    void swap(reference other)  ($/;"	f	class:basic_json
out_	client/json.h	/^	Value *out_;$/;"	m	class:Format::Default_parse_context
out_	client/serialization/unicode_cast.h	/^		Iter& out_;$/;"	m	struct:ucs4_convert_impl::Iterator_writer
out_char_dump	common/logging/log.cpp	/^void log::out_char_dump(char const* str, uint32_t account_id, uint64_t guid, char const* name)$/;"	f	class:log
out_command	common/logging/log.cpp	/^void log::out_command(std::string&& message, std::string&& param1)$/;"	f	class:log
out_command	common/logging/log.h	/^	void out_command(uint32_t account, Format&& fmt, Args&&... args)$/;"	f	class:log
out_message	common/logging/log.cpp	/^void log::out_message(std::string const& filter, log_level const level, std::string&& message)$/;"	f	class:log
out_message	common/logging/log.h	/^	inline void out_message(std::string const& filter, log_level const level, Fmt&& fmt, Args&&... args)$/;"	f	class:log
output	client/log.cpp	/^static std::ostream& output()$/;"	f	file:
output_	client/log.h	/^			std::ostream* output_;$/;"	m	class:lg::Scope_logger
output_buffer	client/net/tcp_connection.h	/^  Buffer* output_buffer()$/;"	f	class:net::Tcp_connection
output_buffer_	client/net/tcp_connection.h	/^  Buffer output_buffer_; \/\/ FIXME: use list<Buffer> as output buffer.$/;"	m	class:net::Tcp_connection
output_stream	client/log.cpp	/^static std::ostream* output_stream = nullptr;$/;"	v	file:
over_speed_ping_	server/game/server/world_tcp_socket.h	/^	uint32_t over_speed_ping_;$/;"	m	class:world_tcp_socket::read_data_handler_result
overflow	client/log.cpp	/^			virtual int overflow(int c) $/;"	f	class:__anon31::Null_streambuf	file:
override	client/gui/core/event/handler.cpp	/^				void handle_event(const SDL_Event& event) override;$/;"	m	class:gui::event::Sdl_event_handler	file:
override	client/gui/core/event/handler.cpp	/^				void handle_window_event(const SDL_Event& event) override;$/;"	m	class:gui::event::Sdl_event_handler	file:
override	client/sound.h	/^			void handle_window_event(const SDL_Event& event) override;$/;"	m	class:sound::Music_thinker
override	common/logging/appender_console.h	/^	void write_stream(const log_message* message) override;$/;"	m	class:appender_console
override	common/logging/appender_file.h	/^	void write_stream(const log_message* message) override;$/;"	m	class:appender_file
override	server/database/database/adhoc_statement.h	/^	bool execute() override;$/;"	m	class:basic_statement_task
override	server/database/database/implementation/character_database.h	/^	void do_prepare_statements() override;$/;"	m	class:character_database_connection
override	server/database/database/implementation/hotfix_database.h	/^	void do_prepare_statements() override;$/;"	m	class:hotfix_database_connection
override	server/database/database/implementation/login_database.h	/^	void do_prepare_statements() override;$/;"	m	class:login_database_connection
override	server/database/database/implementation/world_database.h	/^	void do_prepare_statements() override;$/;"	m	class:world_database_connection
override	server/database/database/prepared_statement.h	/^	bool execute() override;$/;"	m	class:prepared_statement_task
override	server/database/database/query_holder.h	/^	bool execute() override;$/;"	m	class:sql_query_holder_task
override	server/database/database/transaction.h	/^	bool execute() override;$/;"	m	class:transaction_task
override	server/database/logging/appender_DB.h	/^	void write(log_message const* message) override;$/;"	m	class:appender_DB
override	server/database/logging/appender_DB.h	/^        void set_realmId(uint32 realmId) override;$/;"	m	class:appender_DB
override	server/game/server/world_tcp_socket.h	/^	bool update() override;$/;"	m	class:world_tcp_socket
override	server/game/server/world_tcp_socket.h	/^	void on_close() override;$/;"	m	class:world_tcp_socket
override	server/game/server/world_tcp_socket.h	/^	void read_handler() override;$/;"	m	class:world_tcp_socket
override	server/game/server/world_tcp_socket.h	/^	void start() override;$/;"	m	class:world_tcp_socket
override	server/game/server/world_tcp_socket_mgr.h	/^	network_thread<world_socket>* create_thread() const override;$/;"	m	class:world_tcp_socket_mgr
override	server/game/server/world_tcp_socket_mgr.h	/^	void on_socket_open(socket& sock) override;$/;"	m	class:world_tcp_socket_mgr
override	server/game/server/world_tcp_socket_mgr.h	/^	void stop_network() override;$/;"	m	class:world_tcp_socket_mgr
owner_	client/gui/core/event/distributor.h	/^				Widget& owner_;$/;"	m	class:gui::event::Mouse_motion
owner_	common/cmdline/option_description.h	/^	options_description* owner_;$/;"	m	class:options_description_easy_init
owner_loop	client/net/channel.h	/^	Event_loop* owner_loop() { return loop_; }$/;"	f	class:net::Channel
owner_loop	server/shared/networking/channel.h	/^	event_loop* owner_loop() { return loop_; }$/;"	f	class:channel
owner_loop_	client/net/poller.h	/^	Event_loop* owner_loop_;$/;"	m	class:net::Poller
owner_loop_	server/shared/networking/epoll.h	/^	event_loop* owner_loop_;$/;"	m	class:epoll
owns_	client/thread/mutex.h	/^		bool owns_;$/;"	m	class:Unique_lock
owns_lock	client/thread/mutex.h	/^		bool owns_lock() const { return owns_; }$/;"	f	class:Unique_lock
p_execute	server/database/database/database_worker_pool.h	/^	void p_execute(F&& sql, Args&&... args)$/;"	f	class:database_worker_pool
p_query	server/database/database/database_worker_pool.h	/^	query_result p_query(F&& sql, Args&&... args)$/;"	f	class:database_worker_pool
p_query	server/database/database/database_worker_pool.h	/^	query_result p_query(F&& sql, T* conn, Args&&... args)$/;"	f	class:database_worker_pool
pack_column_values	client/cmdln.cpp	/^int Commandline::pack_column_values(int long_cols, int short_cols) const$/;"	f	class:Commandline
pack_uint64	server/shared/packets/byte_buffer.h	/^	static size_t pack_uint64(uint64_t value, uint8_t* mask, uint8_t* result)$/;"	f	class:byte_buffer
packet	server/game/server/packet.cpp	/^packet::packet(world_packet&& world_packet) : world_packet_(std::move(world_packet)) {}$/;"	f	class:world_packet::packet
packet	server/game/server/packet.h	/^class packet$/;"	c	namespace:world_packets
packet_buffer_	server/game/server/world_tcp_socket.h	/^	message_buffer packet_buffer_;$/;"	m	class:world_tcp_socket::read_data_handler_result
packet_data_	client/old/packet.h	/^		uint8_t* packet_data_;$/;"	m	class:Packet
packet_handler	server/game/server/protocol/opcodes.cpp	/^	packet_handler(const char* name, session_status status, packet_processing processing) :$/;"	f	struct:packet_handler
packet_handler	server/game/server/protocol/opcodes.cpp	/^struct packet_handler : public client_opcode_handler$/;"	s	file:
packet_handler	server/game/server/protocol/opcodes.cpp	/^struct packet_handler<world_packet, handler_function> : public client_opcode_handler$/;"	s	file:
packet_header	server/game/server/protocol/packet_log.cpp	/^struct packet_header$/;"	s	file:
packet_header	server/game/server/world_tcp_socket.h	/^struct packet_header$/;"	s
packet_log	server/game/server/protocol/packet_log.cpp	/^packet_log::packet_log() : file_(NULL)$/;"	f	class:packet_log
packet_log	server/game/server/protocol/packet_log.h	/^class packet_log$/;"	c
packet_processing	server/game/server/protocol/opcodes.h	/^enum packet_processing$/;"	g
packet_seq	client/old/packet_protocol.h	/^	uint16_t packet_seq;	\/\/包序号$/;"	m	struct:Packet_head
param1	common/logging/log_message.h	/^	std::string param1;$/;"	m	struct:log_message
param_column_	client/cmdln.h	/^		int param_column_;$/;"	m	class:Commandline
param_count_	server/database/database/mysql_prepared_statement.h	/^	uint32_t param_count_;$/;"	m	class:mysql_prepared_statement
param_description	client/cmdln.h	/^	std::string param_description;$/;"	m	struct:Cmd_param
param_iter	client/cmdln.cpp	/^	std::vector<std::string>::iterator param_iter;$/;"	m	struct:Cmd_param_pos	file:
param_mode	client/cmdln.h	/^	Param_mode param_mode;$/;"	m	struct:Cmd_param
param_name	client/cmdln.h	/^	std::string param_name;$/;"	m	struct:Cmd_param
param_pos_iterator_	client/cmdln.h	/^		std::vector<Cmd_param_pos*>::iterator param_pos_iterator_;$/;"	m	class:Commandline
param_pos_list_	client/cmdln.h	/^		std::vector<Cmd_param_pos*> param_pos_list_;$/;"	m	class:Commandline
param_pos_number_	client/cmdln.h	/^		int param_pos_number_;$/;"	m	class:Commandline
paramenter_index_assert_fail	server/database/database/mysql_prepared_statement.cpp	/^bool paramenter_index_assert_fail(uint32_t stmt_index, uint8_t index, uint32_t param_count)$/;"	f	namespace:__anon5
params_set_	server/database/database/mysql_prepared_statement.h	/^	std::vector<bool> params_set_;$/;"	m	class:mysql_prepared_statement
parms	client/old/packet.h	/^		Params	parms ;$/;"	m	class:Packet
parse	client/config.cpp	/^Config::Node* Config::parse(const std::string& value)$/;"	f	class:Config
parse	client/json.h	/^inline Iter parse(Value &out, const Iter &first, const Iter &last, std::string *err) $/;"	f	class:Format
parse	client/json.h	/^inline std::string parse(Value& out, const std::string& s) $/;"	f	class:Format
parse	client/json.h	/^inline std::string parse(Value& out, std::istream& is) $/;"	f	class:Format
parse	client/utils/json.h	/^    static basic_json parse(IteratorType first, IteratorType last,$/;"	f	class:basic_json
parse	client/utils/json.h	/^    static basic_json parse(detail::input_adapter&& i,$/;"	f	class:basic_json
parse_argument	client/image.cpp	/^	void Locator::parse_argument()$/;"	f	class:image::Locator
parse_argument_list	client/cmdln.cpp	/^Commandline::Parse_status Commandline::parse_argument_list($/;"	f	class:Commandline
parse_array	client/config.cpp	/^std::string Config::parse_array(Config::Node* item, const std::string& value)$/;"	f	class:Config
parse_array_item	client/json.h	/^	bool parse_array_item(input<Iter> &in, size_t) $/;"	f	class:Format::Default_parse_context
parse_array_start	client/json.h	/^	bool parse_array_start() $/;"	f	class:Format::Default_parse_context
parse_array_stop	client/json.h	/^	bool parse_array_stop(size_t) $/;"	f	class:Format::Default_parse_context
parse_buffer	client/old/stream.cpp	/^bool Stream::parse_buffer(){$/;"	f	class:Stream
parse_commandline	client/commandline_options.cpp	/^bool Commandline_options::parse_commandline( $/;"	f	class:Commandline_options
parse_line	client/cmdln.cpp	/^Commandline::Parse_status Commandline::parse_line(const std::vector<std::string>& argv,$/;"	f	class:Commandline
parse_long_option	common/cmdline/cmdline.cpp	/^std::vector<option> cmdline::parse_long_option(std::vector<std::string>& args)$/;"	f	class:cmdline
parse_markup	client/font/marked-up_text.cpp	/^std::string::const_iterator parse_markup(std::string::const_iterator it1,$/;"	f
parse_number	client/config.cpp	/^std::string Config::parse_number(Config::Node* item, const std::string& num)$/;"	f	class:Config
parse_object	client/config.cpp	/^std::string Config::parse_object(Config::Node* item, const std::string& value)$/;"	f	class:Config
parse_object_item	client/json.h	/^	bool parse_object_item(input<Iter> &in, const std::string &key) $/;"	f	class:Format::Default_parse_context
parse_object_start	client/json.h	/^	bool parse_object_start() $/;"	f	class:Format::Default_parse_context
parse_short_option	common/cmdline/cmdline.cpp	/^std::vector<option> cmdline::parse_short_option(std::vector<std::string>& args)$/;"	f	class:cmdline
parse_string	client/config.cpp	/^std::string Config::parse_string(Config::Node* item, const std::string& str)$/;"	f	class:Config
parse_string	client/json.h	/^	bool parse_string(input<Iter> &in) $/;"	f	class:Format::Default_parse_context
parse_terminator	common/cmdline/cmdline.cpp	/^std::vector<option> cmdline::parse_terminator(std::vector<std::string>& args)$/;"	f	class:cmdline
parse_value	client/config.cpp	/^std::string Config::parse_value(Config::Node* item, const std::string& value)$/;"	f	class:Config
parse_version_op	client/version.cpp	/^VERSION_COMP_OP parse_version_op(const std::string& op_str)$/;"	f
password	server/database/database/mysql_connection.h	/^	std::string password;$/;"	m	struct:mysql_connection_info
password_	client/old/connection_pool.h	/^		std::string password_;$/;"	m	class:Mysql_connection_factory
password_	client/old/mysql_pool.h	/^			std::string password_;$/;"	m	class:db::Connection_factory
password_	client/old/mysql_pool.h	/^			std::string password_;$/;"	m	class:db::Database
patch	client/utils/json.h	/^    basic_json patch(const basic_json& json_patch) const$/;"	f	class:basic_json
path	client/game_config.cpp	/^	std::string path = "";$/;"	m	namespace:game_config	file:
path	client/game_config.cpp	/^	std::string path = MARTIAL_ARTS;$/;"	m	namespace:game_config	file:
path	common/utility/start_process.cpp	/^std::vector<fs::path> path()$/;"	f	namespace:__anon14
path	server/database/update/update_fetcher.cpp	/^	const path path;$/;"	m	struct:update_fetcher::directory_entry	file:
path_compare	server/database/update/update_fetcher.h	/^	struct path_compare$/;"	s	class:update_fetcher
path_map	client/filesystem.cpp	/^		typedef std::map<std::string, std::vector<std::string>> path_map;$/;"	t	namespace:filesystem::__anon17	file:
paths_	client/filesystem.h	/^			std::vector<std::string> paths_;$/;"	m	struct:filesystem::Binary_paths_manager
pdfdir	client/Makefile	/^pdfdir = ${docdir}$/;"	m
pdfdir	client/old/Makefile	/^pdfdir = ${docdir}$/;"	m
peek	client/net/buffer.h	/^	const char* peek() const { return begin() + reader_index_; }$/;"	f	class:net::Buffer
peek_for_resize	client/events.cpp	/^        void peek_for_resize()$/;"	f	namespace:events
peek_int16	client/net/buffer.h	/^	int16_t peek_int16() const$/;"	f	class:net::Buffer
peek_int32	client/net/buffer.h	/^	int32_t peek_int32() const$/;"	f	class:net::Buffer
peek_int64	client/net/buffer.h	/^	int64_t peek_int64() const$/;"	f	class:net::Buffer
peek_int8	client/net/buffer.h	/^	int8_t peek_int8() const$/;"	f	class:net::Buffer
peer_addr_	client/net/tcp_connection.h	/^  const Inet_address peer_addr_;$/;"	m	class:net::Tcp_connection
peer_address	client/net/tcp_connection.h	/^  const Inet_address& peer_address() const { return peer_addr_; }$/;"	f	class:net::Tcp_connection
pending_functors_	client/net/event_loop.h	/^	std::vector<Functor> pending_functors_; \/\/ @GuardedBy mutex_$/;"	m	class:net::Event_loop
pending_functors_	server/shared/networking/event_loop.h	/^	std::vector<functor> pending_functors_; \/\/ @GuardedBy mutex_$/;"	m	class:event_loop
pick_one	client/sound.cpp	/^static std::string pick_one(const std::string& files)$/;"	f	file:
pid	server/process/child.h	/^	pid_t pid;$/;"	m	struct:child
pid	server/process/test.cpp	/^	int pid;$/;"	m	struct:child	file:
ping	client/old/mysql_pool.h	/^			bool ping() { return !mysql_ping(mysql_); }$/;"	f	class:db::Database
ping	server/database/database/mysql_connection.cpp	/^void mysql_connection::ping()$/;"	f	class:mysql_connection
ping_operation	server/database/database/database_worker_pool.cpp	/^class ping_operation : public sql_operation$/;"	c	file:
pipe	server/process/pipe.h	/^	pipe(int source, int sink) : source(source), sink(sink) {}$/;"	f	struct:pipe
pipe	server/process/pipe.h	/^struct pipe$/;"	s
pkgdatadir	client/Makefile	/^pkgdatadir = $(datadir)\/full-package-name$/;"	m
pkgdatadir	client/old/Makefile	/^pkgdatadir = $(datadir)\/full-package-name$/;"	m
pkgincludedir	client/Makefile	/^pkgincludedir = $(includedir)\/full-package-name$/;"	m
pkgincludedir	client/old/Makefile	/^pkgincludedir = $(includedir)\/full-package-name$/;"	m
pkglibdir	client/Makefile	/^pkglibdir = $(libdir)\/full-package-name$/;"	m
pkglibdir	client/old/Makefile	/^pkglibdir = $(libdir)\/full-package-name$/;"	m
pkglibexecdir	client/Makefile	/^pkglibexecdir = $(libexecdir)\/full-package-name$/;"	m
pkglibexecdir	client/old/Makefile	/^pkglibexecdir = $(libexecdir)\/full-package-name$/;"	m
play_once	client/sound_music_track.h	/^			bool play_once() const { return once_; }$/;"	f	class:sound::Music_track
play_replay_	client/game_launcher.h	/^		bool play_replay_;$/;"	m	class:Game_launcher
played_before	client/sound.cpp	/^	std::vector<std::string> played_before;$/;"	m	namespace:__anon28	file:
players_	client/old/clients.h	/^		Map_player players_;$/;"	m	class:Clients
point_in_rect	client/sdl/rect.cpp	/^bool point_in_rect(int x, int y, const SDL_Rect& rect)$/;"	f
poll	client/net/poller.cpp	/^Timestamp Poller::poll(int timeoutMs, Channel_list* active_channels)$/;"	f	class:net::Poller
poll	server/shared/networking/epoll.cpp	/^void epoll::poll(int timeout_ms, channel_list* active_channels)$/;"	f	class:epoll
poll_return_time	client/net/event_loop.h	/^	Timestamp poll_return_time() const { return poll_return_time_; }$/;"	f	class:net::Event_loop
poll_return_time_	client/net/event_loop.h	/^  	Timestamp poll_return_time_;$/;"	m	class:net::Event_loop
poll_time_ms	client/net/event_loop.cpp	/^constexpr int poll_time_ms = 10000;$/;"	m	namespace:__anon20	file:
poll_time_ms	server/shared/networking/event_loop.cpp	/^constexpr int poll_time_ms = 10000;$/;"	m	namespace:__anon8	file:
poller_	client/net/event_loop.h	/^  	Scoped_ptr<Poller> poller_;$/;"	m	class:net::Event_loop
pool_	client/old/connection_pool.h	/^		std::deque<MYSQL*> pool_;$/;"	m	class:Connection_pool
pool_	client/old/mysql_pool.h	/^			std::deque<Database*> pool_;$/;"	m	class:db::Connection_pool
pool_	client/old/server.h	/^		Threadpool pool_;$/;"	m	class:Server
pool_size_	client/old/connection_pool.h	/^		size_t pool_size_;$/;"	m	class:Connection_pool
pool_size_	client/old/mysql_pool.h	/^			size_t pool_size_;$/;"	m	class:db::Connection_pool
pop	common/threading/producer_consumer_queue.h	/^	bool pop(T& v)$/;"	f	class:producer_consumer_queue
populate	server/database/update/db_update.cpp	/^bool db_updater<T>::populate(database_worker_pool<T>& pool)$/;"	f	class:db_updater
populate_	server/database/database/database_loader.h	/^	std::queue<predicate_func> populate_;$/;"	m	class:database_loader
populate_databases	server/database/database/database_loader.cpp	/^bool database_loader::populate_databases()$/;"	f	class:database_loader
port	server/shared/networking/ip/basic_endpoint.h	/^	uint16_t port() const { return impl_.port(); }$/;"	f	class:basic_endpoint
port	server/shared/networking/ip/basic_endpoint.h	/^	void port(uint16_t port_num) { impl_.port(port_num); }$/;"	f	class:basic_endpoint
port	server/shared/networking/ip/endpoint.cpp	/^uint16_t endpoint::port() const $/;"	f	class:endpoint
port	server/shared/networking/ip/endpoint.cpp	/^void endpoint::port(uint16_t port_num) $/;"	f	class:endpoint
port_	client/old/connection_pool.h	/^		int port_;$/;"	m	class:Mysql_connection_factory
port_	client/old/mysql_pool.h	/^			int port_;$/;"	m	class:db::Connection_factory
port_	client/old/mysql_pool.h	/^			int port_;$/;"	m	class:db::Database
port_or_socket	server/database/database/mysql_connection.h	/^	std::string port_or_socket;$/;"	m	struct:mysql_connection_info
position_key	common/cmdline/option.h	/^	int position_key;$/;"	m	struct:option
post	client/gui/core/event/dispatcher.h	/^					post = 4$/;"	e	enum:gui::event::Dispatcher::Event_queue_type
post_child	client/gui/core/event/dispatcher.h	/^					std::list<T> post_child;$/;"	m	struct:gui::event::Dispatcher::Signal_type
pre	client/gui/core/event/dispatcher.h	/^					pre = 1,$/;"	e	enum:gui::event::Dispatcher::Event_queue_type
pre_child	client/gui/core/event/dispatcher.h	/^					std::list<T> pre_child;$/;"	m	struct:gui::event::Dispatcher::Signal_type
precise_timestamp	client/log.cpp	/^static bool precise_timestamp = false;$/;"	v	file:
precise_timestamps	client/log.cpp	/^	void precise_timestamps(bool pt) { precise_timestamp = pt; }$/;"	f	namespace:lg
preferences	client/preferences/general.cpp	/^namespace preferences$/;"	n	file:
preferences	client/preferences/general.h	/^namespace preferences$/;"	n
prefix	client/Makefile	/^prefix = \/usr\/local$/;"	m
prefix	client/old/Makefile	/^prefix = \/usr\/local$/;"	m
prefix	common/logging/log_message.h	/^	std::string prefix;$/;"	m	struct:log_message
prepare_	server/database/database/database_loader.h	/^	std::queue<predicate_func> prepare_;$/;"	m	class:database_loader
prepare_error_	server/database/database/mysql_connection.h	/^	bool prepare_error_; \/\/ 在准备陈述时是否有任何错误？$/;"	m	class:mysql_connection
prepare_statements	server/database/database/database_loader.cpp	/^bool database_loader::prepare_statements()$/;"	f	class:database_loader
prepare_statements	server/database/database/database_worker_pool.cpp	/^bool database_worker_pool<T>::prepare_statements()$/;"	f	class:database_worker_pool
prepare_statements	server/database/database/mysql_connection.cpp	/^bool mysql_connection::prepare_statements()$/;"	f	class:mysql_connection
prepared	server/database/database/query_callback.cpp	/^		std::function<void(query_callback&, prepared_query_result)> prepared;$/;"	m	union:query_callback::query_callback_data::__anon3	file:
prepared	server/database/database/query_callback.h	/^		prepared_query_result_future prepared;$/;"	m	union:query_callback::__anon1
prepared_query_result	server/database/database/database_env_fwd.h	/^typedef std::shared_ptr<prepared_result_set> prepared_query_result;$/;"	t
prepared_query_result_future	server/database/database/database_env_fwd.h	/^typedef std::future<prepared_query_result> prepared_query_result_future;$/;"	t
prepared_query_result_promise	server/database/database/database_env_fwd.h	/^typedef std::promise<prepared_query_result> prepared_query_result_promise;$/;"	t
prepared_result_set	server/database/database/query_result.cpp	/^prepared_result_set::prepared_result_set(MYSQL_STMT* stmt, MYSQL_RES* result, uint64_t row_count, uint32_t field_count) : row_count_(row_count), row_position_(0), field_count_(field_count), bind_(NULL), stmt_(stmt), metadata_result_(result)$/;"	f	class:prepared_result_set
prepared_result_set	server/database/database/query_result.h	/^class prepared_result_set$/;"	c
prepared_statement	server/database/database/mysql_connection.cpp	/^void mysql_connection::prepared_statement(uint32_t index, const char* sql, connection_flags flags)$/;"	f	class:mysql_connection
prepared_statement	server/database/database/prepared_statement.h	/^	prepared_statement(uint32_t index, uint8_t capacity) : prepared_statement_base(index, capacity) {}$/;"	f	class:prepared_statement
prepared_statement	server/database/database/prepared_statement.h	/^class prepared_statement : public prepared_statement_base$/;"	c
prepared_statement_base	server/database/database/prepared_statement.cpp	/^prepared_statement_base::prepared_statement_base(uint32_t index, uint8_t capacity) : stmt_(0), index_(index), statement_data_(capacity) {}$/;"	f	class:prepared_statement_base
prepared_statement_base	server/database/database/prepared_statement.h	/^class prepared_statement_base$/;"	c
prepared_statement_data	server/database/database/prepared_statement.h	/^struct prepared_statement_data$/;"	s
prepared_statement_data_union	server/database/database/prepared_statement.h	/^union prepared_statement_data_union$/;"	u
prepared_statement_index	server/database/database/database_worker_pool.h	/^	typedef typename T::statements prepared_statement_index;$/;"	t	class:database_worker_pool
prepared_statement_map	server/database/database/mysql_connection.h	/^typedef std::map<uint32_t \/*index*\/, std::pair<std::string \/*query*\/, connection_flags \/*sync\/async*\/>> prepared_statement_map;$/;"	t
prepared_statement_size_	server/database/database/database_worker_pool.h	/^	std::vector<uint8_t> prepared_statement_size_;$/;"	m	class:database_worker_pool
prepared_statement_task	server/database/database/prepared_statement.cpp	/^prepared_statement_task::prepared_statement_task(prepared_statement_base* stmt, bool async) : stmt_(stmt), result_(nullptr)$/;"	f	class:prepared_statement_task
prepared_statement_task	server/database/database/prepared_statement.h	/^class prepared_statement_task : public sql_operation$/;"	c
prepared_statement_value_type	server/database/database/prepared_statement.h	/^enum prepared_statement_value_type$/;"	g
prepared_stmt_	server/database/database/mysql_prepared_statement.h	/^	prepared_statement_base* prepared_stmt_;$/;"	m	class:mysql_prepared_statement
prepend	client/net/buffer.h	/^	void prepend(const void* \/*restrict*\/ data, size_t len)$/;"	f	class:net::Buffer
prepend_int16	client/net/buffer.h	/^	void prepend_int16(int16_t x)$/;"	f	class:net::Buffer
prepend_int32	client/net/buffer.h	/^	void prepend_int32(int32_t x)$/;"	f	class:net::Buffer
prepend_int64	client/net/buffer.h	/^	void prepend_int64(int64_t x)$/;"	f	class:net::Buffer
prepend_int8	client/net/buffer.h	/^	void prepend_int8(int8_t x) { prepend(&x, sizeof x); }$/;"	f	class:net::Buffer
prependable_bytes	client/net/buffer.h	/^	size_t prependable_bytes() const { return reader_index_; }$/;"	f	class:net::Buffer
present_codepoints	client/font/font_description.h	/^	std::vector<range> present_codepoints;$/;"	m	struct:Subset_descriptor
present_codepoints	client/font/subset_descriptor.h	/^		std::vector<range> present_codepoints;$/;"	m	struct:font::Subset_descriptor
presult	server/database/database/sql_operation.h	/^	prepared_result_set* presult;$/;"	m	union:sql_result_set_union
prev	client/config.h	/^			Node* next, *prev, *child;$/;"	m	struct:Config::Node
prev_scope_active_	client/hotkey/hotkey_command.h	/^			Hk_scopes prev_scope_active_;$/;"	m	class:hotkey::Scope_change
previous_track	client/sound.cpp	/^	std::shared_ptr<sound::Music_track> previous_track;$/;"	m	namespace:__anon28	file:
print	common/cmdline/option_description.cpp	/^void options_description::print(std::ostream& os) const$/;"	f	class:options_description
print	common/configuration/config.h	/^	void print() { ini_.print(); }$/;"	f	class:config_mgr
print	common/configuration/ini_parser.cpp	/^void ini_parser::print()$/;"	f	class:ini_parser
print_active_channels	client/net/event_loop.cpp	/^void Event_loop::print_active_channels() const$/;"	f	class:net::Event_loop
print_active_channels	server/shared/networking/event_loop.cpp	/^void event_loop::print_active_channels() const$/;"	f	class:event_loop
print_array	client/config.cpp	/^std::string Config::print_array(Config::Node* item, int depth, int fmt)$/;"	f	class:Config
print_header	client/commandline_options.cpp	/^void Commandline_options::print_header()$/;"	f	class:Commandline_options
print_number	client/config.cpp	/^std::string Config::print_number(Config::Node* item)$/;"	f	class:Config
print_object	client/config.cpp	/^std::string Config::print_object(Config::Node* item, int depth, int fmt)$/;"	f	class:Config
print_precise_timestamp	client/log.cpp	/^	static void print_precise_timestamp(std::ostream& out)$/;"	f	namespace:lg
print_storage	server/shared/packets/byte_buffer.cpp	/^void byte_buffer::print_storage() const$/;"	f	class:byte_buffer
print_string	client/config.h	/^		std::string print_string(Node* item)$/;"	f	class:Config
print_string_value	client/config.cpp	/^std::string Config::print_string_value(const std::string& str)$/;"	f	class:Config
print_usage	client/commandline_options.cpp	/^void Commandline_options::print_usage()$/;"	f	class:Commandline_options
print_value	client/config.cpp	/^std::string Config::print_value(Config::Node* item, bool b, int depth, int fmt)$/;"	f	class:Config
process	server/database/database/database_loader.cpp	/^bool database_loader::process(std::queue<predicate_func>& queue)$/;"	f	class:database_loader
process_event	client/events.h	/^		        virtual void process_event() {}$/;"	f	class:events::Sdl_handler
process_event	client/old/event.h	/^			virtual void process_event() {}$/;"	f	class:event::Event_handler
process_help_string	client/events.h	/^		        virtual void process_help_string(int \/*mousex*\/, int \/*mousey*\/) {}$/;"	f	class:events::Sdl_handler
process_message	client/old/stream.cpp	/^void Stream::process_message( uint16_t packet_type , uint16_t packet_len  ){$/;"	f	class:Stream
process_ready_queries	server/database/database/query_callback_processor.cpp	/^void query_callback_processor::process_ready_queries()$/;"	f	class:query_callback_processor
process_tooltip_string	client/events.h	/^		        virtual void process_tooltip_string(int \/*mousex*\/, $/;"	f	class:events::Sdl_handler
processing_place	server/game/server/protocol/opcodes.h	/^	packet_processing processing_place;$/;"	m	struct:client_opcode_handler
producer_consumer_queue	common/threading/producer_consumer_queue.h	/^	producer_consumer_queue() : shutdown_(false) {}$/;"	f	class:producer_consumer_queue
producer_consumer_queue	common/threading/producer_consumer_queue.h	/^class producer_consumer_queue$/;"	c
program_name_	client/cmdln.h	/^		std::string program_name_;$/;"	m	class:Commandline
program_transform_name	client/Makefile	/^program_transform_name = s,x,x,$/;"	m
program_transform_name	client/old/Makefile	/^program_transform_name = s,x,x,$/;"	m
properties	common/configuration/ini_parser.h	/^		std::vector<section_property> properties;$/;"	m	struct:ini_parser::section
protocol	server/shared/networking/ip/basic_endpoint.h	/^	protocol_type protocol() const $/;"	f	class:basic_endpoint
protocol	server/shared/networking/ip/tcp.h	/^	int protocol() const { return IPPROTO_TCP; }$/;"	f	class:tcp
protocol	server/shared/networking/ip/udp.h	/^	int protocol() const { return IPPROTO_UDP; }$/;"	f	class:udp
protocol_type	client/old/packet_protocol.h	/^	uint16_t protocol_type	: 1;	\/\/0：tcp；1：udp$/;"	m	struct:Frame
protocol_type	server/shared/networking/ip/basic_endpoint.h	/^	typedef InternetProtocol protocol_type;$/;"	t	class:basic_endpoint
psdir	client/Makefile	/^psdir = ${docdir}$/;"	m
psdir	client/old/Makefile	/^psdir = ${docdir}$/;"	m
pton	client/old/utils.cpp	/^	int pton(const char* ip, struct sockaddr_in& sin, int domain)$/;"	f	namespace:net
pump_monitors	client/events.cpp	/^        std::vector<Pump_monitor*> pump_monitors;$/;"	m	namespace:events	file:
push	client/old/byte_buffer.cpp	/^void Byte_buffer::push(const char* src, size_t cnt)$/;"	f	class:Byte_buffer
push	client/serialization/unicode_cast.h	/^		void push(Value_type val)$/;"	f	struct:ucs4_convert_impl::Iterator_writer
push	common/threading/producer_consumer_queue.h	/^	void push(const T& v)$/;"	f	class:producer_consumer_queue
push_back	client/utils/json.h	/^    void push_back(basic_json&& val)$/;"	f	class:basic_json
push_back	client/utils/json.h	/^    void push_back(const basic_json& val)$/;"	f	class:basic_json
push_back	client/utils/json.h	/^    void push_back(const typename object_t::value_type& val)$/;"	f	class:basic_json
push_back	client/utils/json.h	/^    void push_back(initializer_list_t init)$/;"	f	class:basic_json
put	server/shared/packets/byte_buffer.cpp	/^void byte_buffer::put(size_t pos, const uint8_t* src, size_t dnt)$/;"	f	class:byte_buffer
put	server/shared/packets/byte_buffer.h	/^	void put(size_t pos, T value)$/;"	f	class:byte_buffer
put_bits	server/shared/packets/byte_buffer.cpp	/^void byte_buffer::put_bits(size_t pos, size_t value, uint32_t bit_count)$/;"	f	class:byte_buffer
qresult	server/database/database/sql_operation.h	/^	result_set* qresult;$/;"	m	union:sql_result_set_union
queries_	server/database/database/mysql_connection.h	/^	prepared_statement_map queries_; \/\/ 查询存储$/;"	m	class:mysql_connection
queries_	server/database/database/query_holder.h	/^	std::vector<std::pair<prepared_statement_base*, prepared_query_result>> queries_;$/;"	m	class:sql_query_holder_base
queries_	server/database/database/transaction.h	/^	std::vector<sql_element_data> queries_;$/;"	m	class:transaction_base
query	server/database/database/database_worker_pool.cpp	/^prepared_query_result database_worker_pool<T>::query(prepared_statement<T>* stmt)$/;"	f	class:database_worker_pool
query	server/database/database/database_worker_pool.cpp	/^query_result database_worker_pool<T>::query(const char* sql, T* connection)$/;"	f	class:database_worker_pool
query	server/database/database/mysql_connection.cpp	/^bool mysql_connection::query(const char* sql, MYSQL_RES** result, MYSQL_FIELD** fields, uint64_t* row_count, uint32_t* field_count)$/;"	f	class:mysql_connection
query	server/database/database/mysql_connection.cpp	/^bool mysql_connection::query(prepared_statement_base* stmt, MYSQL_RES** result, uint64_t* row_count, uint32_t* field_count)$/;"	f	class:mysql_connection
query	server/database/database/mysql_connection.cpp	/^prepared_result_set* mysql_connection::query(prepared_statement_base* stmt)$/;"	f	class:mysql_connection
query	server/database/database/mysql_connection.cpp	/^result_set* mysql_connection::query(const char* sql)$/;"	f	class:mysql_connection
query	server/database/database/sql_operation.h	/^	const char* query;$/;"	m	union:sql_element_union
query_callback	server/database/database/query_callback.cpp	/^query_callback::query_callback(query_callback&& r) : is_prepared_(r.is_prepared_), callbacks_(std::move(r.callbacks_))$/;"	f	class:query_callback
query_callback	server/database/database/query_callback.cpp	/^query_callback::query_callback(std::future<prepared_query_result>&& result) : is_prepared_(true)$/;"	f	class:query_callback
query_callback	server/database/database/query_callback.cpp	/^query_callback::query_callback(std::future<query_result>&& result) : is_prepared_(false)$/;"	f	class:query_callback
query_callback	server/database/database/query_callback.h	/^class query_callback$/;"	c
query_callback_data	server/database/database/query_callback.cpp	/^	query_callback_data(query_callback_data&& r) : is_prepared_(r.is_prepared_)$/;"	f	struct:query_callback::query_callback_data
query_callback_data	server/database/database/query_callback.cpp	/^	query_callback_data(std::function<void(query_callback&, prepared_query_result)>&& callback) : prepared(std::move(callback)), is_prepared_(true) {}$/;"	f	struct:query_callback::query_callback_data
query_callback_data	server/database/database/query_callback.cpp	/^	query_callback_data(std::function<void(query_callback&, query_result)>&& callback) : string(std::move(callback)), is_prepared_(false) {}$/;"	f	struct:query_callback::query_callback_data
query_callback_data	server/database/database/query_callback.cpp	/^struct query_callback::query_callback_data$/;"	s	class:query_callback	file:
query_callback_processor	server/database/database/query_callback_processor.h	/^class query_callback_processor$/;"	c
query_data	client/old/database.cpp	/^	std::vector<std::vector<std::string>> query_data(MYSQL* mysql, $/;"	f	namespace:db
query_processor_	server/game/server/world_tcp_socket.h	/^	query_callback_processor query_processor_;$/;"	m	class:world_tcp_socket::read_data_handler_result
query_result	server/database/database/database_env_fwd.h	/^typedef std::shared_ptr<result_set> query_result;$/;"	t
query_result_future	server/database/database/database_env_fwd.h	/^typedef std::future<query_result> query_result_future;$/;"	t
query_result_holder_future	server/database/database/database_env_fwd.h	/^typedef std::future<sql_query_holder_base*> query_result_holder_future;$/;"	t
query_result_holder_promise	server/database/database/database_env_fwd.h	/^typedef std::promise<sql_query_holder_base*> query_result_holder_promise;$/;"	t
query_result_promise	server/database/database/database_env_fwd.h	/^typedef std::promise<query_result> query_result_promise;$/;"	t
queue	client/gui/core/event/dispatcher.h	/^					std::map<Ui_event, Signal_type<T>> queue;$/;"	m	struct:gui::event::Dispatcher::Signal_queue
queue_	common/threading/producer_consumer_queue.h	/^	std::queue<T> queue_;$/;"	m	class:producer_consumer_queue
queue_	server/database/database/database_worker.h	/^	producer_consumer_queue<sql_operation*>* queue_;$/;"	m	class:database_worker
queue_	server/database/database/database_worker_pool.h	/^	std::unique_ptr<producer_consumer_queue<sql_operation*>> queue_;$/;"	m	class:database_worker_pool
queue_	server/database/database/mysql_connection.h	/^	producer_consumer_queue<sql_operation*>* queue_; \/\/ 队列与其他异步连接共享。$/;"	m	class:mysql_connection
queue_in_loop	client/net/event_loop.cpp	/^void Event_loop::queue_in_loop(Functor&& cb)$/;"	f	class:net::Event_loop
queue_in_loop	server/shared/networking/event_loop.cpp	/^void event_loop::queue_in_loop(functor&& cb)$/;"	f	class:event_loop
queue_packet	server/shared/networking/tcp_socket.cpp	/^void tcp_socket::queue_packet(message_buffer&& buffer)$/;"	f	class:tcp_socket
queue_packet_len	client/old/packet.h	/^constexpr int queue_packet_len = 512;$/;"	v
queue_size	client/net/event_loop.cpp	/^size_t Event_loop::queue_size()$/;"	f	class:net::Event_loop
queue_size	server/shared/networking/event_loop.cpp	/^size_t event_loop::queue_size()$/;"	f	class:event_loop
quit	client/net/event_loop.cpp	/^void Event_loop::quit()$/;"	f	class:net::Event_loop
quit	server/shared/networking/event_loop.cpp	/^void event_loop::quit()$/;"	f	class:event_loop
quit_	client/net/event_loop.h	/^  	bool quit_; \/* atomic and shared between threads, okay on x86, I guess. *\/$/;"	m	class:net::Event_loop
quit_	server/shared/networking/event_loop.h	/^  	bool quit_; \/* atomic and shared between threads, okay on x86, I guess. *\/$/;"	m	class:event_loop
r	client/color.h	/^	uint8_t r, g, b, a; \/\/ red value, green value, blue value, alpha value$/;"	m	struct:Color
raise_draw_all_event	client/events.cpp	/^        void raise_draw_all_event()$/;"	f	namespace:events
raise_draw_event	client/events.cpp	/^        void raise_draw_event()$/;"	f	namespace:events
raise_help_string_event	client/events.cpp	/^        void raise_help_string_event(int mousex, int mousey)$/;"	f	namespace:events
raise_process_event	client/events.cpp	/^        void raise_process_event()$/;"	f	namespace:events
raise_resize_event	client/events.cpp	/^        void raise_resize_event()$/;"	f	namespace:events
raise_volatile_draw_all_event	client/events.cpp	/^        void raise_volatile_draw_all_event()$/;"	f	namespace:events
raise_volatile_draw_event	client/events.cpp	/^        void raise_volatile_draw_event()$/;"	f	namespace:events
raise_volatile_undraw_event	client/events.cpp	/^        void raise_volatile_undraw_event()$/;"	f	namespace:events
random_calls_	client/random.h	/^			unsigned int random_calls_;$/;"	m	class:randomness::Rng
randomness	client/random.cpp	/^namespace randomness$/;"	n	file:
randomness	client/random.h	/^namespace randomness$/;"	n
range	client/font/font_description.h	/^	typedef std::pair<int, int> range;$/;"	t	struct:Subset_descriptor
range	client/font/subset_descriptor.h	/^		typedef std::pair<int, int> range;$/;"	t	struct:font::Subset_descriptor
raw	server/database/database/field.h	/^		bool raw;$/;"	m	struct:field::__anon2
raw_event	client/gui/core/event/handler.cpp	/^		void Sdl_event_handler::raw_event(const SDL_Event& event)$/;"	f	class:gui::event::Sdl_event_handler
rbegin	client/utils/json.h	/^    const_reverse_iterator rbegin() const { return crbegin(); }$/;"	f	class:basic_json
rbegin	client/utils/json.h	/^    reverse_iterator rbegin() { return reverse_iterator(end()); }$/;"	f	class:basic_json
read	client/net/net_utils.cpp	/^ssize_t read(int fd, void *buf, size_t count) {}$/;"	f	namespace:net
read	client/old/stream.cpp	/^		void Stream::read(int fd)$/;"	f	class:Stream
read	client/serialization/ucs4_convert_impl.h	/^			static inline ucs4::Char read(Iter& beg, const Iter& end)$/;"	f	struct:ucs4_convert_impl::Utf16_impl
read	client/serialization/ucs4_convert_impl.h	/^			static inline ucs4::Char read(Iter& beg, const Iter& end)$/;"	f	struct:ucs4_convert_impl::Utf32_impl
read	client/serialization/ucs4_convert_impl.h	/^	        static inline ucs4::Char read(Iter& beg, const Iter& end)$/;"	f	struct:ucs4_convert_impl::Utf8_impl
read	server/game/server/packet.cpp	/^void server_packet::read()$/;"	f	class:world_packet::server_packet
read	server/shared/packets/byte_buffer.h	/^	T read()$/;"	f	class:byte_buffer
read	server/shared/packets/byte_buffer.h	/^	T read(size_t pos) const$/;"	f	class:byte_buffer
read	server/shared/packets/byte_buffer.h	/^	void read(T* dest, size_t count)$/;"	f	class:byte_buffer
read	server/shared/packets/byte_buffer.h	/^	void read(uint8_t* dest, size_t len)$/;"	f	class:byte_buffer
read	server/shared/packets/byte_buffer.h	/^inline std::string byte_buffer::read<std::string>()$/;"	f	class:byte_buffer
read_appenders_from_config	common/logging/log.cpp	/^void log::read_appenders_from_config()$/;"	f	class:log
read_bit	server/shared/packets/byte_buffer.h	/^	bool read_bit()$/;"	f	class:byte_buffer
read_bits	server/shared/packets/byte_buffer.h	/^	uint32_t read_bits(int32_t bits)$/;"	f	class:byte_buffer
read_buffer_	server/shared/networking/tcp_socket.h	/^	message_buffer read_buffer_;$/;"	m	class:tcp_socket
read_callback_	client/net/channel.h	/^	Read_event_callback read_callback_;$/;"	m	class:net::Channel
read_callback_	server/shared/networking/channel.h	/^	read_event_callback read_callback_;$/;"	m	class:channel
read_completed	common/utility/message_buffer.h	/^	void read_completed(size_type bytes) { rpos_ += bytes; }$/;"	f	class:message_buffer
read_data_handler	server/game/server/world_tcp_socket.cpp	/^world_tcp_socket::read_data_handler_result world_tcp_socket::read_data_handler()$/;"	f	class:world_tcp_socket
read_data_handler_result	server/game/server/world_tcp_socket.h	/^	enum class read_data_handler_result$/;"	c	class:world_tcp_socket
read_event_	client/net/channel.cpp	/^const int Channel::read_event_ = POLLIN | POLLPRI; \/\/ ???EPOLLIN...$/;"	m	class:net::Channel	file:
read_event_	client/net/channel.h	/^	static const int read_event_;$/;"	m	class:net::Channel
read_event_	server/shared/networking/channel.cpp	/^const int channel::read_event_ = POLLIN | POLLPRI; \/\/ ???EPOLLIN...$/;"	m	class:channel	file:
read_event_	server/shared/networking/channel.h	/^	static const int read_event_;$/;"	m	class:channel
read_event_callback	server/shared/networking/channel.h	/^	typedef std::function<void(Timestamp)> read_event_callback;$/;"	t	class:channel
read_fd	client/net/buffer.cpp	/^ssize_t Buffer::read_fd(int fd, int* saved_errno)$/;"	f	class:net::Buffer
read_file	client/filesystem.cpp	/^	std::string read_file(const std::string& name)$/;"	f	namespace:filesystem
read_file	client/filesystem.cpp	/^const char* read_file(const char* file)$/;"	f
read_file	client/filesystem.cpp	/^std::string read_file(const std::string& file)$/;"	f
read_handler	client/net/buffer.cpp	/^void read_handler(int fd, int* errno)$/;"	f
read_handler	client/old/listen_handler.cpp	/^	bool Listen_handler::read_handler(Event_hander* handler)$/;"	f	class:event::Listen_handler
read_handler	server/game/server/world_tcp_socket.cpp	/^void world_tcp_socket::read_handler()$/;"	f	class:world_tcp_socket
read_handler_callback_	server/shared/networking/tcp_socket.h	/^	std::function<void(std::error_code&, size_t)> read_handler_callback_;$/;"	m	class:tcp_socket
read_handler_internal	server/shared/networking/tcp_socket.h	/^	void read_handler_internal(std::error_code& ec, size_t transferred_bytes)$/;"	f	class:tcp_socket
read_header_handler	server/game/server/world_tcp_socket.cpp	/^bool world_tcp_socket::read_header_handler()$/;"	f	class:world_tcp_socket
read_ini	common/configuration/ini_parser.cpp	/^bool ini_parser::read_ini(const std::string& file, std::string& error)$/;"	f	class:ini_parser
read_int16	client/net/buffer.h	/^	int16_t read_int16()$/;"	f	class:net::Buffer
read_int32	client/net/buffer.h	/^	int32_t read_int32()$/;"	f	class:net::Buffer
read_int64	client/net/buffer.h	/^	int64_t read_int64()$/;"	f	class:net::Buffer
read_int8	client/net/buffer.h	/^	int8_t read_int8()$/;"	f	class:net::Buffer
read_loggers_from_config	common/logging/log.cpp	/^void log::read_loggers_from_config()$/;"	f	class:log
read_packed_time	server/shared/packets/byte_buffer.cpp	/^uint32_t byte_buffer::read_packed_time()$/;"	f	class:byte_buffer
read_packed_uint64	server/shared/packets/byte_buffer.h	/^	void read_packed_uint64(uint64_t& guid)$/;"	f	class:byte_buffer
read_packed_uint64	server/shared/packets/byte_buffer.h	/^	void read_packed_uint64(uint8 mask, uint64& value)$/;"	f	class:byte_buffer
read_pos_	client/old/byte_buffer.h	/^		size_t read_pos_;$/;"	m	class:Byte_buffer
read_skip	server/shared/packets/byte_buffer.h	/^	void read_skip() { read_skip(sizeof(T)); }$/;"	f	class:byte_buffer
read_skip	server/shared/packets/byte_buffer.h	/^	void read_skip(size_t skip)$/;"	f	class:byte_buffer
read_skip	server/shared/packets/byte_buffer.h	/^inline void byte_buffer::read_skip<char*>()$/;"	f	class:byte_buffer
read_skip	server/shared/packets/byte_buffer.h	/^inline void byte_buffer::read_skip<const char*>()$/;"	f	class:byte_buffer
read_skip	server/shared/packets/byte_buffer.h	/^inline void byte_buffer::read_skip<std::string>()$/;"	f	class:byte_buffer
read_sql_update	server/database/update/update_fetcher.cpp	/^std::string update_fetcher::read_sql_update(const path& file) const$/;"	f	class:update_fetcher
read_string	server/shared/packets/byte_buffer.h	/^	std::string read_string(uint32_t length)$/;"	f	class:byte_buffer
read_timerfd	client/net/timer_queue.cpp	/^void read_timerfd(int timerfd, Timestamp now)$/;"	f	namespace:detail
read_timerfd	server/shared/networking/timer_queue.cpp	/^void read_timerfd(int timerfd, Timestamp now)$/;"	f	namespace:detail
read_type	client/filesystem.cpp	/^	static constexpr uint32_t read_type = 7;$/;"	m	namespace:filesystem	file:
readable_bytes	client/net/buffer.h	/^	size_t readable_bytes() const { return writer_index_ - reader_index_; }$/;"	f	class:net::Buffer
reader_index_	client/net/buffer.h	/^	size_t reader_index_;$/;"	m	class:net::Buffer
reading_	client/net/tcp_connection.h	/^  bool reading_;$/;"	m	class:net::Tcp_connection
readv	client/net/net_utils.cpp	/^ssize_t readv(int fd, const struct iovec *iov, int iovcnt) {}$/;"	f	namespace:net
realm_id_	server/database/logging/appender_DB.h	/^        uint32_t realm_id_;$/;"	m	class:appender_DB
receive_applied_files	server/database/update/update_fetcher.cpp	/^update_fetcher::applied_file_storage update_fetcher::receive_applied_files() const$/;"	f	class:update_fetcher
receive_include_directories	server/database/update/update_fetcher.cpp	/^update_fetcher::directory_storage update_fetcher::receive_include_directories() const$/;"	f	class:update_fetcher
recent	server/database/update/update_fetcher.h	/^	size_t recent; \/\/ 最近$/;"	m	struct:update_result
reconnect	client/old/mysql_pool.cpp	/^	bool Database::reconnect()$/;"	f	class:db::Database
reconnection_	server/database/database/mysql_connection.h	/^	bool reconnection_; \/\/ 我们重新连接了吗？$/;"	m	class:mysql_connection
rect	client/sdl/rect.cpp	/^bool point_in rect(const Point& point, const SDL_Rect& rect)$/;"	f
rect	client/tooltips.cpp	/^	SDL_Rect rect;$/;"	m	struct:Tooltip	file:
rect_	client/font/text.h	/^			mutable PangoRectangle rect_;$/;"	m	class:font::Pango_text
rects_overlap	client/sdl/rect.cpp	/^bool rects_overlap(const SDL_Rect& rect1, const SDL_Rect& rect2)$/;"	f
recursive_order_operation	client/version.cpp	/^bool recursive_order_operation(const std::vector<unsigned int>& l,$/;"	f
recv	server/shared/networking/socket_operations.cpp	/^int recv(int sockfd, iovec* buf, size_t count, int flags, std::error_code& ec)$/;"	f
recvfrom	server/shared/networking/socket_operations.cpp	/^int recvfrom(int sockfd, iovec* buf, size_t count, int flags, socket_addr_type* addr, socklen_t* addrlen, std::error_code& ec)$/;"	f
recvmsg	server/shared/networking/socket_operations.cpp	/^int recvmsg(int sockfd, iovec* buf, size_t count, int in_flags, int& cout_flags, std::error_code& ec)$/;"	f
reference	common/utility/util.h	/^    typedef storage_type::reference reference;$/;"	t	class:tokenizer
refresh	client/old/mysql_pool.h	/^			bool refresh() $/;"	f	class:db::Database
register_appender	common/logging/log.cpp	/^void log::register_appender(uint8_t index, appender_creator_fn appender_create_fn)$/;"	f	class:log
register_appender	common/logging/log.h	/^	void register_appender()$/;"	f	class:log
register_event	client/old/event.cpp	/^	bool register_event(void* obj, int event_mask)$/;"	f	namespace:event
register_handler	client/old/dispatcher.cpp	/^	bool Dispatcher::register_handler(Event_handler* handler, int events)$/;"	f	class:event::Dispatcher
register_hotkey	client/gui/core/event/dispatcher.cpp	/^		void Dispatcher::register_hotkey(const hotkey::Hotkey_command id,$/;"	f	class:gui::event::Dispatcher
relative_size	client/font/constants.h	/^inline int relative_size(int size)$/;"	f
release	client/thread/mutex.h	/^		mutex_type* release() $/;"	f	class:Unique_lock
release_mouse	client/gui/core/event/dispatcher.h	/^				void release_mouse()$/;"	f	class:gui::event::Dispatcher
release_mouse	client/gui/core/event/handler.cpp	/^		void release_mouse(Dispatcher* dispatcher)$/;"	f	namespace:gui::event
reload	common/configuration/config.cpp	/^bool config_mgr::reload(std::string& error)$/;"	f	class:config_mgr
remote_address_	server/shared/networking/tcp_socket.h	/^	address remote_address_;$/;"	m	class:tcp_socket
remote_endpoint	server/shared/networking/socket.cpp	/^endpoint socket::remote_endpoint(std::error_code& ec)$/;"	f	class:socket
remote_port_	server/shared/networking/tcp_socket.h	/^	uint16_t remote_port_;$/;"	m	class:tcp_socket
remove	client/net/channel.cpp	/^void Channel::remove()$/;"	f	class:net::Channel
remove	server/shared/networking/channel.cpp	/^void channel::remove()$/;"	f	class:channel
remove_channel	client/net/event_loop.cpp	/^void Event_loop::remove_channel(Channel* channel)$/;"	f	class:net::Event_loop
remove_channel	client/net/poller.cpp	/^void Poller::remove_channel(Channel* channel)$/;"	f	class:net::Poller
remove_channel	server/shared/networking/epoll.cpp	/^void epoll::remove_channel(channel* channel)$/;"	f	class:epoll
remove_channel	server/shared/networking/event_loop.cpp	/^void event_loop::remove_channel(channel* channel)$/;"	f	class:event_loop
remove_client	client/old/server.cpp	/^void Server::remove_client(Descriptor& fd)$/;"	f	class:Server
remove_connection	client/net/tcp_server.cpp	/^void Tcp_server::remove_connection(const Tcp_connection_ptr& conn)$/;"	f	class:net::Tcp_server
remove_connection	server/shared/networking/tcp_server.cpp	/^void Tcp_server::remove_connection(const Tcp_connection_ptr& conn)$/;"	f	class:net::Tcp_server
remove_connection_in_loop	client/net/tcp_server.cpp	/^void Tcp_server::remove_connection_in_loop(const Tcp_connection_ptr& conn)$/;"	f	class:net::Tcp_server
remove_connection_in_loop	server/shared/networking/tcp_server.cpp	/^void Tcp_server::remove_connection_in_loop(const Tcp_connection_ptr& conn)$/;"	f	class:net::Tcp_server
remove_from_window_stack	client/gui/core/event/handler.cpp	/^	void remove_from_window_stack(Window* window)$/;"	f	namespace:gui
remove_handler	client/events.cpp	/^        bool Context::remove_handler(Sdl_handler* ptr)$/;"	f	class:events::Context
remove_handler	client/old/event.cpp	/^	bool Context::remove_handler(Event_handler* ptr)$/;"	f	class:event::Context
remove_on_resize	client/events.cpp	/^        static bool remove_on_resize(const SDL_Event& a)$/;"	f	namespace:events
remove_track	client/sound.cpp	/^	void remove_track(unsigned int i)$/;"	f	namespace:sound
remove_wml_hotkey	client/hotkey/hotkey_command.cpp	/^	bool remove_wml_hotkey(const std::string& id)$/;"	f	namespace:hotkey
rename_entry	server/database/update/update_fetcher.cpp	/^void update_fetcher::rename_entry(const std::string& from, const std::string& to) const$/;"	f	class:update_fetcher
rend	client/utils/json.h	/^    const_reverse_iterator rend() const { return crend(); }$/;"	f	class:basic_json
rend	client/utils/json.h	/^    reverse_iterator rend() { return reverse_iterator(begin()); }$/;"	f	class:basic_json
render	client/font/text.cpp	/^	Surface& Pango_text::render()$/;"	f	class:font::Pango_text
render	client/sdl/window.cpp	/^void Window::render()$/;"	f	class:Window
render_text	client/font/sdl_ttf.cpp	/^static Surface render_text(SDL_Renderer* r,const std::string& text, $/;"	f	file:
renderer_	client/sdl/render_utils.h	/^		SDL_Renderer* renderer_;$/;"	m	class:Render_raii_rect_setter_base
renderer_	client/sdl/render_utils.h	/^		SDL_Renderer* renderer_;$/;"	m	class:Render_target_setter
repeat	client/net/timer.h	/^	bool repeat() const { return repeat_; }$/;"	f	class:net::Timer
repeat	server/shared/networking/timer.h	/^	bool repeat() const { return repeat_; }$/;"	f	class:timer
repeat_	client/net/timer.h	/^	const bool repeat_;$/;"	m	class:net::Timer
repeat_	server/shared/networking/timer.h	/^	const bool repeat_;$/;"	m	class:timer
replace_item_in_array	client/config.cpp	/^void Config::replace_item_in_array(Config::Node* array, int which,$/;"	f	class:Config
replace_item_in_object	client/config.cpp	/^void Config::replace_item_in_object(Config::Node* object, $/;"	f	class:Config
request_type	client/old/packet_protocol.h	/^	uint16_t request_type : 2;		\/\/0：正常请求，1：转发,2:转发再转发$/;"	m	struct:Frame
requires_event_focus	client/events.h	/^		        virtual bool requires_event_focus(const SDL_Event* e = nullptr) $/;"	f	class:events::Sdl_handler
reserve	server/shared/packets/byte_buffer.h	/^	void reserve(size_t ressize)$/;"	f	class:byte_buffer
reset	client/net/timer_queue.cpp	/^void Timer_queue::reset(const std::vector<Entry>& expired, Timestamp now)$/;"	f	class:net::Timer_queue
reset	client/old/packet.h	/^		void reset()$/;"	f	class:Packet
reset	client/sdl/texture.cpp	/^void Texture::reset()$/;"	f	class:Texture
reset	client/sdl/texture.cpp	/^void Texture::reset(int w, int h, SDL_TextureAccess access)$/;"	f	class:Texture
reset	common/logging/old_logging/log_buffer.h	/^	void reset() { current_ = data_; }$/;"	f	class:lg::Log_buffer
reset	common/utility/message_buffer.h	/^	void reset()$/;"	f	class:message_buffer
reset	server/shared/networking/timer_queue.cpp	/^void timer_queue::reset(const std::vector<Entry>& expired, Timestamp now)$/;"	f	class:timer_queue
reset_bit_pos	server/shared/packets/byte_buffer.h	/^	void reset_bit_pos()$/;"	f	class:byte_buffer
reset_color	common/logging/appender_console.cpp	/^void appender_console::reset_color(bool stdout_stream)$/;"	f	class:appender_console
reset_connect_info	client/old/mysql_pool.cpp	/^	void reset_connect_info()$/;"	f	namespace:db
reset_default_hotkeys	client/hotkey/hotkey_item.cpp	/^	void reset_default_hotkeys()$/;"	f	namespace:hotkey
reset_timerfd	client/net/timer_queue.cpp	/^void reset_timerfd(int timerfd, Timestamp expiration)$/;"	f	namespace:detail
reset_timerfd	server/shared/networking/timer_queue.cpp	/^void reset_timerfd(int timerfd, Timestamp expiration)$/;"	f	namespace:detail
resize	client/font/text_cache.cpp	/^void Text_cache::resize(unsigned int size)$/;"	f	class:Text_cache
resize	common/utility/message_buffer.h	/^	void resize(size_type bytes) { storage_.resize(bytes); }$/;"	f	class:message_buffer
resize	server/shared/networking/ip/basic_endpoint.h	/^	void resize(std::size_t new_size) { impl_.resize(new_size); }$/;"	f	class:basic_endpoint
resize	server/shared/networking/ip/endpoint.cpp	/^void endpoint::resize(std::size_t new_size)$/;"	f	class:endpoint
resize	server/shared/packets/byte_buffer.h	/^	void resize(size_t newsize)$/;"	f	class:byte_buffer
resize_dimensions	client/events.h	/^		        std::pair<int, int> resize_dimensions; \/\/ 调整尺寸$/;"	m	struct:events::Pump_info
resize_timeout	client/events.cpp	/^        constexpr uint32_t resize_timeout = 100;$/;"	m	namespace:events	file:
resolve	client/sound_music_track.cpp	/^	void Music_track::resolve()$/;"	f	class:sound::Music_track
restart	client/net/timer.cpp	/^void Timer::restart(Timestamp now)$/;"	f	class:net::Timer
restart	server/shared/networking/timer.cpp	/^void timer::restart(Timestamp now)$/;"	f	class:timer
restore	client/sdl/window.cpp	/^void Window::restore()$/;"	f	class:Window
result_	server/database/database/adhoc_statement.h	/^	query_result_promise* result_;$/;"	m	class:basic_statement_task
result_	server/database/database/prepared_statement.h	/^	prepared_query_result_promise* result_;$/;"	m	class:prepared_statement_task
result_	server/database/database/query_holder.h	/^	query_result_holder_promise result_;$/;"	m	class:sql_query_holder_task
result_	server/database/database/query_result.h	/^	MYSQL_RES* result_;$/;"	m	class:result_set
result_set	server/database/database/query_result.cpp	/^result_set::result_set(MYSQL_RES* result, MYSQL_FIELD* fields, uint64_t row_count, uint32_t field_count) : row_count_(row_count), field_count_(field_count), result_(result), fields_(fields)$/;"	f	class:result_set
result_set	server/database/database/query_result.h	/^class result_set$/;"	c
retrieve	client/net/buffer.h	/^	void retrieve(size_t len)$/;"	f	class:net::Buffer
retrieve	server/database/update/db_update.cpp	/^query_result db_updater<T>::retrieve(database_worker_pool<T>& pool, const std::string& query)$/;"	f	class:db_updater
retrieve_	server/database/update/update_fetcher.h	/^	const std::function<query_result(const std::string&)> retrieve_;$/;"	m	class:update_fetcher
retrieve_all	client/net/buffer.h	/^	void retrieve_all()$/;"	f	class:net::Buffer
retrieve_all_as_string	client/net/buffer.h	/^	std::string retrieve_all_as_string()$/;"	f	class:net::Buffer
retrieve_as_string	client/net/buffer.h	/^	std::string retrieve_as_string(size_t len)$/;"	f	class:net::Buffer
retrieve_int16	client/net/buffer.h	/^	void retrieve_int16()$/;"	f	class:net::Buffer
retrieve_int32	client/net/buffer.h	/^	void retrieve_int32()$/;"	f	class:net::Buffer
retrieve_int64	client/net/buffer.h	/^	void retrieve_int64()$/;"	f	class:net::Buffer
retrieve_int8	client/net/buffer.h	/^	void retrieve_int8()$/;"	f	class:net::Buffer
retrieve_until	client/net/buffer.h	/^	void retrieve_until(const char* end)$/;"	f	class:net::Buffer
reuse_address	server/shared/networking/socket.cpp	/^socket_option option::reuse_address() $/;"	f	class:option
reuse_port	server/shared/networking/socket.cpp	/^socket_option option::reuse_port() $/;"	f	class:option
revents_	client/net/channel.h	/^	int revents_; \/\/ it's the received event types of epoll or poll$/;"	m	class:net::Channel
revents_	server/shared/networking/channel.h	/^	int revents_; \/\/ it's the received event types of epoll or poll$/;"	m	class:channel
revents_to_string	client/net/channel.cpp	/^std::string Channel::revents_to_string() const$/;"	f	class:net::Channel
revents_to_string	server/shared/networking/channel.cpp	/^std::string channel::revents_to_string() const$/;"	f	class:channel
reverse	client/events.h	/^Reversion<T> reverse(T&& iterable)$/;"	f
revision	client/game_config.cpp	/^        const std::string revision = VERSION " (" REVISION ")";$/;"	m	namespace:game_config	file:
revision	client/game_config.cpp	/^        const std::string revision = VERSION;$/;"	m	namespace:game_config	file:
revision	client/game_config.cpp	/^        const std::string revision = std::string(VERSION) + " (" + VCS_SHORT_HASH +     (VCS_WC_MODIFIED ? "-Modified" : "-Clean") + ")";$/;"	m	namespace:game_config	file:
revision	common/configuration/revision.cpp	/^namespace revision$/;"	n	file:
revision	common/configuration/revision.h	/^namespace revision$/;"	n
revision_level	client/version.cpp	/^unsigned int Version_info::revision_level() const$/;"	f	class:Version_info
rfinish	server/shared/packets/byte_buffer.h	/^	void rfinish() { rpos_ = wpos(); }$/;"	f	class:byte_buffer
right	server/game/server/packet.h	/^	packet& operator=(const packet& right) = delete;$/;"	m	class:world_packets::packet
right	server/game/server/packet.h	/^	packet(const packet& right) = delete;$/;"	m	class:world_packets::packet
rio_buf	client/old/rio.h	/^	char rio_buf[RIO_BUFSIZE];$/;"	m	struct:__anon16
rio_bufptr	client/old/rio.h	/^	char* rio_bufptr;$/;"	m	struct:__anon16
rio_cnt	client/old/rio.h	/^	int rio_cnt;$/;"	m	struct:__anon16
rio_fd	client/old/rio.h	/^	int rio_fd;$/;"	m	struct:__anon16
rio_read	client/old/rio.cpp	/^static ssize_t rio_read(rio_t* rp, char* usrbuf, size_t n)$/;"	f	file:
rio_readinitb	client/old/rio.cpp	/^void rio_readinitb(rio_t* rp, int fd)$/;"	f
rio_readlineb	client/old/rio.cpp	/^ssize_t rio_readlineb(rio_t* rp, void* usrbuf, size_t maxlen)$/;"	f
rio_readn	client/old/rio.cpp	/^ssize_t rio_readn(int fd, void* usrbuf, size_t n)$/;"	f
rio_readnb	client/old/rio.cpp	/^ssize_t rio_readnb(rio_t* rp, void* usrbuf, size_t n)$/;"	f
rio_t	client/old/rio.h	/^} rio_t;$/;"	t	typeref:struct:__anon16
rio_writen	client/old/rio.cpp	/^ssize_t rio_writen(int fd, void* usrbuf, size_t n)$/;"	f
roll_file	common/logging/old_logging/log_file.cpp	/^bool Log_file::roll_file()$/;"	f	class:lg::Log_file
roll_size_	common/logging/old_logging/async_log.h	/^	off_t roll_size_ = 0;$/;"	m	class:lg::Async_log
roll_size_	common/logging/old_logging/log_file.h	/^	const off_t roll_size_;$/;"	m	class:lg::Log_file
rollback	client/old/mysql_pool.cpp	/^	bool Database::rollback()$/;"	f	class:db::Database
rollback_transaction	server/database/database/mysql_connection.cpp	/^void mysql_connection::rollback_transaction()$/;"	f	class:mysql_connection
root_	client/config.h	/^		Node* root_;$/;"	m	class:Config
row_	client/old/mysql_pool.h	/^			MYSQL_ROW row_;$/;"	m	class:db::Query
row_count_	client/old/mysql_pool.h	/^			int row_count_;$/;"	m	class:db::Query
row_count_	server/database/database/query_result.h	/^	uint64_t row_count_;$/;"	m	class:prepared_result_set
row_count_	server/database/database/query_result.h	/^	uint64_t row_count_;$/;"	m	class:result_set
row_position_	server/database/database/query_result.h	/^	uint64_t row_position_;$/;"	m	class:prepared_result_set
rows_	server/database/database/query_result.h	/^	std::vector<field> rows_;$/;"	m	class:prepared_result_set
rpos	server/shared/packets/byte_buffer.h	/^	size_t rpos() const { return rpos_; }$/;"	f	class:byte_buffer
rpos	server/shared/packets/byte_buffer.h	/^	size_t rpos(size_t rpos)$/;"	f	class:byte_buffer
rpos_	common/utility/message_buffer.h	/^	size_type rpos_;$/;"	m	class:message_buffer
rpos_	server/shared/packets/byte_buffer.h	/^	size_t rpos_;$/;"	m	class:byte_buffer
run	client/net/timer.h	/^	void run() const { callback_(); }$/;"	f	class:net::Timer
run	client/thread/condition_variable.cpp	/^	static void run(void* p)$/;"	f	struct:final
run	client/thread/condition_variable.cpp	/^void run()$/;"	f
run	client/thread/condition_variable.cpp	/^void run(void* p)$/;"	f
run	client/thread/thread.h	/^			void run() { func(); }$/;"	f	struct:Thread::State_impl
run	common/cmdline/cmdline.cpp	/^std::vector<option> cmdline::run()$/;"	f	class:cmdline
run	server/shared/networking/network_thread.h	/^	void run()$/;"	f	class:network_thread
run	server/shared/networking/timer.h	/^	void run() const { callback_(); }$/;"	f	class:timer
run_after	client/net/event_loop.cpp	/^Timer_id Event_loop::run_after(double delay, Timer_callback&& cb)$/;"	f	class:net::Event_loop
run_after	server/shared/networking/event_loop.cpp	/^timer_id event_loop::run_after(double delay, Timer_callback&& cb)$/;"	f	class:event_loop
run_at	client/net/event_loop.cpp	/^Timer_id Event_loop::run_at(const Timestamp& time, Timer_callback&& cb)$/;"	f	class:net::Event_loop
run_at	server/shared/networking/event_loop.cpp	/^timer_id event_loop::run_at(const Timestamp& time, Timer_callback&& cb)$/;"	f	class:event_loop
run_event	client/old/dispatcher.cpp	/^	int Dispatcher::run_event(Event_handler* client_handler, int msec)$/;"	f	class:event::Dispatcher
run_event_loop	client/events.cpp	/^        void run_event_loop()$/;"	f	namespace:events
run_event_loop	client/old/epoll_handler.cpp	/^	bool Epoll_handler::run_event_loop(int mes)$/;"	f	class:event::Epoll_handler
run_event_loop	client/old/event.cpp	/^	bool run_event_loop()$/;"	f	namespace:event
run_every	client/net/event_loop.cpp	/^Timer_id Event_loop::run_every(double interval, Timer_callback&& cb)$/;"	f	class:net::Event_loop
run_every	server/shared/networking/event_loop.cpp	/^timer_id event_loop::run_every(double interval, Timer_callback&& cb)$/;"	f	class:event_loop
run_exe	server/process/run_exe.h	/^run_exe_ run_exe(const char* s)$/;"	f
run_exe	server/process/run_exe.h	/^run_exe_ run_exe(const fs::path& p)$/;"	f
run_exe	server/process/run_exe.h	/^run_exe_ run_exe(const std::string& s)$/;"	f
run_exe_	server/process/run_exe.h	/^	explicit run_exe_(const std::string& s) : s_(s), cmd_line_(new char[2], array_deleter<char>())$/;"	f	class:run_exe_
run_exe_	server/process/run_exe.h	/^class run_exe_ : public initializer_base$/;"	c
run_in_loop	client/net/event_loop.cpp	/^void Event_loop::run_in_loop(Functor&& cb)$/;"	f	class:net::Event_loop
run_in_loop	server/shared/networking/event_loop.cpp	/^void event_loop::run_in_loop(functor&& cb)$/;"	f	class:event_loop
running_	common/logging/old_logging/async_log.h	/^	bool running_;$/;"	m	class:lg::Async_log
runstatedir	client/Makefile	/^runstatedir = ${localstatedir}\/run$/;"	m
runstatedir	client/old/Makefile	/^runstatedir = ${localstatedir}\/run$/;"	m
s_	server/process/run_exe.h	/^	std::string s_;$/;"	m	class:run_exe_
safe_exit	client/main.cpp	/^static void safe_exit(int res)$/;"	f	file:
save	client/hotkey/hotkey_item.cpp	/^	void Hotkey_base::save(Config& item) const$/;"	f	class:hotkey::Hotkey_base
save_helper	client/hotkey/hotkey_item.cpp	/^	void Hotkey_keyboard::save_helper(Config& item) const$/;"	f	class:hotkey::Hotkey_keyboard
save_helper	client/hotkey/hotkey_item.cpp	/^	void Hotkey_mouse::save_helper(Config& item) const$/;"	f	class:hotkey::Hotkey_mouse
save_helper	client/hotkey/hotkey_item.h	/^			virtual void save_helper(Config&) const {}$/;"	f	class:hotkey::Hotkey_void
save_hotkeys	client/hotkey/hotkey_item.cpp	/^	void save_hotkeys(Config& cfg)$/;"	f	namespace:hotkey
sax_parse	client/utils/json.h	/^    static bool sax_parse(IteratorType first, IteratorType last, SAX* sax)$/;"	f	class:basic_json
sax_parse	client/utils/json.h	/^    static bool sax_parse(detail::input_adapter&& i, SAX* sax,$/;"	f	class:basic_json
sbindir	client/Makefile	/^sbindir = ${exec_prefix}\/sbin$/;"	m
sbindir	client/old/Makefile	/^sbindir = ${exec_prefix}\/sbin$/;"	m
scaled_to_hex	client/image.h	/^	enum Img_type{unscaled, scaled_to_zoom, hexed, scaled_to_hex, tod_colored, brightened};$/;"	e	enum:image::Img_type
scaled_to_hex_images_	client/image.cpp	/^		scaled_to_hex_images_,$/;"	m	namespace:__anon32	file:
scaled_to_zoom	client/image.h	/^	enum Img_type{unscaled, scaled_to_zoom, hexed, scaled_to_hex, tod_colored, brightened};$/;"	e	enum:image::Img_type
scaled_to_zoom_	client/image.cpp	/^		scaled_to_zoom_, $/;"	m	namespace:__anon32	file:
scope	client/hotkey/hotkey_command.h	/^		Hk_scopes scope; \/\/ 命令的可见范围$/;"	m	struct:hotkey::Hotkey_command
scope	client/hotkey/hotkey_command.h	/^		Hk_scopes scope;$/;"	m	struct:hotkey::Hotkey_command_temp
scope_changer	client/hotkey/hotkey_command.cpp	/^	Scope_changer::scope_changer() : prev_scope_active_(scope_active) {}$/;"	f	class:hotkey::Scope_changer
scope_id	server/shared/networking/ip/address_v6.h	/^	uint64_t scope_id() const { return scope_id_; }$/;"	f	class:address_v6
scope_id	server/shared/networking/ip/address_v6.h	/^	void scope_id(uint64_t id) { scope_id_ = id; }$/;"	f	class:address_v6
scope_id_	server/shared/networking/ip/address_v6.h	/^	uint64_t scope_id_;$/;"	m	class:address_v6
screen_area	client/video.cpp	/^SDL_Rect Video::screen_area()$/;"	f	class:Video
screenshot_filename_	client/game_launcher.h	/^		std::string screenshot_map_, screenshot_filename_;$/;"	m	class:Game_launcher
screenshot_map_	client/game_launcher.h	/^		std::string screenshot_map_, screenshot_filename_;$/;"	m	class:Game_launcher
sdl	client/sdl/userevent.h	/^namespace sdl$/;"	n
sdl_button_down_event	client/gui/core/event/distributor.h	/^			static const Ui_event sdl_button_down_event = sdl_button_down;$/;"	m	struct:gui::event::Mouse_button_event_type_wrapper
sdl_button_up_event	client/gui/core/event/distributor.h	/^			static const Ui_event sdl_button_up_event = sdl_button_up;$/;"	m	struct:gui::event::Mouse_button_event_type_wrapper
sdl_get_mods	client/hotkey/hotkey_item.cpp	/^	static unsigned int sdl_get_mods()$/;"	f	namespace:hotkey
sdl_get_version	client/sdl/utils.cpp	/^Version_info sdl_get_version()$/;"	f
sdl_handler_vector	client/events.h	/^        typedef std::vector<SDL_handler*> sdl_handler_vector;$/;"	t	namespace:events
sdl_render_copy	client/sdl/utils.h	/^inline void sdl_render_copy(SDL_Renderer* r, Texture t, SDL_Rect* src, SDL_Rect* dst)$/;"	f
sdl_render_copy_portion	client/sdl/utils.h	/^inline void sdl_render_copy_portion(SDL_Renderer* r, Texture t, SDL_Rect* src, SDL_Rect* dst)$/;"	f
search_executable_in_path	common/utility/start_process.cpp	/^std::string search_executable_in_path(const std::string& filename)$/;"	f
search_path	common/utility/start_process.cpp	/^inline fs::path search_path(const fs::path& filename, const std::vector<fs::path>& path = path())$/;"	f
seconds_since_epoch	common/utility/timestamp.h	/^	time_t seconds_since_epoch() const$/;"	f	class:Timestamp
section	common/configuration/ini_parser.h	/^		std::string section;$/;"	m	struct:ini_parser::section
section	common/configuration/ini_parser.h	/^	struct section$/;"	s	class:ini_parser
sections_	common/configuration/ini_parser.h	/^	std::vector<std::shared_ptr<section>> sections_;$/;"	m	class:ini_parser
select_mp_server	client/game_launcher.h	/^		void select_mp_server(const std::string& server) $/;"	f	class:Game_launcher
select_thread_with_min_connection	server/shared/networking/tcp_socket_mgr.h	/^	uint32_t select_thread_with_min_connection() const$/;"	f	class:tcp_socket_mgr
semantic	common/cmdline/option_description.h	/^	bool semantic() const { return value_semantic_; }$/;"	f	class:option_description
semi_escape_text	client/font/pango/escape.h	/^	inline std::string semi_escape_text(const std::string& text)$/;"	f	namespace:font
send	client/net/tcp_connection.cpp	/^void Tcp_connection::send(Buffer* buf)$/;"	f	class:net::Tcp_connection
send	client/net/tcp_connection.cpp	/^void Tcp_connection::send(const std::string& message)$/;"	f	class:net::Tcp_connection
send	client/net/tcp_connection.cpp	/^void Tcp_connection::send(const void* data, int len)$/;"	f	class:net::Tcp_connection
send	server/shared/networking/socket_operations.cpp	/^int send(int sockfd, const iovec* buf, size_t count, int flags, std::error_code& ec)$/;"	f
send_buffer_size	server/shared/networking/socket.cpp	/^socket_option option::send_buffer_size(int size) $/;"	f	class:option
send_buffer_size_	server/game/server/world_tcp_socket.h	/^	size_t send_buffer_size_;$/;"	m	class:world_tcp_socket::read_data_handler_result
send_in_loop	client/net/tcp_connection.cpp	/^void Tcp_connection::send_in_loop(const std::string& message)$/;"	f	class:net::Tcp_connection
send_in_loop	client/net/tcp_connection.cpp	/^void Tcp_connection::send_in_loop(const void* data, size_t len)$/;"	f	class:net::Tcp_connection
send_packet	server/game/server/world_tcp_socket.cpp	/^void world_tcp_socket::send_packet(world_packet const& packet)$/;"	f	class:world_tcp_socket
send_packet_and_log_opcode	server/game/server/world_tcp_socket.cpp	/^void world_tcp_socket::send_packet_and_log_opcode(world_packet const& packet)$/;"	f	class:world_tcp_socket
sendto	server/shared/networking/socket_operations.cpp	/^int sendto(int sockfd, const iovec* buf, size_t count, int flags, const socket_addr_type* addr, socklen_t addrlen, std::error_code& ec)$/;"	f
sequence	client/net/timer.h	/^	int64_t sequence() const { return sequence_; }$/;"	f	class:net::Timer
sequence	server/shared/networking/timer.h	/^	int64_t sequence() const { return sequence_; }$/;"	f	class:timer
sequence_	client/net/timer.h	/^	const int64_t sequence_;$/;"	m	class:net::Timer
sequence_	client/net/timer.h	/^	int64_t sequence_;$/;"	m	class:net::Timer_id
sequence_	server/shared/networking/timer.h	/^	const int64_t sequence_;$/;"	m	class:timer
sequence_	server/shared/networking/timer.h	/^	int64_t sequence_;$/;"	m	class:timer_id
serialize_string	client/json.h	/^void serialize_string(const std::string& s, Iter it)$/;"	f	class:Format
server_challenge_	server/game/server/world_tcp_socket.h	/^	big_number server_challenge_;$/;"	m	class:world_tcp_socket::read_data_handler_result
server_connection_initialize	server/game/server/world_tcp_socket.h	/^	static const std::string server_connection_initialize;$/;"	m	class:world_tcp_socket
server_opcode_handler	server/game/server/protocol/opcodes.h	/^	server_opcode_handler(const char* name, session_status status, connection_type conn_index) :$/;"	f	struct:server_opcode_handler
server_opcode_handler	server/game/server/protocol/opcodes.h	/^struct server_opcode_handler : public opcode_handler$/;"	s
server_packet	server/game/server/packet.cpp	/^server_packet::server_packet(opcode_server opcode, size_t initial_size, connection_type connection) : $/;"	f	class:world_packet::server_packet
server_packet	server/game/server/packet.h	/^struct server_packet : public packet$/;"	s	namespace:world_packets
session_key	server/game/server/protocol/packet_log.cpp	/^	uint8_t session_key[40];$/;"	m	struct:log_header	file:
session_key_	server/game/server/world_tcp_socket.h	/^	big_number session_key_;$/;"	m	class:world_tcp_socket::read_data_handler_result
session_key_seed	server/game/server/world_tcp_socket.cpp	/^constexpr uint8_t world_tcp_socket::session_key_seed[16] = { $/;"	m	class:world_tcp_socket	file:
session_key_seed	server/game/server/world_tcp_socket.h	/^	static constexpr uint8_t session_key_seed[16];$/;"	m	class:world_tcp_socket
session_status	server/game/server/protocol/opcodes.h	/^enum session_status$/;"	g
set	client/cursor.cpp	/^	void set(CursorType type)$/;"	f	namespace:cursor
setMessage_callback	client/net/tcp_server.h	/^	void setMessage_callback(const Message_callback& cb)$/;"	f	class:net::Tcp_server
setMessage_callback	server/shared/networking/tcp_server.h	/^	void setMessage_callback(const Message_callback& cb)$/;"	f	class:net::Tcp_server
set_active_scopes	client/hotkey/hotkey_command.cpp	/^	void set_active_scopes(Hk_scopes s) { scope_active = s; }$/;"	f	namespace:hotkey
set_args	server/process/set_args.h	/^set_args_<T> set_args(const T& range)$/;"	f
set_args_	server/process/set_args.h	/^	explicit set_args_(const T& args)$/;"	f	class:set_args_
set_args_	server/process/set_args.h	/^class set_args_ : public initializer_base$/;"	c
set_array	client/json.h	/^	void set_array(Array&& v) $/;"	f	class:Format::Value
set_autocommit	client/old/mysql_pool.h	/^			bool set_autocommit(bool autocommit = false)$/;"	f	class:db::Database
set_autoconnect	client/old/mysql_pool.h	/^			bool set_autoconnect(bool enable = true)$/;"	f	class:db::Database
set_binary	common/cryptography/big_number.cpp	/^void big_number::set_binary(uint8_t const* bytes, int32_t len)$/;"	f	class:big_number
set_binary	server/database/database/mysql_prepared_statement.cpp	/^void mysql_prepared_statement::set_binary(const uint8_t index, const std::vector<uint8_t>& value, bool is_string)$/;"	f	class:mysql_prepared_statement
set_binary	server/database/database/prepared_statement.cpp	/^void prepared_statement_base::set_binary(const uint8_t index, const std::vector<uint8_t>& value)$/;"	f	class:prepared_statement_base
set_bool	client/json.h	/^	bool set_bool(bool b) $/;"	f	class:Format::Default_parse_context
set_bool	server/database/database/mysql_prepared_statement.cpp	/^void mysql_prepared_statement::set_bool(const uint8_t index, const bool value)$/;"	f	class:mysql_prepared_statement
set_bool	server/database/database/prepared_statement.cpp	/^void prepared_statement_base::set_bool(const uint8_t index, const bool value)$/;"	f	class:prepared_statement_base
set_boolean	client/json.h	/^	void set_boolean(const bool v) $/;"	f	class:Format::Value
set_button	client/hotkey/hotkey_item.h	/^			void set_button(int button) { button_ = button; }$/;"	f	class:hotkey::Hotkey_mouse
set_byte_value	server/database/database/field.cpp	/^void field::set_byte_value(void* new_value, database_field_type new_type, uint32_t length)$/;"	f	class:field
set_character_set	client/old/mysql_pool.cpp	/^	bool Database::set_character_set(const std::string& encoding)$/;"	f	class:db::Database
set_close_callback	client/net/channel.h	/^	void set_close_callback(Event_callback&& cb)$/;"	f	class:net::Channel
set_close_callback	client/net/tcp_connection.h	/^  void set_close_callback(const Close_callback& cb)$/;"	f	class:net::Tcp_connection
set_close_callback	server/shared/networking/channel.h	/^	void set_close_callback(event_callback&& cb)$/;"	f	class:channel
set_close_on_exec	client/net/net_utils.cpp	/^bool set_close_on_exec(int sockfd)$/;"	f	namespace:net
set_close_on_exec	server/shared/networking/socket_operations.cpp	/^bool set_close_on_exec(int sockfd, std::error_code& ec)$/;"	f
set_color	common/logging/appender_console.cpp	/^void appender_console::set_color(bool stdout_stream, color_types color)$/;"	f	class:appender_console
set_command	client/hotkey/hotkey_item.h	/^			void set_command(const std::string& command) { command_ = command; }$/;"	f	class:hotkey::Hotkey_base
set_comonent	client/version.h	/^		void set_comonent(size_t index, unsigned int value)$/;"	f	class:Version_info
set_conn_info	client/old/mysql_pool.cpp	/^	void Database::set_conn_info(const std::string& host, $/;"	f	class:db::Database
set_connection	server/database/database/sql_operation.h	/^	virtual void set_connection(mysql_connection* conn_) { conn = conn_; }$/;"	f	class:sql_operation
set_connection_callback	client/net/tcp_connection.h	/^  void set_connection_callback(const Connection_callback& cb)$/;"	f	class:net::Tcp_connection
set_connection_callback	client/net/tcp_server.h	/^	void set_connection_callback(const Connection_callback& cb)$/;"	f	class:net::Tcp_server
set_connection_callback	server/shared/networking/tcp_server.h	/^	void set_connection_callback(const Connection_callback& cb)$/;"	f	class:net::Tcp_server
set_connection_callback	server/shared/networking/tcp_socket.h	/^	void set_connection_callback(const Connection_callback& cb)$/;"	f	class:tcp_socket
set_connection_info	server/database/database/database_worker_pool.cpp	/^void database_worker_pool<T>::set_connection_info(const std::string& info_string, const uint8_t async_threads, const uint8_t synch_threads)$/;"	f	class:database_worker_pool
set_context	client/net/event_loop.h	/^	void set_context(const std::any& context) { context_ = context; }$/;"	f	class:net::Event_loop
set_context	client/net/tcp_connection.h	/^  void set_context(const std::any& context)$/;"	f	class:net::Tcp_connection
set_data	client/sound.cpp	/^			void set_data(Mix_Chunk* d)$/;"	f	class:__anon28::Sound_cache_chunk
set_data_len	client/old/packet.h	/^		void set_data_len( uint16_t data_len )$/;"	f	class:Packet
set_data_len	client/old/packet.h	/^		void set_data_len(uint32_t len)$/;"	f	class:Packet
set_dataset	client/old/mysql_pool.cpp	/^	void set_dataset(MYSQL_RES* dataset)$/;"	f	namespace:db
set_double	server/database/database/mysql_prepared_statement.cpp	/^void mysql_prepared_statement::set_double(const uint8_t index, const double value)$/;"	f	class:mysql_prepared_statement
set_double	server/database/database/prepared_statement.cpp	/^void prepared_statement_base::set_double(const uint8_t index, const double value)$/;"	f	class:prepared_statement_base
set_draggin	client/cursor.cpp	/^	void set_draggin(bool drag)$/;"	f	namespace:cursor
set_draw_color	client/sdl/render_utils.h	/^inline void set_draw_color(SDL_Renderer* renderer, const Color& color)$/;"	f
set_draw_color	client/sdl/render_utils.h	/^inline void set_draw_color(SDL_Renderer* renderer, uint8_t r, uint8_t g,$/;"	f
set_dword	common/cryptography/big_number.cpp	/^void big_number::set_dword(uint32_t val)$/;"	f	class:big_number
set_enc_key	client/old/packet.h	/^		void set_enc_key( uint8_t key )$/;"	f	class:Packet
set_error_callback	client/net/channel.h	/^	void set_error_callback(Event_callback&& cb)$/;"	f	class:net::Channel
set_error_callback	server/shared/networking/channel.h	/^	void set_error_callback(event_callback&& cb)$/;"	f	class:channel
set_fd	client/old/packet.h	/^		void set_fd( int fd_ )$/;"	f	class:Packet
set_float	server/database/database/mysql_prepared_statement.cpp	/^void mysql_prepared_statement::set_float(const uint8_t index, const float value)$/;"	f	class:mysql_prepared_statement
set_float	server/database/database/prepared_statement.cpp	/^void prepared_statement_base::set_float(const uint8_t index, const float value)$/;"	f	class:prepared_statement_base
set_flush	common/logging/old_logging/logging.cpp	/^void Logger::set_flush(Flush_func flush)$/;"	f	class:lg::Logger
set_focus	client/cursor.cpp	/^	void set_focus(bool focus)$/;"	f	namespace:cursor
set_focus	client/events.cpp	/^        void Context::set_focus(const Sdl_handler* ptr)$/;"	f	class:events::Context
set_font_list	client/font/sdl_ttf.cpp	/^void SDL_ttf::set_font_list(const std::vector<Subset_descriptor>& fontlist)$/;"	f	class:SDL_ttf
set_font_scaling	client/preferences/general.cpp	/^void set_font_scaling(int scale)$/;"	f
set_handler	client/old/packet.h	/^		void set_handler( void * handler_ )$/;"	f	class:Packet
set_hex_str	common/cryptography/big_number.cpp	/^void big_number::set_hex_str(char const* str)$/;"	f	class:big_number
set_high_water_mark_callback	client/net/tcp_connection.h	/^  void set_high_water_mark_callback(const High_water_mark_callback& cb, size_t high_water_mark)$/;"	f	class:net::Tcp_connection
set_icon	client/sdl/window.cpp	/^void Window::set_icon(Surface& icon)$/;"	f	class:Window
set_index	client/net/channel.h	/^	void set_index(int idx) { index_ = idx; }$/;"	f	class:net::Channel
set_initialize_handler_callback	server/game/server/world_tcp_socket.h	/^	void set_initialize_handler_callback()$/;"	f	class:world_tcp_socket::read_data_handler_result
set_int16	server/database/database/mysql_prepared_statement.cpp	/^void mysql_prepared_statement::set_int16(const uint8_t index, const int16_t value)$/;"	f	class:mysql_prepared_statement
set_int16	server/database/database/prepared_statement.cpp	/^void prepared_statement_base::set_int16(const uint8_t index, const int16_t value)$/;"	f	class:prepared_statement_base
set_int32	server/database/database/mysql_prepared_statement.cpp	/^void mysql_prepared_statement::set_int32(const uint8_t index, const int32_t value)$/;"	f	class:mysql_prepared_statement
set_int32	server/database/database/prepared_statement.cpp	/^void prepared_statement_base::set_int32(const uint8_t index, const int32_t value)$/;"	f	class:prepared_statement_base
set_int64	client/json.h	/^	bool set_int64(int64_t i) $/;"	f	class:Format::Default_parse_context
set_int64	client/json.h	/^	void set_int64(const int64_t v) $/;"	f	class:Format::Value
set_int64	server/database/database/mysql_prepared_statement.cpp	/^void mysql_prepared_statement::set_int64(const uint8_t index, const int64_t value)$/;"	f	class:mysql_prepared_statement
set_int64	server/database/database/prepared_statement.cpp	/^void prepared_statement_base::set_int64(const uint8_t index, const int64_t value)$/;"	f	class:prepared_statement_base
set_int8	server/database/database/mysql_prepared_statement.cpp	/^void mysql_prepared_statement::set_int8(const uint8_t index, const int8_t value)$/;"	f	class:mysql_prepared_statement
set_int8	server/database/database/prepared_statement.cpp	/^void prepared_statement_base::set_int8(const uint8_t index, const int8_t value)$/;"	f	class:prepared_statement_base
set_keep_alive	client/net/socket.cpp	/^void Socket::set_keep_alive()$/;"	f	class:net::Socket
set_keep_alive	server/shared/networking/socket.cpp	/^bool socket::set_keep_alive()$/;"	f	class:socket
set_keycode	client/hotkey/hotkey_item.h	/^			void set_keycode(SDL_Keycode keycode) { keycode_ = keycode; }$/;"	f	class:hotkey::Hotkey_keyboard
set_log_domain_severity	client/log.cpp	/^	bool set_log_domain_severity(const std::string& name, const Logger& lg)$/;"	f	namespace:lg
set_log_domain_severity	client/log.cpp	/^	bool set_log_domain_severity(const std::string& name, int severity)$/;"	f	namespace:lg
set_log_level	common/logging/appender.h	/^	void set_log_level(log_level level) { level_ = level; }$/;"	f	class:appender
set_log_level	common/logging/log.cpp	/^bool log::set_log_level(std::string const& name, const char* new_levelc, bool is_logger \/* = true *\/)$/;"	f	class:log
set_log_level	common/logging/logger.cpp	/^void logger::set_log_level(log_level level)$/;"	f	class:logger
set_log_level	common/logging/old_logging/logging.cpp	/^void Logger::set_log_level(Logger::Log_level level)$/;"	f	class:lg::Logger
set_major_version	client/version.cpp	/^void Version_info::set_major_version(unsigned int v)$/;"	f	class:Version_info
set_message_callback	client/net/tcp_connection.h	/^  void set_message_callback(const Message_callback& cb)$/;"	f	class:net::Tcp_connection
set_minimum_size	client/sdl/window.cpp	/^void Window::set_minimum_size(int min_w, int min_h)$/;"	f	class:Window
set_minor_version	client/version.cpp	/^void Version_info::set_minor_version(unsigned int v)$/;"	f	class:Version_info
set_mods	client/hotkey/hotkey_item.h	/^			void set_mods(unsigned int mods) { mods_ = mods; }$/;"	f	class:hotkey::Hotkey_base
set_mouse_behavior	client/gui/core/event/dispatcher.h	/^				void set_mouse_behavior(const Mouse_behavior mouse_behavior)$/;"	f	class:gui::event::Dispatcher
set_ms_after	client/sound_music_track.h	/^			void set_ms_after(int v) { ms_after_ = v; }$/;"	f	class:sound::Music_track
set_ms_before	client/sound_music_track.h	/^			void set_ms_before(int v) { ms_before_ = v; }$/;"	f	class:sound::Music_track
set_multi_statements	client/old/mysql_pool.h	/^			bool set_multi_statements()$/;"	f	class:db::Database
set_name	common/cmdline/option_description.cpp	/^option_description& option_description::set_name(const std::string& name)$/;"	f	class:option_description
set_new_connection_callback	client/net/acceptor.h	/^  void set_new_connection_callback(const New_connection_callback& cb)$/;"	f	class:net::Acceptor
set_new_connection_callback	server/shared/networking/acceptor.cpp	/^void acceptor::set_new_connection_callback(const min_connection_thread_callback& cb) $/;"	f	class:acceptor
set_next_query	server/database/database/query_callback.cpp	/^void query_callback::set_next_query(query_callback&& next)$/;"	f	class:query_callback
set_non_blocking	client/old/server.cpp	/^bool Server::set_non_blocking(int fd)$/;"	f	class:Server
set_nonblock	client/net/net_utils.cpp	/^bool set_nonblock(int sockfd)$/;"	f	namespace:net
set_nonblock	server/process/start_process.cpp	/^bool set_nonblock(int sockfd)$/;"	f
set_null	client/json.h	/^	bool set_null() $/;"	f	class:Format::Default_parse_context
set_null	server/database/database/mysql_prepared_statement.cpp	/^void mysql_prepared_statement::set_null(const uint8_t index)$/;"	f	class:mysql_prepared_statement
set_null	server/database/database/prepared_statement.cpp	/^void prepared_statement_base::set_null(const uint8_t index)$/;"	f	class:prepared_statement_base
set_number	client/json.h	/^	bool set_number(double f) $/;"	f	class:Format::Default_parse_context
set_number	client/json.h	/^	void set_number(const double v) $/;"	f	class:Format::Value
set_object	client/json.h	/^	void set_object(Object&& v) $/;"	f	class:Format::Value
set_opcode	server/game/server/world_packet.h	/^	void set_opcode(uint16_t opcode) { opcode_ = opcode; }$/;"	f	class:world_packet
set_option	server/shared/networking/socket.cpp	/^bool socket::set_option(const socket_option& option)$/;"	f	class:socket
set_option_columns	client/cmdln.cpp	/^void Commandline::set_option_columns(const int long_cols, $/;"	f	class:Commandline
set_output	common/logging/old_logging/logging.cpp	/^void Logger::set_output(Output_func out)$/;"	f	class:lg::Logger
set_packet_end	client/old/packet.h	/^		void set_packet_end()$/;"	f	class:Packet
set_packet_seq	client/old/packet.h	/^		void set_packet_seq( uint16_t seq )$/;"	f	class:Packet
set_packet_type	client/old/packet.h	/^		void set_packet_type( uint16_t packet_type )$/;"	f	class:Packet
set_packet_type	client/old/packet.h	/^		void set_packet_type(uint16_t packet_type)$/;"	f	class:Packet
set_parameter_value	server/database/database/mysql_prepared_statement.cpp	/^void set_parameter_value(MYSQL_BIND* param, enum_field_types type, const void* value, uint32_t len, bool is_unsigned)$/;"	f	namespace:__anon5
set_paths	client/filesystem.cpp	/^	void Binary_paths_manager::set_paths(const Config& cfg)$/;"	f	class:filesystem::Binary_paths_manager
set_play_once	client/sound_music_track.h	/^			void set_play_once(bool v) { once_ = v; }$/;"	f	class:sound::Music_track
set_prepared_query	server/database/database/query_holder.h	/^	bool set_prepared_query(size_t index, prepared_statement<T>* stmt)$/;"	f	class:sql_query_holder
set_prepared_query_impl	server/database/database/query_holder.cpp	/^bool sql_query_holder_base::set_prepared_query_impl(size_t index, prepared_statement_base* stmt)$/;"	f	class:sql_query_holder_base
set_prepared_result	server/database/database/query_holder.cpp	/^void sql_query_holder_base::set_prepared_result(size_t index, prepared_result_set* result)$/;"	f	class:sql_query_holder_base
set_previous_track	client/sound.cpp	/^	void set_previous_track(std::shared_ptr<Music_track> track)$/;"	f	namespace:sound
set_protocal_version	client/old/packet.h	/^		void set_protocal_version(char version) $/;"	f	class:Packet
set_qword	common/cryptography/big_number.cpp	/^void big_number::set_qword(uint64_t val)$/;"	f	class:big_number
set_rand	common/cryptography/big_number.cpp	/^void big_number::set_rand(int32_t numbits)$/;"	f	class:big_number
set_read_callback	client/net/channel.h	/^	void set_read_callback(Read_event_callback&& cb)$/;"	f	class:net::Channel
set_read_callback	server/shared/networking/channel.h	/^	void set_read_callback(read_event_callback&& cb)$/;"	f	class:channel
set_read_handler_callback	server/shared/networking/tcp_socket.h	/^	void set_read_handler_callback(std::function<void(std::error_code&, size_t)> cb)$/;"	f	class:tcp_socket
set_read_handler_internal_callback	server/game/server/world_tcp_socket.h	/^	void set_read_handler_internal_callback()$/;"	f	class:world_tcp_socket::read_data_handler_result
set_realmId	server/database/logging/appender_DB.cpp	/^void appender_DB::set_realmId(uint32_t realm_id)$/;"	f	class:appender_DB
set_realm_id	common/logging/appender.h	/^	virtual void set_realm_id(uint32_t) { }$/;"	f	class:appender
set_realm_id	common/logging/log.cpp	/^void log::set_realm_id(uint32_t id)$/;"	f	class:log
set_reuse_addr	client/net/socket.cpp	/^void Socket::set_reuse_addr()$/;"	f	class:net::Socket
set_reuse_addr	server/shared/networking/socket.cpp	/^bool socket::set_reuse_addr()$/;"	f	class:socket
set_reuse_port	client/net/socket.cpp	/^void Socket::set_reuse_port()$/;"	f	class:net::Socket
set_reuse_port	server/shared/networking/socket.cpp	/^bool socket::set_reuse_port()$/;"	f	class:socket
set_revents	client/net/channel.h	/^	void set_revents(int revt) { revents_ = revt; } \/\/ used by pollers$/;"	f	class:net::Channel
set_revents	server/shared/networking/channel.h	/^	void set_revents(int revt) { revents_ = revt; } \/\/ used by pollers$/;"	f	class:channel
set_revision_level	client/version.cpp	/^void Version_info::set_revision_level(unsigned int v)$/;"	f	class:Version_info
set_scale_quality_pre_texture_creation	client/image.cpp	/^	static void set_scale_quality_pre_texture_creation(Scale_quality quality)$/;"	f	namespace:image
set_scope_active	client/hotkey/hotkey_command.cpp	/^	void set_scope_active(Scope s, bool set) { scope_active[s] = set; }$/;"	f	namespace:hotkey
set_send_buffer_size	server/game/server/world_tcp_socket.h	/^	void set_send_buffer_size(size_t send_buffer_size) $/;"	f	class:world_tcp_socket
set_send_buffer_size	server/shared/networking/socket.cpp	/^bool socket::set_send_buffer_size(int size)$/;"	f	class:socket
set_shuffle	client/sound_music_track.h	/^			void set_shuffle(bool v) { shuffle_ = v; }$/;"	f	class:sound::Music_track
set_size	client/sdl/window.cpp	/^void Window::set_size(int w, int h)$/;"	f	class:Window
set_size	server/database/database/query_holder.cpp	/^void sql_query_holder_base::set_size(size_t size)$/;"	f	class:sql_query_holder_base
set_special_version	client/version.h	/^		void set_special_version(const std::string& str) { special_ = str; }$/;"	f	class:Version_info
set_state	client/net/tcp_connection.h	/^  void set_state(StateE s) { state_ = s; }$/;"	f	class:net::Tcp_connection
set_state	server/shared/networking/channel.h	/^	void set_state(state state) { state_ = state; }$/;"	f	class:channel
set_state	server/shared/networking/tcp_socket.h	/^	void set_state(StateE s) { state_ = s; }$/;"	f	class:tcp_socket
set_strict_severity	client/log.cpp	/^	void set_strict_severity(const Logger& lg)$/;"	f	namespace:lg
set_strict_severity	client/log.cpp	/^	void set_strict_severity(int severity)$/;"	f	namespace:lg
set_string	client/json.h	/^	void set_string(std::string&& v) $/;"	f	class:Format::Value
set_string	server/database/database/prepared_statement.cpp	/^void prepared_statement_base::set_string(const uint8_t index, const std::string& value)$/;"	f	class:prepared_statement_base
set_structure_value	server/database/database/field.cpp	/^void field::set_structure_value(char* new_value, database_field_type new_type, uint32_t length)$/;"	f	class:field
set_synchronous	common/logging/log.cpp	/^void log::set_synchronous()$/;"	f	class:log
set_table_id	client/old/packet.h	/^		void set_table_id( int table_id )$/;"	f	class:Packet
set_tcp_no_delay	client/net/socket.cpp	/^void Socket::set_tcp_no_delay()$/;"	f	class:net::Socket
set_tcp_no_delay	client/net/tcp_connection.cpp	/^void Tcp_connection::set_tcp_no_delay(bool on)$/;"	f	class:net::Tcp_connection
set_tcp_no_delay	server/shared/networking/socket.cpp	/^bool socket::set_tcp_no_delay()$/;"	f	class:socket
set_tcp_no_delay	server/shared/networking/tcp_socket.cpp	/^void tcp_socket::set_tcp_no_delay(bool on)$/;"	f	class:tcp_socket
set_text	client/font/text_surface.cpp	/^void Text_surface::set_text(const std::string& str)$/;"	f	class:Text_surface
set_text	client/hotkey/hotkey_item.h	/^			void set_text(const std::string& text)$/;"	f	class:hotkey::Hotkey_keyboard
set_texture_alpha	client/sdl/render_utils.h	/^inline void set_texture_alpha(Texture& t, uint8_t amount)$/;"	f
set_texture_blend_color	client/sdl/render_utils.h	/^inline void set_texture_blend_color(Texture& t, uint8_t r, uint8_t g,$/;"	f
set_texture_blend_mode	client/sdl/render_utils.h	/^inline void set_texture_blend_mode(Texture& t, SDL_BlendMode mode)$/;"	f
set_texture_scale_quality	client/sdl/render_utils.h	/^inline void set_texture_scale_quality(const std::string& value)$/;"	f
set_thread_init_callback	client/net/tcp_server.h	/^	void set_thread_init_callback(const Thread_init_callback& cb)$/;"	f	class:net::Tcp_server
set_thread_init_callback	server/shared/networking/tcp_server.h	/^	void set_thread_init_callback(const Thread_init_callback& cb)$/;"	f	class:net::Tcp_server
set_thread_num	client/net/event_loop_threadpool.h	/^			void set_thread_num(size_t num_threads) { num_threads_ = num_threads; }$/;"	f	class:net::Event_loop_threadpool
set_thread_num	client/net/tcp_server.cpp	/^void Tcp_server::set_thread_num(size_t num_threads)$/;"	f	class:net::Tcp_server
set_thread_num	server/shared/networking/event_loop_threadpool.h	/^	void set_thread_num(size_t num_threads) { num_threads_ = num_threads; }$/;"	f	class:event_loop_threadpool
set_thread_num	server/shared/networking/tcp_server.cpp	/^void Tcp_server::set_thread_num(size_t num_threads)$/;"	f	class:net::Tcp_server
set_title	client/sdl/window.cpp	/^void Window::set_title(const std::string& title)$/;"	f	class:Window
set_track	client/sound.cpp	/^	void set_track(unsigned int i, const std::shared_ptr<Music_track>& to)$/;"	f	namespace:sound
set_uint16	server/database/database/mysql_prepared_statement.cpp	/^void mysql_prepared_statement::set_uint16(const uint8_t index, const uint16_t value)$/;"	f	class:mysql_prepared_statement
set_uint16	server/database/database/prepared_statement.cpp	/^void prepared_statement_base::set_uint16(const uint8_t index, const uint16_t value)$/;"	f	class:prepared_statement_base
set_uint32	server/database/database/mysql_prepared_statement.cpp	/^void mysql_prepared_statement::set_uint32(const uint8_t index, const uint32_t value)$/;"	f	class:mysql_prepared_statement
set_uint32	server/database/database/prepared_statement.cpp	/^void prepared_statement_base::set_uint32(const uint8_t index, const uint32_t value)$/;"	f	class:prepared_statement_base
set_uint64	server/database/database/mysql_prepared_statement.cpp	/^void mysql_prepared_statement::set_uint64(const uint8_t index, const uint64_t value)$/;"	f	class:mysql_prepared_statement
set_uint64	server/database/database/prepared_statement.cpp	/^void prepared_statement_base::set_uint64(const uint8_t index, const uint64_t value)$/;"	f	class:prepared_statement_base
set_uint8	server/database/database/mysql_prepared_statement.cpp	/^void mysql_prepared_statement::set_uint8(const uint8_t index, const uint8_t value)$/;"	f	class:mysql_prepared_statement
set_uint8	server/database/database/prepared_statement.cpp	/^void prepared_statement_base::set_uint8(const uint8_t index, const uint8_t value)$/;"	f	class:prepared_statement_base
set_user_data_dir	client/filesystem.cpp	/^	void set_user_data_dir(std::string newprefdir)$/;"	f	namespace:filesystem
set_user_non_blocking	server/shared/networking/socket_operations.cpp	/^bool set_user_non_blocking(int sockfd, std::error_code& ec)$/;"	f
set_wait_read_byte	client/old/server.h	/^set_wait_read_byte(int n) { wait_read_byte = n; }$/;"	f	struct:Descriptor
set_want_keyboard_input	client/gui/core/event/dispatcher.h	/^				void set_want_keyboard_input(const bool want_keyboard_input)$/;"	f	class:gui::event::Dispatcher
set_world_session	server/game/server/world_tcp_socket.cpp	/^void world_tcp_socket::set_world_session(world_session* session)$/;"	f	class:world_tcp_socket
set_write_callback	client/net/channel.h	/^	void set_write_callback(Event_callback&& cb)$/;"	f	class:net::Channel
set_write_callback	server/shared/networking/channel.h	/^	void set_write_callback(event_callback&& cb)$/;"	f	class:channel
set_write_complete_callback	client/net/tcp_connection.h	/^  void set_write_complete_callback(const Write_complete_callback& cb)$/;"	f	class:net::Tcp_connection
set_write_complete_callback	client/net/tcp_server.h	/^	void set_write_complete_callback(const Write_complete_callback& cb)$/;"	f	class:net::Tcp_server
set_write_complete_callback	server/shared/networking/tcp_server.h	/^	void set_write_complete_callback(const Write_complete_callback& cb)$/;"	f	class:net::Tcp_server
setsockopt	server/shared/networking/socket_operations.cpp	/^int setsockopt(int sockfd, int level, int optname, const char* optval, socklen_t optlen, std::error_code& ec)$/;"	f
setup_user_data_dir	client/filesystem.cpp	/^	static void setup_user_data_dir()$/;"	f	namespace:filesystem
severity_	client/log.h	/^			int severity_;$/;"	m	class:lg::Logger
sex_	client/old/player.h	/^		Sex sex_;$/;"	m	class:Character
sharedstatedir	client/Makefile	/^sharedstatedir = ${prefix}\/com$/;"	m
sharedstatedir	client/old/Makefile	/^sharedstatedir = ${prefix}\/com$/;"	m
short_column_	client/cmdln.h	/^		int short_column_;$/;"	m	class:Commandline
short_name_	common/cmdline/option_description.h	/^	std::string short_name_;$/;"	m	class:option_description
short_option	client/cmdln.cpp	/^	std::string short_option;$/;"	m	struct:Cmd_option	file:
should_log	common/logging/log.cpp	/^bool log::should_log(const std::string& type, log_level level) const$/;"	f	class:log
shrink	client/net/buffer.h	/^	void shrink(size_t reserve)$/;"	f	class:net::Buffer
shrink_to_fit	server/game/server/packet.h	/^	void shrink_to_fit() { world_packet_.shrink_to_fit(); }$/;"	f	struct:world_packets::server_packet
shuffle	client/sound_music_track.h	/^			bool shuffle() const { return shuffle_; }$/;"	f	class:sound::Music_track
shuffle_	client/sound_music_track.h	/^			bool shuffle_;$/;"	m	class:sound::Music_track
shutdown	client/net/tcp_connection.cpp	/^void Tcp_connection::shutdown()$/;"	f	class:net::Tcp_connection
shutdown	client/old/mysql_pool.h	/^			bool shutdown() $/;"	f	class:db::Database
shutdown	server/shared/networking/socket.cpp	/^void socket::shutdown(shutdown_type type, std::error_code& ec)$/;"	f	class:socket
shutdown	server/shared/networking/socket_operations.cpp	/^int shutdown(int sockfd, int what, std::error_code& ec)$/;"	f
shutdown_	common/threading/producer_consumer_queue.h	/^	std::atomic<bool> shutdown_;$/;"	m	class:producer_consumer_queue
shutdown_both	server/shared/networking/socket.h	/^		shutdown_both = SHUT_RDWR$/;"	e	enum:socket::shutdown_type
shutdown_in_loop	client/net/tcp_connection.cpp	/^void Tcp_connection::shutdown_in_loop()$/;"	f	class:net::Tcp_connection
shutdown_receive	server/shared/networking/socket.h	/^		shutdown_receive = SHUT_RD,$/;"	e	enum:socket::shutdown_type
shutdown_send	server/shared/networking/socket.h	/^		shutdown_send = SHUT_WR,$/;"	e	enum:socket::shutdown_type
shutdown_type	server/shared/networking/socket.h	/^	enum shutdown_type$/;"	g	class:socket
shutdown_write	client/net/net_utils.cpp	/^void shutdown_write(int sockfd)$/;"	f	namespace:net
shutdown_write	client/net/socket.cpp	/^void Socket::shutdown_write()$/;"	f	class:net::Socket
shutdown_write	server/shared/networking/socket.cpp	/^void socket::shutdown_write()$/;"	f	class:socket
signal_handler	client/old/main.cpp	/^void signal_handler(int sig)$/;"	f
signal_handler_sdl_button_down_entered_	client/gui/core/event/distributor.h	/^				bool signal_handler_sdl_button_down_entered_;$/;"	m	class:gui::event::Mouse_button
signal_handler_sdl_button_up_entered_	client/gui/core/event/distributor.h	/^				bool signal_handler_sdl_button_up_entered_;$/;"	m	class:gui::event::Mouse_button
signal_handler_sdl_mouse_motion	client/gui/core/event/distributor.cpp	/^		void Mouse_motion::signal_handler_sdl_mouse_motion(const event::Ui_event event, bool& handled, const Point& coordinate)$/;"	f	class:gui::event::Mouse_motion
signal_handler_sdl_mouse_motion_entered_	client/gui/core/event/distributor.h	/^				bool signal_handler_sdl_mouse_motion_entered_;$/;"	m	class:gui::event::Mouse_motion
signal_handler_sdl_wheel	client/gui/core/event/distributor.cpp	/^		void Mouse_motion::signal_handler_sdl_wheel(const event::Ui_event event, bool& handled, const Point& coordinate)$/;"	f	class:gui::event::Mouse_motion
signal_handler_show_helptip	client/gui/core/event/distributor.cpp	/^		void Mouse_motion::signal_handler_show_helptip(const event::Ui_event event, bool& handled, const Point& coordinate)$/;"	f	class:gui::event::Mouse_motion
signal_keyboard_queue_	client/gui/core/event/dispatcher.h	/^				Signal_queue<Signal_keyboard_function> signal_keyboard_queue_;$/;"	m	class:gui::event::Dispatcher
signal_message_queue_	client/gui/core/event/dispatcher.h	/^				Signal_queue<Signal_message_function> signal_message_queue_;$/;"	m	class:gui::event::Dispatcher
signal_mouse_queue_	client/gui/core/event/dispatcher.h	/^				Signal_queue<Signal_mouse_function> signal_mouse_queue_;$/;"	m	class:gui::event::Dispatcher
signal_notification_queue_	client/gui/core/event/dispatcher.h	/^				Signal_queue<Signal_notification_function> signal_notification_queue_;$/;"	m	class:gui::event::Dispatcher
signal_queue_	client/gui/core/event/dispatcher.h	/^				Signal_queue<Signal_function> signal_queue_;$/;"	m	class:gui::event::Dispatcher
signal_raw_event_queue_	client/gui/core/event/dispatcher.h	/^				Signal_queue<Signal_raw_function> signal_raw_event_queue_;$/;"	m	class:gui::event::Dispatcher
signal_text_input_queue_	client/gui/core/event/dispatcher.h	/^				Signal_queue<Signal_text_input_function> signal_text_input_queue_;$/;"	m	class:gui::event::Dispatcher
signal_touch_queue_	client/gui/core/event/dispatcher.h	/^				Signal_queue<Signal_touch_function> signal_touch_queue_;$/;"	m	class:gui::event::Dispatcher
signature	server/game/server/protocol/packet_log.cpp	/^	char signature[3];$/;"	m	struct:log_header	file:
singletion_	client/old/singleton.h	/^T* Singleton<T>::singletion_ = nullptr;$/;"	m	class:Singleton
singleton_	client/old/singleton.h	/^		static T* singleton_;$/;"	m	class:Singleton
singleton_	client/video.h	/^		static Video* singleton_;$/;"	m	class:Video
sink	server/process/pipe.h	/^	int sink;$/;"	m	struct:pipe
size	client/font/font_id.h	/^	int size;$/;"	m	struct:Font_id
size	client/old/byte_buffer.h	/^                int size() const { return write_pos_; }$/;"	f	class:Byte_buffer
size	client/serialization/unicode.cpp	/^size_t size(const std::string& str)$/;"	f	namespace:utf8
size	client/utils/json.h	/^    size_type size() const $/;"	f	class:basic_json
size	common/logging/log_message.h	/^	uint32_t size() const$/;"	f	struct:log_message
size	common/utility/util.h	/^    size_type size() const { return storage_.size(); }$/;"	f	class:tokenizer
size	server/game/server/world_tcp_socket.h	/^	uint32_t size;$/;"	m	struct:packet_header
size	server/shared/networking/ip/basic_endpoint.h	/^	std::size_t size() const { return impl_.size(); }$/;"	f	class:basic_endpoint
size	server/shared/networking/ip/endpoint.h	/^	std::size_t size() const $/;"	f	class:endpoint
size	server/shared/packets/byte_buffer.h	/^	size_t size() const { return storage_.size(); }$/;"	f	class:byte_buffer
size_for_type	server/database/database/query_result.cpp	/^static uint32_t size_for_type(MYSQL_FIELD* field)$/;"	f	file:
size_type	common/utility/message_buffer.h	/^	typedef std::vector<uint8_t>::size_type size_type;$/;"	t	class:message_buffer
size_type	common/utility/util.h	/^    typedef storage_type::size_type size_type;$/;"	t	class:tokenizer
skip	client/config.cpp	/^static T skip(const T& value)$/;"	f	file:
skip_ws	client/json.h	/^	void skip_ws() $/;"	f	class:Format::Input
sleep_for	client/thread/thread.cpp	/^void sleep_for(std::chrono::seconds s, std::chrono::nanoseconds ns)$/;"	f
sleep_for	client/thread/thread.h	/^inline void sleep_for(const std::chrono::duration<Rep, Period>& rtime)$/;"	f
sleep_until	client/thread/thread.h	/^inline void sleep_until(const std::chrono::time_point<Clock, Duration>& $/;"	f
small_buffer	common/logging/old_logging/log_buffer.h	/^constexpr int small_buffer = 4096;$/;"	m	namespace:lg
sniff_start_ticks	server/game/server/protocol/packet_log.cpp	/^	uint32_t sniff_start_ticks;$/;"	m	struct:log_header	file:
sniff_start_unixtime	server/game/server/protocol/packet_log.cpp	/^	uint32_t sniff_start_unixtime;$/;"	m	struct:log_header	file:
sniffer_id	server/game/server/protocol/packet_log.cpp	/^	uint8_t sniffer_id;$/;"	m	struct:log_header	file:
sockaddr_in4_type	server/shared/networking/socket_types.h	/^typedef sockaddr_in sockaddr_in4_type;$/;"	t
sockaddr_in6_type	server/shared/networking/socket_types.h	/^typedef sockaddr_in6 sockaddr_in6_type;$/;"	t
sockaddr_storage_type	server/shared/networking/socket_types.h	/^typedef sockaddr_storage sockaddr_storage_type;$/;"	t
socket	client/net/net_utils.cpp	/^int socket(int domain)$/;"	f	namespace:net
socket	server/shared/networking/socket.h	/^	explicit socket(int sockfd) : fd_(-1) { open(sockfd); }$/;"	f	class:socket
socket	server/shared/networking/socket.h	/^	socket() : fd_(-1) {}$/;"	f	class:socket
socket	server/shared/networking/socket.h	/^	socket(const socket& right) : fd_(right.fd_) {}$/;"	f	class:socket
socket	server/shared/networking/socket.h	/^	socket(socket&& right) : fd_(right.fd_)$/;"	f	class:socket
socket	server/shared/networking/socket.h	/^class socket$/;"	c
socket_	client/net/tcp_connection.h	/^  Scoped_ptr<Socket> socket_;$/;"	m	class:net::Tcp_connection
socket_	server/shared/networking/tcp_socket.h	/^	socket socket_;$/;"	m	class:tcp_socket
socket_added	server/shared/networking/network_thread.h	/^	virtual void socket_added(std::shared_ptr<SocketType>) {}$/;"	f	class:network_thread
socket_addr_type	server/shared/networking/socket_types.h	/^typedef sockaddr socket_addr_type;$/;"	t
socket_application_send_buffer_size_	server/game/server/world_tcp_socket_mgr.h	/^	int32_t socket_application_send_buffer_size_;$/;"	m	class:world_tcp_socket_mgr
socket_container	server/shared/networking/network_thread.h	/^	typedef std::vector<std::shared_ptr<SocketType>> socket_container;$/;"	t	class:network_thread
socket_ip_bytes	server/game/server/protocol/packet_log.cpp	/^		uint8_t socket_ip_bytes[16];$/;"	m	struct:packet_header::optional_data	file:
socket_option	server/shared/networking/socket.h	/^struct socket_option$/;"	s
socket_port	server/game/server/protocol/packet_log.cpp	/^		uint32_t socket_port;$/;"	m	struct:packet_header::optional_data	file:
socket_removed	server/shared/networking/network_thread.h	/^	virtual void socket_removed(std::shared_ptr<SocketType>) {}$/;"	f	class:network_thread
socket_system_send_buffer_size_	server/game/server/world_tcp_socket_mgr.h	/^	int32_t socket_system_send_buffer_size_;$/;"	m	class:world_tcp_socket_mgr
socket_type	server/shared/networking/socket_types.h	/^typedef int socket_type;$/;"	t
sockets_	server/shared/networking/network_thread.h	/^	socket_container sockets_;$/;"	m	class:network_thread
sockfd_	server/shared/networking/channel.h	/^	int sockfd_;$/;"	m	class:channel
sound	client/sound.cpp	/^namespace sound$/;"	n	file:
sound	client/sound.h	/^namespace sound$/;"	n
sound	client/sound_music_track.cpp	/^namespace sound$/;"	n	file:
sound	client/sound_music_track.h	/^namespace sound$/;"	n
sound_cache	client/sound.cpp	/^	std::list<Sound_cache_chunk> sound_cache;$/;"	m	namespace:__anon28	file:
sound_cache_iterator	client/sound.cpp	/^	typedef std::list<Sound_cache_chunk>::iterator sound_cache_iterator;$/;"	t	namespace:__anon28	file:
source	server/process/pipe.h	/^	int source;$/;"	m	struct:pipe
source_channel_last	client/sound.cpp	/^	constexpr size_t source_channel_last = source_channel_start + $/;"	m	namespace:__anon27	file:
source_channel_start	client/sound.cpp	/^	constexpr size_t source_channel_start = timer_channel + 1;$/;"	m	namespace:__anon27	file:
source_channels	client/sound.cpp	/^	constexpr size_t source_channels = 8;$/;"	m	namespace:__anon27	file:
source_directory_	server/database/update/update_fetcher.h	/^	const std::unique_ptr<path> source_directory_;$/;"	m	class:update_fetcher
source_rect	client/gui/core/event/message.h	/^			const SDL_Rect source_rect;$/;"	m	struct:gui::event::Message_show_tooltip
source_rect_	client/gui/core/event/message.h	/^			const SDL_Rect source_rect_;$/;"	m	struct:gui::event::Message_show_helptip
special_	client/version.h	/^		std::string special_;$/;"	m	class:Version_info
special_separator_	client/version.h	/^		char special_separator_;$/;"	m	class:Version_info
special_version	client/version.h	/^		const std::string& special_version() const { return special_; }$/;"	f	class:Version_info
special_version_separator	client/version.h	/^		char special_version_separator() const $/;"	f	class:Version_info
split	client/serialization/string_utils.cpp	/^std::vector<std::string> split(const std::string& val, char c, int flags)$/;"	f
split	common/serialization/string_utils.cpp	/^std::vector<std::string> split(const std::string& val, char c, int flags)$/;"	f
sql_	server/database/database/adhoc_statement.h	/^	const char* sql_;$/;"	m	class:basic_statement_task
sql_element_data	server/database/database/sql_operation.h	/^struct sql_element_data$/;"	s
sql_element_data_type	server/database/database/sql_operation.h	/^enum sql_element_data_type$/;"	g
sql_element_union	server/database/database/sql_operation.h	/^union sql_element_union$/;"	u
sql_operation	server/database/database/sql_operation.h	/^	sql_operation() : conn(NULL) {}$/;"	f	class:sql_operation
sql_operation	server/database/database/sql_operation.h	/^class sql_operation$/;"	c
sql_query_holder	server/database/database/query_holder.h	/^class sql_query_holder : public sql_query_holder_base$/;"	c
sql_query_holder_base	server/database/database/query_holder.h	/^	sql_query_holder_base() {}$/;"	f	class:sql_query_holder_base
sql_query_holder_base	server/database/database/query_holder.h	/^class sql_query_holder_base$/;"	c
sql_query_holder_task	server/database/database/query_holder.h	/^	sql_query_holder_task(sql_query_holder_base* holder) : holder_(holder), executed_(false) {}$/;"	f	class:sql_query_holder_task
sql_query_holder_task	server/database/database/query_holder.h	/^class sql_query_holder_task : public sql_operation$/;"	c
sql_result_set_union	server/database/database/sql_operation.h	/^union sql_result_set_union$/;"	u
srcdir	client/Makefile	/^srcdir = .$/;"	m
srcdir	client/old/Makefile	/^srcdir = .$/;"	m
staging_handlers	client/events.h	/^	        std::vector<Sdl_handler*> staging_handlers;$/;"	m	struct:events::Context
standardize_surface_froamt	client/image.cpp	/^	static void standardize_surface_froamt(Surface& surf)$/;"	f	namespace:image
start	client/net/event_loop_threadpool.cpp	/^void Event_loop_threadpool::start(const Thread_init_callback& cb)$/;"	f	class:net::Event_loop_threadpool
start	client/net/tcp_server.cpp	/^void Tcp_server::start()$/;"	f	class:net::Tcp_server
start	common/logging/old_logging/async_log.h	/^	void start()$/;"	f	class:lg::Async_log
start	server/game/server/world_tcp_socket.cpp	/^void world_tcp_socket::start()$/;"	f	class:world_tcp_socket
start	server/shared/networking/event_loop_threadpool.cpp	/^void event_loop_threadpool::start()$/;"	f	class:event_loop_threadpool
start	server/shared/networking/network_thread.h	/^	bool start()$/;"	f	class:network_thread
start	server/shared/networking/tcp_server.cpp	/^void Tcp_server::start()$/;"	f	class:net::Tcp_server
start_db	server/main.cpp	/^bool start_db()$/;"	f
start_loop	client/net/event_loop_thread.cpp	/^Event_loop* Event_loop_thread::start_loop()$/;"	f	class:net::Event_loop_thread
start_loop	server/shared/networking/event_loop_thread.cpp	/^event_loop* event_loop_thread::start_loop()$/;"	f	class:event_loop_thread
start_network	server/shared/networking/tcp_socket_mgr.h	/^	virtual bool start_network(event_loop* event_loop, const std::string& bind_ip, uint16_t port, int thread_count)$/;"	f	class:tcp_socket_mgr
start_of_period_	common/logging/old_logging/log_file.h	/^	time_t start_of_period_;$/;"	m	class:lg::Log_file
start_read	client/net/tcp_connection.cpp	/^void Tcp_connection::start_read()$/;"	f	class:net::Tcp_connection
start_read_in_loop	client/net/tcp_connection.cpp	/^void Tcp_connection::start_read_in_loop()$/;"	f	class:net::Tcp_connection
start_thread	client/thread/thread.cpp	/^void Thread::start_thread(State_ptr state, void (*)())$/;"	f	class:Thread
start_world_network	server/game/server/world_tcp_socket_mgr.cpp	/^bool world_tcp_socket_mgr::start_world_network(const std::string& bind_ip, uint16_t port, uint16_t instance_port, int thread_count)$/;"	f	class:world_tcp_socket_mgr
started	client/net/event_loop_threadpool.h	/^			bool started() const { return started_; }$/;"	f	class:net::Event_loop_threadpool
started	server/shared/networking/event_loop_threadpool.h	/^	bool started() const { return started_; }$/;"	f	class:event_loop_threadpool
started_	client/net/event_loop_threadpool.h	/^			bool started_;$/;"	m	class:net::Event_loop_threadpool
started_	client/net/tcp_server.h	/^	std::atomic<int> started_;$/;"	m	class:net::Tcp_server
started_	server/shared/networking/event_loop_threadpool.h	/^	bool started_;$/;"	m	class:event_loop_threadpool
started_	server/shared/networking/tcp_server.h	/^	std::atomic<int> started_;$/;"	m	class:net::Tcp_server
state	server/database/update/update_fetcher.cpp	/^	const state state;$/;"	m	struct:update_fetcher::directory_entry	file:
state	server/database/update/update_fetcher.h	/^	enum state$/;"	g	class:update_fetcher
state_	client/net/tcp_connection.h	/^  StateE state_;  \/\/ FIXME: use atomic variable$/;"	m	class:net::Tcp_connection
state_	server/shared/networking/channel.h	/^	state state_; \/\/ used by Poller.$/;"	m	class:channel
state_	server/shared/networking/tcp_socket.h	/^	StateE state_;  \/\/ FIXME: use atomic variable$/;"	m	class:tcp_socket
state_convert	server/database/update/update_fetcher.h	/^		static inline state state_convert(const std::string& state)$/;"	f	struct:update_fetcher::applied_file_entry
state_convert	server/database/update/update_fetcher.h	/^		static inline std::string state_convert(const state state)$/;"	f	struct:update_fetcher::applied_file_entry
state_to_string	client/net/tcp_connection.cpp	/^const char* Tcp_connection::state_to_string() const$/;"	f	class:net::Tcp_connection
state_to_string	server/shared/networking/tcp_socket.cpp	/^const char* tcp_socket::state_to_string() const$/;"	f	class:tcp_socket
statement_data_	server/database/database/prepared_statement.h	/^	std::vector<prepared_statement_data> statement_data_; \/\/ 参数缓冲区，还没有以任何方式与MySQL绑定$/;"	m	class:prepared_statement_base
statements	server/database/database/implementation/character_database.h	/^	typedef character_database_statements statements;$/;"	t	class:character_database_connection
statements	server/database/database/implementation/hotfix_database.h	/^	typedef hotfix_database_statements statements;$/;"	t	class:hotfix_database_connection
statements	server/database/database/implementation/login_database.h	/^	typedef login_database_statements statements;$/;"	t	class:login_database_connection
statements	server/database/database/implementation/world_database.h	/^	typedef world_database_statements statements;$/;"	t	class:world_database_connection
status	server/database/database/query_callback.h	/^	enum status$/;"	g	class:query_callback
status	server/game/server/protocol/opcodes.h	/^	session_status status;$/;"	m	struct:opcode_handler
std	client/color.h	/^namespace std$/;"	n
std	client/image.cpp	/^namespace std$/;"	n	file:
stmt	server/database/database/sql_operation.h	/^	prepared_statement_base* stmt;$/;"	m	union:sql_element_union
stmt_	server/database/database/mysql_prepared_statement.h	/^	MYSQL_STMT* stmt_;$/;"	m	class:mysql_prepared_statement
stmt_	server/database/database/prepared_statement.h	/^	mysql_prepared_statement* stmt_;$/;"	m	class:prepared_statement_base
stmt_	server/database/database/prepared_statement.h	/^	prepared_statement_base* stmt_;$/;"	m	class:prepared_statement_task
stmt_	server/database/database/query_result.h	/^	MYSQL_STMT* stmt_;$/;"	m	class:prepared_result_set
stmts_	server/database/database/mysql_connection.h	/^	std::vector<std::unique_ptr<mysql_prepared_statement>> stmts_; \/\/ 准备好的声明存储$/;"	m	class:mysql_connection
stop	common/logging/old_logging/async_log.h	/^	void stop()$/;"	f	class:lg::Async_log
stop	server/shared/networking/network_thread.h	/^	void stop()$/;"	f	class:network_thread
stop_	client/old/threadpool.h	/^		bool stop_;$/;"	m	class:Threadpool
stop_network	server/shared/networking/tcp_socket_mgr.h	/^	virtual void stop_network()$/;"	f	class:tcp_socket_mgr
stop_read	client/net/tcp_connection.cpp	/^void Tcp_connection::stop_read()$/;"	f	class:net::Tcp_connection
stop_read_in_loop	client/net/tcp_connection.cpp	/^void Tcp_connection::stop_read_in_loop()$/;"	f	class:net::Tcp_connection
stopped_	server/shared/networking/network_thread.h	/^	std::atomi<bool> stopped_;$/;"	m	class:network_thread
storage_	common/utility/message_buffer.h	/^	std::vector<uint8_t> storage_;$/;"	m	class:message_buffer
storage_	common/utility/util.h	/^    storage_type storage_;$/;"	m	class:tokenizer
storage_	server/shared/packets/byte_buffer.h	/^	std::vector<uint8_t> storage_;$/;"	m	class:byte_buffer
storage_type	common/utility/util.h	/^    typedef std::vector<char const*> storage_type;$/;"	t	class:tokenizer
storages_	client/old/byte_buffer.h	/^		std::string storages_;$/;"	m	class:Byte_buffer
store	common/cmdline/variables_map.cpp	/^void store(const std::vector<option>& options, variables_map& vm)$/;"	f
str	client/version.cpp	/^std::string Version_info::str() const$/;"	f	class:Version_info
str_	client/font/text_surface.h	/^		std::string str_;$/;"	m	class:Text_surface
str_	client/log.h	/^			std::string str_;$/;"	m	class:lg::Scope_logger
str_	common/utility/util.h	/^    char* str_;$/;"	m	class:tokenizer
str_to_family_class	client/font/font_options.h	/^	inline Family_class str_to_family_class(const std::string& str)$/;"	f	namespace:font
strerror_tl	common/logging/old_logging/logging.cpp	/^const char* strerror_tl(int saved_errno)$/;"	f	namespace:lg
strict_level	client/log.cpp	/^	static int strict_level = -1;$/;"	m	namespace:lg	file:
strict_threw	client/log.cpp	/^	static bool strict_threw = false;$/;"	m	namespace:lg	file:
string	client/json.h	/^		std::string *string;$/;"	m	union:Format::Value::Storage
string	client/json.h	/^	string,$/;"	m	class:Type
string	client/utils/json.h	/^	string, $/;"	m	class:value_t
string	client/utils/json.h	/^        string_t* string;$/;"	m	union:basic_json::json_value
string	server/database/database/query_callback.cpp	/^		std::function<void(query_callback&, query_result)> string;$/;"	m	union:query_callback::query_callback_data::__anon3	file:
string	server/database/database/query_callback.h	/^		query_result_future string;$/;"	m	union:query_callback::__anon1
string_end_	client/serialization/ucs4_iterator_base.h	/^		        typename String_type::const_iterator string_end_;$/;"	m	class:ucs4::Iterator_base
string_format	client/serialization/string_utils.h	/^std::string string_format(const std::string& fmt, Args&&... args)$/;"	f
string_format	common/utility/string_format.h	/^inline std::string string_format(const std::string& fmt, Args&&... args)$/;"	f
style	client/font/font_id.h	/^	int style;$/;"	m	struct:Font_id
style	client/font/sdl_ttf.cpp	/^	int style;$/;"	m	struct:TTF_record	file:
style_	client/font/text_surface.h	/^		int style_;$/;"	m	class:Text_surface
style_parser	common/cmdline/cmdline.h	/^	typedef std::function<std::vector<option>(std::vector<std::string>&)> style_parser;$/;"	t	class:cmdline
subdir	client/Makefile	/^subdir = src$/;"	m
subdir	client/old/Makefile	/^subdir = src$/;"	m
sublayouts_	client/font/text.h	/^				std::function<void(void*)>>> sublayouts_;$/;"	m	class:font::Pango_text
subset	client/font/font_id.h	/^	Subset_id subset;$/;"	m	struct:Font_id
subset	client/font/font_id.h	/^	Subset_id subset;$/;"	m	struct:Text_chunk
substr	client/serialization/ucs4_iterator_base.h	/^			          typename String_type::const_iterator>& substr() const$/;"	f	class:ucs4::Iterator_base
suffix_object	client/config.cpp	/^void Config::suffix_object(Config::Node* prev, Config::Node* item)$/;"	f	class:Config
surface_	client/font/text.h	/^			mutable Surface surface_;$/;"	m	class:font::Pango_text
surface_	client/sdl/surface.h	/^		SDL_Surface* surface_;$/;"	m	class:Surface
surface_buffer_	client/font/text.cpp	/^		, length_(0), surface_dirty_(true), surface_buffer_()$/;"	f	namespace:font
surface_buffer_	client/font/text.h	/^			mutable std::vector<uint8_t> surface_buffer_;$/;"	m	class:font::Pango_text
surface_dirty_	client/font/text.h	/^			mutable bool surface_dirty_;$/;"	m	class:font::Pango_text
surfs_	client/font/text_surface.h	/^		mutable std::vector<Surface> surfs_;$/;"	m	class:Text_surface
swap	client/json.h	/^	void swap(Value &x)$/;"	f	class:Format::Value
swap	client/net/buffer.h	/^	void swap(Buffer& rhs)$/;"	f	class:net::Buffer
swap	client/thread/mutex.h	/^		void swap(Unique_lock& u)$/;"	f	class:Unique_lock
swap	client/thread/mutex.h	/^inline void swap(Unique_lock<Mutex>& x, Unique_lock<Mutex>& y)$/;"	f
swap	client/thread/thread.h	/^		void swap(Thread& t) { std::swap(id_, t.id_); }$/;"	f	class:Thread
swap	client/thread/thread.h	/^inline void swap(Thread& l, Thread& r) { l.swap(r); }$/;"	f
swap	client/utils/json.h	/^    void swap(array_t& other)$/;"	f	class:basic_json
swap	client/utils/json.h	/^    void swap(object_t& other)$/;"	f	class:basic_json
swap	client/utils/json.h	/^    void swap(string_t& other)$/;"	f	class:basic_json
swap	common/utility/timestamp.h	/^	void swap(Timestamp& other)$/;"	f	class:Timestamp
sync_process_queue	server/shared/networking/tcp_socket.cpp	/^bool tcp_socket::sync_process_queue()$/;"	f	class:tcp_socket
synch_threads_	server/database/database/database_worker_pool.h	/^	uint8_t synch_threads_;$/;"	m	class:database_worker_pool
sys	common/utility/system_info.cpp	/^namespace sys$/;"	n	file:
sys	common/utility/system_info.h	/^namespace sys$/;"	n
sysconfdir	client/Makefile	/^sysconfdir = ${prefix}\/etc$/;"	m
sysconfdir	client/old/Makefile	/^sysconfdir = ${prefix}\/etc$/;"	m
t	client/thread/thread.h	/^			T t;$/;"	m	struct:Thread::Invoker
t_lastSecond	common/logging/old_logging/logging.cpp	/^__thread time_t t_lastSecond;$/;"	m	namespace:__anon15	file:
table_id	client/old/packet.h	/^			int		table_id;$/;"	m	union:Packet::Params
tag	server/game/server/world_tcp_socket.h	/^	uint8_t* tag[12];$/;"	m	struct:packet_header
target_alias	client/Makefile	/^target_alias = $/;"	m
target_alias	client/old/Makefile	/^target_alias = $/;"	m
tasks_	client/old/threadpool.h	/^		std::queue<std::function<void()>> tasks_;$/;"	m	class:Threadpool
tcp	server/shared/networking/ip/tcp.h	/^	explicit tcp(int protocol_family) : family_(protocol_family) {}$/;"	f	class:tcp
tcp	server/shared/networking/ip/tcp.h	/^class tcp$/;"	c
tcp_no_delay	server/shared/networking/socket.cpp	/^socket_option option::tcp_no_delay() $/;"	f	class:option
tcp_no_delay_	server/game/server/world_tcp_socket_mgr.h	/^	bool tcp_no_delay_;$/;"	m	class:world_tcp_socket_mgr
tcp_socket	server/shared/networking/tcp_socket.cpp	/^tcp_socket::tcp_socket(event_loop* loop, socket&& sockfd) :$/;"	f	class:tcp_socket
tcp_socket	server/shared/networking/tcp_socket.h	/^class tcp_socket : public std::enable_shared_from_this<tcp_socket>$/;"	c
tcp_socket_mgr	server/shared/networking/tcp_socket_mgr.h	/^	tcp_socket_mgr() : acceptor_(nullptr), threads_(nullptr), thread_count_(0) {}$/;"	f	class:tcp_socket_mgr
tcp_socket_mgr	server/shared/networking/tcp_socket_mgr.h	/^class tcp_socket_mgr$/;"	c
tcp_socket_ptr	server/shared/networking/tcp_socket.h	/^typedef std::shared_ptr<tcp_socket> tcp_socket_ptr;$/;"	t
test_scenario_	client/game_launcher.h	/^		std::string test_scenario_;$/;"	m	class:Game_launcher
text	client/font/font_id.h	/^	std::string text;$/;"	m	struct:Text_chunk
text	client/font/text.h	/^			const std::string& text() const { return text_; }$/;"	f	class:font::Pango_text
text	common/logging/log_message.h	/^	const std::string text;$/;"	m	struct:log_message
text_	client/font/text.h	/^			std::string text_;$/;"	m	class:font::Pango_text
text_	client/hotkey/hotkey_item.h	/^			std::string text_;$/;"	m	class:hotkey::Hotkey_keyboard
text_editing	client/gui/core/event/handler.cpp	/^		void Sdl_event_handler::text_editing(const std::string& unicode, int32_t start, int32_t len)$/;"	f	class:gui::event::Sdl_event_handler
text_input	client/gui/core/event/handler.cpp	/^		void Sdl_event_handler::text_input(const std::string& unicode)$/;"	f	class:gui::event::Sdl_event_handler
text_list	client/font/text_cache.h	/^		typedef std::list<Text_surface> text_list;$/;"	t	class:Text_cache
textlike	server/shared/packets/byte_buffer.cpp	/^void byte_buffer::textlike() const$/;"	f	class:byte_buffer
texture_	client/sdl/texture.h	/^		std::shared_ptr<SDL_Texture> texture_;$/;"	m	class:Texture
this_thread_id	common/utility/util.cpp	/^inline long this_thread_id()$/;"	f
thread_	client/net/event_loop_thread.h	/^	std::thread* thread_;$/;"	m	class:net::Event_loop_thread
thread_	client/thread/thread.h	/^				Native_handle_type thread_;$/;"	m	class:Thread::Id
thread_	common/logging/old_logging/async_log.h	/^	std::unique_ptr<std::thread> thread_;$/;"	m	class:lg::Async_log
thread_	server/shared/networking/event_loop_thread.h	/^	std::unique_ptr<std::thread> thread_;$/;"	m	class:event_loop_thread
thread_	server/shared/networking/network_thread.h	/^	std::thread* thread_;$/;"	m	class:network_thread
thread_count_	server/shared/networking/tcp_socket_mgr.h	/^	int32_t thread_count_;$/;"	m	class:tcp_socket_mgr
thread_func	client/net/event_loop_thread.cpp	/^void Event_loop_thread::thread_func()$/;"	f	class:net::Event_loop_thread
thread_func	common/logging/old_logging/async_log.cpp	/^void Async_log::thread_func()$/;"	f	class:lg::Async_log
thread_func	server/shared/networking/event_loop_thread.cpp	/^void event_loop_thread::thread_func()$/;"	f	class:event_loop_thread
thread_id	common/logging/log_message.h	/^	long thread_id;$/;"	m	struct:log_message
thread_id_	client/net/event_loop.h	/^  	const pid_t thread_id_;$/;"	m	class:net::Event_loop
thread_id_	server/shared/networking/event_loop.h	/^  	const long thread_id_;$/;"	m	class:event_loop
thread_init_callback_	client/net/tcp_server.h	/^	Thread_init_callback thread_init_callback_;$/;"	m	class:net::Tcp_server
thread_init_callback_	server/shared/networking/tcp_server.h	/^	Thread_init_callback thread_init_callback_;$/;"	m	class:net::Tcp_server
thread_pool	client/net/tcp_server.h	/^	std::shared_ptr<Event_loop_threadpool> thread_pool()$/;"	f	class:net::Tcp_server
thread_pool	server/shared/networking/tcp_server.h	/^	std::shared_ptr<Event_loop_threadpool> thread_pool()$/;"	f	class:net::Tcp_server
thread_pool_	client/net/tcp_server.h	/^	std::shared_ptr<Event_loop_threadpool> thread_pool_;$/;"	m	class:net::Tcp_server
thread_pool_	server/shared/networking/tcp_server.h	/^	std::shared_ptr<Event_loop_threadpool> thread_pool_;$/;"	m	class:net::Tcp_server
threads_	client/net/event_loop_threadpool.h	/^			std::vector<std::unique_ptr<Event_loop_thread>> threads_;$/;"	m	class:net::Event_loop_threadpool
threads_	server/shared/networking/event_loop_threadpool.h	/^	std::vector<std::unique_ptr<event_loop_thread>> threads_;$/;"	m	class:event_loop_threadpool
threads_	server/shared/networking/tcp_socket_mgr.h	/^	network_thread<SocketType> threads_;$/;"	m	class:tcp_socket_mgr
ticks	client/events.cpp	/^        int Pump_info::ticks(unsigned* refresh_counter, $/;"	f	class:events::Pump_info
ticks_	client/events.h	/^		        int ticks_; \/\/ 0 if not calculated$/;"	m	struct:events::Pump_info
ticks_	client/log.h	/^			std::chrono::time_point<std::chrono::system_clock> ticks_;$/;"	m	class:lg::Scope_logger
tie	client/net/channel.cpp	/^void Channel::tie(const std::shared_ptr<void>& obj)$/;"	f	class:net::Channel
tie_	client/net/channel.h	/^	std::weak_ptr<void> tie_;$/;"	m	class:net::Channel
tied_	client/net/channel.h	/^	bool tied_;$/;"	m	class:net::Channel
time_difference	common/utility/timestamp.h	/^inline double time_difference(Timestamp high, Timestamp low)$/;"	f
timeout	client/old/server.h	/^	uint32_t timeout;$/;"	m	struct:Descriptor
timeout_secs_	client/old/server.h	/^		uint32_t timeout_secs_;$/;"	m	class:Server
timer	server/shared/networking/timer.h	/^	timer(const Timer_callback& cb, Timestamp when, double interval) :$/;"	f	class:timer
timer	server/shared/networking/timer.h	/^class timer$/;"	c
timer_	client/net/timer.h	/^	Timer* timer_;$/;"	m	class:net::Timer_id
timer_	server/shared/networking/timer.h	/^	timer* timer_;$/;"	m	class:timer_id
timer_channel	client/sound.cpp	/^	constexpr size_t timer_channel = 1;$/;"	m	namespace:__anon27	file:
timer_id	server/shared/networking/timer.h	/^	explicit timer_id(timer* timer, int64_t sequence) : $/;"	f	class:timer_id
timer_id	server/shared/networking/timer.h	/^	timer_id() : timer_(nullptr), sequence_(0) {}$/;"	f	class:timer_id
timer_id	server/shared/networking/timer.h	/^class timer_id$/;"	c
timer_queue	server/shared/networking/timer_queue.cpp	/^timer_queue::timer_queue(event_loop* loop) :$/;"	f	class:timer_queue
timer_queue	server/shared/networking/timer_queue.h	/^class timer_queue$/;"	c
timer_queue_	client/net/event_loop.h	/^  	Scoped_ptr<Timer_queue> timer_queue_;$/;"	m	class:net::Event_loop
timer_queue_	server/shared/networking/event_loop.h	/^  	std::unique_ptr<timer_queue> timer_queue_;$/;"	m	class:event_loop
timerfd_	client/net/timer_queue.h	/^	const int timerfd_;$/;"	m	class:net::Timer_queue
timerfd_	server/shared/networking/timer_queue.h	/^	const int timerfd_;$/;"	m	class:timer_queue
timerfd_channel_	client/net/timer_queue.h	/^	Channel timerfd_channel_;$/;"	m	class:net::Timer_queue
timerfd_channel_	server/shared/networking/timer_queue.h	/^	channel timerfd_channel_;$/;"	m	class:timer_queue
timers_	client/net/timer_queue.h	/^	Timer_list timers_;$/;"	m	class:net::Timer_queue
timers_	server/shared/networking/timer_queue.h	/^	Timer_list timers_;$/;"	m	class:timer_queue
timestamp	client/log.cpp	/^static bool timestamp = true;$/;"	v	file:
timestamp	server/database/update/update_fetcher.h	/^		const uint64_t timestamp;$/;"	m	struct:update_fetcher::applied_file_entry
timestamps	client/log.cpp	/^	void timestamps(bool t) { timestamp = t; }$/;"	f	namespace:lg
tips	client/tooltips.cpp	/^std::map<int, Tooltip> tips;$/;"	v
title	client/sound_music_track.h	/^			const std::string& title() const { return title_; }$/;"	f	class:sound::Music_track
title_	client/sound_music_track.h	/^			std::string title_;$/;"	m	class:sound::Music_track
tlp	common/configuration/config.h	/^namespace tlp$/;"	n
to_argb_bytes	client/color.h	/^	uint32_t to_argb_bytes() const$/;"	f	struct:Color
to_bson	client/utils/json.h	/^    static std::vector<uint8_t> to_bson(const basic_json& j)$/;"	f	class:basic_json
to_bson	client/utils/json.h	/^    static void to_bson(const basic_json& j, detail::output_adapter<char> o)$/;"	f	class:basic_json
to_bson	client/utils/json.h	/^    static void to_bson(const basic_json& j, detail::output_adapter<uint8_t> o)$/;"	f	class:basic_json
to_bytes	server/shared/networking/ip/address_v4.cpp	/^address_v4::bytes_type address_v4::to_bytes() const $/;"	f	class:address_v4
to_bytes	server/shared/networking/ip/address_v6.cpp	/^address_v6::bytes_type address_v6::to_bytes() const $/;"	f	class:address_v6
to_cbor	client/utils/json.h	/^    static std::vector<uint8_t> to_cbor(const basic_json& j)$/;"	f	class:basic_json
to_cbor	client/utils/json.h	/^    static void to_cbor(const basic_json& j, detail::output_adapter<char> o)$/;"	f	class:basic_json
to_cbor	client/utils/json.h	/^    static void to_cbor(const basic_json& j, detail::output_adapter<uint8_t> o)$/;"	f	class:basic_json
to_formatted_string	common/utility/timestamp.cpp	/^std::string Timestamp::to_formatted_string(bool show_microseconds) const$/;"	f	class:Timestamp
to_hex_string	client/color.cpp	/^std::string Color::to_hex_string() const$/;"	f	class:Color
to_ip_port	client/net/inet_address.cpp	/^	std::string Inet_address::to_ip_port() const$/;"	f	class:net::Inet_address
to_msgpack	client/utils/json.h	/^    static std::vector<uint8_t> to_msgpack(const basic_json& j)$/;"	f	class:basic_json
to_msgpack	client/utils/json.h	/^    static void to_msgpack(const basic_json& j, detail::output_adapter<char> o)$/;"	f	class:basic_json
to_msgpack	client/utils/json.h	/^    static void to_msgpack(const basic_json& j, detail::output_adapter<uint8_t> o)$/;"	f	class:basic_json
to_port	client/net/inet_address.cpp	/^	uint16_t Inet_address::to_port() const$/;"	f	class:net::Inet_address
to_rgb_string	client/color.cpp	/^std::string Color::to_rgb_string() const$/;"	f	class:Color
to_rgba_bytes	client/color.h	/^	uint32_t to_rgba_bytes() const$/;"	f	struct:Color
to_rgba_string	client/color.cpp	/^std::string Color::to_rgba_string() const$/;"	f	class:Color
to_str	client/json.h	/^	std::string to_str() const$/;"	f	class:Format::Value
to_string	client/net/buffer.h	/^	std::string to_string() const$/;"	f	class:net::Buffer
to_string	client/net/inet_address.cpp	/^	std::string Inet_address::to_string() const$/;"	f	class:net::Inet_address
to_string	common/logging/old_logging/log_buffer.h	/^	std::string to_string() const { return string(data_, length()); }$/;"	f	class:lg::Log_buffer
to_string	common/utility/timestamp.cpp	/^std::string Timestamp::to_string() const$/;"	f	class:Timestamp
to_string	server/shared/networking/ip/address.cpp	/^std::string address::to_string() const$/;"	f	class:address
to_string	server/shared/networking/ip/address_v4.cpp	/^std::string address_v4::to_string() const$/;"	f	class:address_v4
to_string	server/shared/networking/ip/address_v6.cpp	/^std::string address_v6::to_string() const$/;"	f	class:address_v6
to_string	server/shared/networking/ip/endpoint.cpp	/^std::string endpoint::to_string() const$/;"	f	class:endpoint
to_ubjson	client/utils/json.h	/^    static std::vector<uint8_t> to_ubjson(const basic_json& j,$/;"	f	class:basic_json
to_ubjson	client/utils/json.h	/^    static void to_ubjson(const basic_json& j, detail::output_adapter<char> o,$/;"	f	class:basic_json
to_ubjson	client/utils/json.h	/^    static void to_ubjson(const basic_json& j, detail::output_adapter<uint8_t> o,$/;"	f	class:basic_json
to_uint	server/shared/networking/ip/address_v4.cpp	/^address_v4::uint_type address_v4::to_uint() const $/;"	f	class:address_v4
to_v4	server/shared/networking/ip/address.cpp	/^address_v4 address::to_v4() const$/;"	f	class:address
to_v6	server/shared/networking/ip/address.cpp	/^address_v6 address::to_v6() const$/;"	f	class:address
to_window	client/sdl/window.cpp	/^void Window::to_window()$/;"	f	class:Window
tod_colored	client/image.h	/^	enum Img_type{unscaled, scaled_to_zoom, hexed, scaled_to_hex, tod_colored, brightened};$/;"	e	enum:image::Img_type
tod_colored_imaged_	client/image.cpp	/^		tod_colored_imaged_,$/;"	m	namespace:__anon32	file:
toggle	client/hotkey/hotkey_command.h	/^		bool toggle;$/;"	m	struct:hotkey::Hotkey_command
tokenizer	common/utility/util.cpp	/^tokenizer::tokenizer(const std::string &src, const char sep, uint32_t vector_reserve \/*= 0*\/, bool keep_empty_strings \/*= true*\/)$/;"	f	class:tokenizer
tokenizer	common/utility/util.h	/^class tokenizer$/;"	c
too_many_parameters	client/cmdln.h	/^			too_many_parameters,$/;"	m	class:Commandline::Parse_status
tooltip	client/hotkey/hotkey_command.h	/^		std::string tooltip;$/;"	m	struct:hotkey::Hotkey_command
tooltip	client/hotkey/hotkey_command.h	/^		std::string tooltip;$/;"	m	struct:hotkey::Hotkey_command_temp
tooltip_handle	client/tooltips.cpp	/^int tooltip_handle = 0;$/;"	v
tooltip_id	client/tooltips.cpp	/^int tooltip_id = 0;$/;"	v
top_build_prefix	client/Makefile	/^top_build_prefix = ..\/$/;"	m
top_build_prefix	client/old/Makefile	/^top_build_prefix = ..\/$/;"	m
top_builddir	client/Makefile	/^top_builddir = ..$/;"	m
top_builddir	client/old/Makefile	/^top_builddir = ..$/;"	m
top_srcdir	client/Makefile	/^top_srcdir = ..$/;"	m
top_srcdir	client/old/Makefile	/^top_srcdir = ..$/;"	m
track_ok	client/sound.cpp	/^static bool track_ok(const std::string& id)$/;"	f	file:
trans_	server/database/database/transaction.h	/^	std::shared_ptr<transaction_base> trans_;$/;"	m	class:transaction_task
transaction	server/database/database/transaction.h	/^class transaction : public transaction_base$/;"	c
transaction_base	server/database/database/transaction.h	/^	transaction_base() : cleaned_up_(false) {}$/;"	f	class:transaction_base
transaction_base	server/database/database/transaction.h	/^class transaction_base$/;"	c
transaction_task	server/database/database/transaction.h	/^	transaction_task(std::shared_ptr<transaction_base> trans) : trans_(trans) {}$/;"	f	class:transaction_task
transaction_task	server/database/database/transaction.h	/^class transaction_task : public sql_operation$/;"	c
transform	client/Makefile	/^transform = $(program_transform_name)$/;"	m
transform	client/old/Makefile	/^transform = $(program_transform_name)$/;"	m
translate_seekdir	client/filesystem.cpp	/^	static Offset_dir translate_seekdir(int64_t offset, int whence)$/;"	f	namespace:filesystem
trim	client/serialization/string_utils.cpp	/^void trim(std::string& str)$/;"	f
trim	common/serialization/string_utils.cpp	/^void trim(std::string& str)$/;"	f
trim_escape_chars	client/cmdln.cpp	/^static void trim_escape_chars(std::string& str)$/;"	f	file:
truncate	client/serialization/unicode.cpp	/^std::string& truncate(std::string& str, size_t size)$/;"	f	namespace:utf8
truncate_as_ucs4	client/serialization/unicode.cpp	/^void truncate_as_ucs4(utf8::String& str, const size_t size)$/;"	f	namespace:utf8
try_lock	client/thread/mutex.h	/^		bool try_lock()$/;"	f	class:Mutex
try_lock	client/thread/mutex.h	/^		bool try_lock()$/;"	f	class:Unique_lock
try_lock_for	client/thread/mutex.h	/^		bool try_lock_for(const std::chrono::duration<Rep, Period>& rtime)$/;"	f	class:Unique_lock
try_lock_until	client/thread/mutex.h	/^		bool try_lock_until($/;"	f	class:Unique_lock
type	client/config.h	/^			Type type;$/;"	m	struct:Config::Node
type	client/image.h	/^				Type type;$/;"	m	struct:image::Locator::Value
type	client/thread/thread.h	/^	typedef Index_tuple<0> type;$/;"	t	struct:Build_index_tuple
type	client/thread/thread.h	/^	typedef Index_tuple<> type;$/;"	t	struct:Build_index_tuple
type	client/utils/json.h	/^    constexpr value_t type() const { return type_; }$/;"	f	class:basic_json
type	common/logging/log_message.h	/^	const std::string type;$/;"	m	struct:log_message
type	server/database/database/field.h	/^		database_field_type type;$/;"	m	struct:field::__anon2
type	server/database/database/prepared_statement.h	/^	prepared_statement_value_type type;$/;"	m	struct:prepared_statement_data
type	server/database/database/sql_operation.h	/^	sql_element_data_type type;$/;"	m	struct:sql_element_data
type	server/shared/networking/ip/tcp.h	/^	int type() const { return SOCK_STREAM; }$/;"	f	class:tcp
type	server/shared/networking/ip/udp.h	/^	int type() const { return SOCK_DGRAM; }$/;"	f	class:udp
typeIndex	server/database/logging/appender_DB.h	/^        typedef std::integral_constant<appenderType, APPENDER_DB>::type typeIndex;$/;"	t	class:appender_DB
type_	client/json.h	/^	int type_;$/;"	m	class:Format::Value
type_	client/utils/json.h	/^    value_t type_ = value_t::null;$/;"	m	class:basic_json
type_	server/game/server/world_tcp_socket.h	/^	connection_type type_;$/;"	m	class:world_tcp_socket::read_data_handler_result
type_	server/shared/networking/ip/address.h	/^	enum { ipv4, ipv6 } type_;$/;"	m	class:address	typeref:enum:address::__anon7
type_index	common/logging/appender_console.h	/^	typedef std::integral_constant<appender_type, APPENDER_CONSOLE>::type type_index;$/;"	t	class:appender_console
type_index	common/logging/appender_file.h	/^	typedef std::integral_constant<appender_type, APPENDER_FILE>::type type_index;$/;"	t	class:appender_file
type_name	client/utils/json.h	/^    const char* type_name() const $/;"	f	class:basic_json
u_	client/json.h	/^	Storage u_;$/;"	m	class:Format::Value
ucs4	client/serialization/ucs4_iterator_base.h	/^namespace ucs4$/;"	n
ucs4	client/serialization/unicode_type.h	/^namespace ucs4$/;"	n
ucs4_convert_impl	client/serialization/ucs4_convert_impl.h	/^namespace ucs4_convert_impl$/;"	n
ucs4_convert_impl	client/serialization/unicode_cast.h	/^namespace ucs4_convert_impl$/;"	n
udp	server/shared/networking/ip/udp.h	/^	explicit udp(int protocol_family) : family_(protocol_family) {}$/;"	f	class:udp
udp	server/shared/networking/ip/udp.h	/^class udp$/;"	c
uint16	common/define.h	/^typedef uint16_t uint16;$/;"	t
uint16	server/database/database/prepared_statement.h	/^	uint16_t uint16;$/;"	m	union:prepared_statement_data_union
uint16_t	server/game/server/protocol/opcodes.h	/^enum opcode_client : uint16_t$/;"	g
uint16_t	server/game/server/protocol/opcodes.h	/^enum opcode_misc : uint16_t$/;"	g
uint16_t	server/game/server/protocol/opcodes.h	/^enum opcode_server : uint16_t$/;"	g
uint32	common/define.h	/^typedef uint32_t uint32;$/;"	t
uint32	server/database/database/prepared_statement.h	/^	uint32_t uint32;$/;"	m	union:prepared_statement_data_union
uint32_t	server/database/database/implementation/character_database.h	/^enum character_database_statements : uint32_t$/;"	g
uint32_t	server/database/database/implementation/hotfix_database.h	/^enum hotfix_database_statements : uint32_t$/;"	g
uint32_t	server/database/database/implementation/login_database.h	/^enum login_database_statements : uint32_t$/;"	g
uint32_t	server/database/database/implementation/world_database.h	/^enum world_database_statements : uint32_t$/;"	g
uint64	common/define.h	/^typedef uint64_t uint64;$/;"	t
uint64	server/database/database/prepared_statement.h	/^	uint64_t uint64;$/;"	m	union:prepared_statement_data_union
uint8	common/define.h	/^typedef uint8_t uint8;$/;"	t
uint8	server/database/database/prepared_statement.h	/^	uint8_t uint8;$/;"	m	union:prepared_statement_data_union
uint8_t	common/logging/appender_console.h	/^enum color_types : uint8_t$/;"	g
uint8_t	common/logging/log_common.h	/^enum appender_type : uint8_t$/;"	g
uint_type	server/shared/networking/ip/address_v4.h	/^	typedef uint32_t uint_type;$/;"	t	class:address_v4
unborrow	client/old/connection_pool.h	/^		void unborrow(MYSQL* conn)$/;"	f	class:Connection_pool
unborrow	client/old/mysql_pool.cpp	/^	void Connection_pool::unborrow(Database* db)$/;"	f	class:db::Connection_pool
uncompressed_adler	server/game/server/world_tcp_socket.cpp	/^	uint32_t uncompressed_adler;$/;"	m	struct:compressed_world_packet	file:
uncompressed_size	server/game/server/world_tcp_socket.cpp	/^	uint32_t uncompressed_size;$/;"	m	struct:compressed_world_packet	file:
underflow	client/cmdln.h	/^			underflow,$/;"	m	class:Commandline::Param_value_status
underflow	client/cmdln.h	/^			underflow,$/;"	m	class:Commandline::Value_status
underlying_stream	server/shared/networking/tcp_socket.h	/^	socket& underlying_stream() { return socket_; }$/;"	f	class:tcp_socket
unflatten	client/utils/json.h	/^    basic_json unflatten() const$/;"	f	class:basic_json
ungetc	client/json.h	/^	void ungetc() {  consumed_ = false; }$/;"	f	class:Format::Input
unicode_bullet	client/font/constants.h	/^		unicode_bullet = ".",$/;"	v
unicode_cast	client/serialization/unicode_cast.h	/^	unicode_cast(const S& source)$/;"	f
unicode_cast	client/serialization/unicode_cast.h	/^D unicode_cast(ucs4::Char onechar)$/;"	f
unicode_em_dash	client/font/constants.h	/^		unicode_em_dash = "-",$/;"	v
unicode_en_dash	client/font/constants.h	/^		unicode_en_dash = "_",$/;"	v
unicode_figure_dash	client/font/constants.h	/^		unicode_figure_dash = "-",$/;"	v
unicode_minus	client/font/constants.h	/^	        unicode_minus = "-",$/;"	v
unicode_multiplication_sign	client/font/constants.h	/^		unicode_multiplication_sign = "x",$/;"	v
union_rects	client/sdl/rect.cpp	/^SDL_Rect union_rects(SDL_Rect const& rect1, SDL_Rect const& rect2)$/;"	f
unknown_option	client/cmdln.h	/^			unknown_option,$/;"	m	class:Commandline::Parse_status
unload_music	client/sound.cpp	/^	bool unload_music = false;$/;"	m	namespace:__anon27	file:
unlock	client/thread/mutex.h	/^		void unlock()$/;"	f	class:Mutex
unlock	client/thread/mutex.h	/^		void unlock()$/;"	f	class:Unique_lock
unlock	server/database/database/mysql_connection.cpp	/^void mysql_connection::unlock()$/;"	f	class:mysql_connection
unpack_column_values	client/cmdln.cpp	/^void Commandline::unpack_column_values(const int value, $/;"	f	class:Commandline
unscaled	client/image.h	/^	enum Img_type{unscaled, scaled_to_zoom, hexed, scaled_to_hex, tod_colored, brightened};$/;"	e	enum:image::Img_type
unset_default	client/hotkey/hotkey_item.h	/^			void unset_default() { is_defualt_ = false; }$/;"	f	class:hotkey::Hotkey_base
unwrite	client/net/buffer.h	/^	void unwrite(size_t len)$/;"	f	class:net::Buffer
update	client/net/channel.cpp	/^void Channel::update()$/;"	f	class:net::Channel
update	client/net/poller.cpp	/^void Poller::update(int operation, Channel* channel)$/;"	f	class:net::Poller
update	client/serialization/ucs4_iterator_base.h	/^		        void update()$/;"	f	class:ucs4::Iterator_base
update	client/utils/json.h	/^    void update(const_iterator first, const_iterator last)$/;"	f	class:basic_json
update	client/utils/json.h	/^    void update(const_reference j)$/;"	f	class:basic_json
update	server/database/update/db_update.cpp	/^bool db_updater<T>::update(database_worker_pool<T>& pool)$/;"	f	class:db_updater
update	server/database/update/update_fetcher.cpp	/^update_result update_fetcher::update(const bool redumdancy_checks,$/;"	f	class:update_fetcher
update	server/game/server/world_tcp_socket.cpp	/^bool world_tcp_socket::update()$/;"	f	class:world_tcp_socket
update	server/shared/networking/channel.cpp	/^void channel::update()$/;"	f	class:channel
update	server/shared/networking/epoll.cpp	/^void epoll::update(int operation, channel* channel)$/;"	f	class:epoll
update	server/shared/networking/network_thread.h	/^	void update()$/;"	f	class:network_thread
update_	server/database/database/database_loader.h	/^	std::queue<predicate_func> update_;$/;"	m	class:database_loader
update_channel	client/net/event_loop.cpp	/^void Event_loop::update_channel(Channel* channel)$/;"	f	class:net::Event_loop
update_channel	client/net/poller.cpp	/^void Poller::update_channel(Channel* channel)$/;"	f	class:net::Poller
update_channel	server/shared/networking/epoll.cpp	/^void epoll::update_channel(channel* channel)$/;"	f	class:epoll
update_channel	server/shared/networking/event_loop.cpp	/^void event_loop::update_channel(channel* channel)$/;"	f	class:event_loop
update_data	client/old/database.cpp	/^	bool update_data(MYSQL* mysql, const std::string& sql)$/;"	f	namespace:db
update_databases	server/database/database/database_loader.cpp	/^bool database_loader::update_databases()$/;"	f	class:database_loader
update_entry	server/database/update/update_fetcher.cpp	/^void update_fetcher::update_entry(const applied_file_entry& entry, const uint32_t speed) const$/;"	f	class:update_fetcher
update_exception	server/database/update/db_update.h	/^	update_exception(const std::string& msg) : msg_(msg) {}$/;"	f	class:update_exception
update_exception	server/database/update/db_update.h	/^class update_exception : public std::exception$/;"	c
update_fetcher	server/database/update/update_fetcher.cpp	/^update_fetcher::update_fetcher(const path& source_directory, $/;"	f	class:update_fetcher
update_fetcher	server/database/update/update_fetcher.h	/^class update_fetcher$/;"	c
update_flags_	server/database/database/database_loader.h	/^	const uint32_t update_flags_;$/;"	m	class:database_loader
update_framebuffer	client/video.cpp	/^void Video::update_framebuffer()$/;"	f	class:Video
update_mode	server/database/update/update_fetcher.h	/^	enum update_mode$/;"	g	class:update_fetcher
update_result	server/database/update/update_fetcher.h	/^	update_result() : updated(0), recent(0), archived(0) {}$/;"	f	struct:update_result
update_result	server/database/update/update_fetcher.h	/^	update_result(const size_t updated_, const size_t recent_, const size_t archived_) : updated(updated_), recent(recent_), archived(archived_) {}$/;"	f	struct:update_result
update_result	server/database/update/update_fetcher.h	/^struct update_result$/;"	s
update_state	server/database/update/update_fetcher.cpp	/^void update_fetcher::update_state(const std::string& name, const state state) const$/;"	f	class:update_fetcher
update_value	client/config.h	/^void Config::update_value(const std::string& value, Args&&... keys)$/;"	f	class:Config
update_value	client/config.h	/^void Config::update_value(double value, Args&&... keys)$/;"	f	class:Config
updated	server/database/update/update_fetcher.h	/^	size_t updated;$/;"	m	struct:update_result
updates_locked_	client/video.h	/^		int updates_locked_;$/;"	m	class:Video
use_color_cursor	client/cursor.cpp	/^		bool use_color_cursor()$/;"	f	namespace:cursor::__anon26
user	server/database/database/mysql_connection.h	/^	std::string user;$/;"	m	struct:mysql_connection_info
user_	client/old/connection_pool.h	/^		std::string user_;$/;"	m	class:Mysql_connection_factory
user_config_dir	client/filesystem.cpp	/^	static fs::path user_data_dir, user_config_dir, cache_dir;$/;"	m	namespace:filesystem	file:
user_data_dir	client/filesystem.cpp	/^	static fs::path user_data_dir, user_config_dir, cache_dir;$/;"	m	namespace:filesystem	file:
user_name_	client/old/mysql_pool.h	/^			std::string user_name_;$/;"	m	class:db::Connection_factory
user_name_	client/old/mysql_pool.h	/^			std::string user_name_;$/;"	m	class:db::Database
utf16	client/serialization/unicode.h	/^namespace utf16$/;"	n
utf16	client/serialization/unicode_type.h	/^namespace utf16$/;"	n
utf8	client/serialization/unicode.cpp	/^namespace utf8$/;"	n	file:
utf8	client/serialization/unicode.h	/^namespace utf8$/;"	n
utf8	client/serialization/unicode_type.h	/^namespace utf8$/;"	n
v4	server/shared/networking/ip/endpoint.h	/^		sockaddr_in4_type v4;$/;"	m	union:endpoint::data_union
v4	server/shared/networking/ip/tcp.h	/^	static tcp v4() { return tcp(AF_INET); }$/;"	f	class:tcp
v4	server/shared/networking/ip/udp.h	/^	static udp v4() { return udp(AF_INET); }$/;"	f	class:udp
v4_mapped	server/shared/networking/ip/address_v6.h	/^enum v4_mapped_t { v4_mapped };$/;"	e	enum:v4_mapped_t
v4_mapped_t	server/shared/networking/ip/address_v6.h	/^enum v4_mapped_t { v4_mapped };$/;"	g
v6	server/shared/networking/ip/endpoint.h	/^		sockaddr_in6_type v6;$/;"	m	union:endpoint::data_union
v6	server/shared/networking/ip/tcp.h	/^	static tcp v6() { return tcp(AF_INET6);}$/;"	f	class:tcp
v6	server/shared/networking/ip/udp.h	/^	static udp v6() { return udp(AF_INET6);}$/;"	f	class:udp
v_	common/cmdline/variables_map.h	/^	std::any v_;$/;"	m	class:variable_value
val_	client/image.h	/^			Value val_;$/;"	m	class:image::Locator
valid	client/hotkey/hotkey_item.h	/^			virtual bool valid() const $/;"	f	class:hotkey::Hotkey_keyboard
valid	client/hotkey/hotkey_item.h	/^			virtual bool valid() const { return button_ != 0; }$/;"	f	class:hotkey::Hotkey_mouse
valid	client/hotkey/hotkey_item.h	/^			virtual bool valid() const { return false; }$/;"	f	class:hotkey::Hotkey_void
valid	client/sound_music_track.h	/^			bool valid() const { return file_path_.empty() != true; }$/;"	f	class:sound::Music_track
valid	common/utility/timestamp.h	/^	bool valid() const { return micro_seconds_since_epoch_ > 0; }$/;"	f	class:Timestamp
valid_option_list_	client/cmdln.h	/^		std::vector<Cmd_option*> valid_option_list_;$/;"	m	class:Commandline
valid_param_list_	client/cmdln.h	/^		std::vector<Cmd_param*> valid_param_list_;$/;"	m	class:Commandline
validate_and_set_client_opcode	server/game/server/protocol/opcodes.cpp	/^void opcode_table::validate_and_set_client_opcode(opcode_client opcode, const char* name, session_status status, packet_processing processing)$/;"	f	class:opcode_table
validate_and_set_server_opcode	server/game/server/protocol/opcodes.cpp	/^void opcode_table::validate_and_set_server_opcode(opcode_server opcode, const char* name, session_status status, connection_type coon_index)$/;"	f	class:opcode_table
value	client/config.h	/^			std::string key, value;$/;"	m	struct:Config::Node
value	client/utils/json.h	/^    ValueType value(const json_pointer& ptr, const ValueType& default_value) const$/;"	f	class:basic_json
value	client/utils/json.h	/^    ValueType value(const typename object_t::key_type& key, const ValueType& default_value) const$/;"	f	class:basic_json
value	client/utils/json.h	/^    string_t value(const json_pointer& ptr, const char* default_value) const$/;"	f	class:basic_json
value	client/utils/json.h	/^    string_t value(const typename object_t::key_type& key, const char* default_value) const$/;"	f	class:basic_json
value	common/cmdline/option.h	/^	std::vector<std::string> value;$/;"	m	struct:option
value	server/database/database/field.h	/^		void* value;$/;"	m	struct:field::__anon2
value_	client/utils/json.h	/^    json_value value_ = {};$/;"	m	class:basic_json
value_count	client/cmdln.cpp	/^	int value_count;$/;"	m	struct:Cmd_option	file:
value_description	client/cmdln.cpp	/^	std::string value_description;$/;"	m	struct:Cmd_option	file:
value_semantic_	common/cmdline/option_description.h	/^	bool value_semantic_;$/;"	m	class:option_description
value_t	client/utils/json.h	/^enum class value_t : std::uint8_t$/;"	c
variable_value	common/cmdline/variables_map.h	/^	variable_value() {}$/;"	f	class:variable_value
variable_value	common/cmdline/variables_map.h	/^	variable_value(const std::any& v) : v_(v) {}$/;"	f	class:variable_value
variable_value	common/cmdline/variables_map.h	/^class variable_value$/;"	c
variables_map	common/cmdline/variables_map.h	/^typedef std::map<std::string, variable_value> variables_map;$/;"	t
version	client/game_config.cpp	/^	const std::string version = VERSION;$/;"	m	namespace:game_config	file:
version	client/old/packet_protocol.h	/^	uint8_t version;		\/\/协议版本号	$/;"	m	struct:Packet_head
version_numbers_comparison_internal	client/version.cpp	/^bool version_numbers_comparison_internal(const Version_info& l,$/;"	f
video	client/game_launcher.h	/^		Video& video() { return *video_; }$/;"	f	class:Game_launcher
video_	client/game_launcher.h	/^		const std::unique_ptr<Video> video_;$/;"	m	class:Game_launcher
video_resize	client/gui/core/event/handler.cpp	/^		void Sdl_event_handler::video_resize(const Point& new_size)$/;"	f	class:gui::event::Sdl_event_handler
visit	client/config.h	/^	void visit(Config& c, Config::Node* n, Args&&... args)$/;"	f	namespace:detail
visit	client/config.h	/^	void visit(Config& c, Config::Node* n, T& val)$/;"	f	namespace:detail
vml_error	client/log.cpp	/^	std::stringstream& vml_error()$/;"	f	namespace:lg
volatile_draw	client/events.h	/^		        virtual void volatile_draw() {} \/\/ 易变的绘图$/;"	f	class:events::Sdl_handler
volatile_undraw	client/events.h	/^		        virtual void volatile_undraw() {}$/;"	f	class:events::Sdl_handler
w	client/sdl/texture.h	/^			int w;$/;"	m	struct:Texture::Info
w_	client/font/text_surface.h	/^		mutable int w_, h_;$/;"	m	class:Text_surface
wait	client/cursor.h	/^		wait,$/;"	e	enum:cursor::Cursor_type
wait	client/thread/condition_variable.cpp	/^void Condition_variable::wait(Unique_lock<Mutex>& lock)$/;"	f	class:Condition_variable
wait	client/thread/condition_variable.h	/^		void wait(Unique_lock<Mutex>& lock, Predicate p)$/;"	f	class:Condition_variable
wait	server/shared/networking/network_thread.h	/^	void wait()$/;"	f	class:network_thread
wait	server/shared/networking/tcp_socket_mgr.h	/^	void wait()$/;"	f	class:tcp_socket_mgr
wait_and_pop	common/threading/producer_consumer_queue.h	/^	void wait_and_pop(T& v)$/;"	f	class:producer_consumer_queue
wait_for	client/thread/condition_variable.h	/^		Status wait_for(Lock& lock, $/;"	f	class:Condition_variable
wait_for	client/thread/condition_variable.h	/^		bool wait_for(Lock& lock, $/;"	f	class:Condition_variable
wait_for_exit	server/process/wait_for_exit.h	/^int wait_for_exit(const T& p)$/;"	f
wait_until	client/thread/condition_variable.h	/^		Status wait_until(Unique_lock<Mutex>& lock, $/;"	f	class:Condition_variable
wait_until	client/thread/condition_variable.h	/^		Status wait_until(Unique_lock<Mutex>& lock,$/;"	f	class:Condition_variable
wait_until	client/thread/condition_variable.h	/^		bool wait_until(Unique_lock<Mutex>& lock, $/;"	f	class:Condition_variable
wait_until_impl	client/thread/condition_variable.h	/^		Status wait_until_impl(Unique_lock<Mutex>& lock, $/;"	f	class:Condition_variable
waiting_for_query	server/game/server/world_tcp_socket.h	/^		waiting_for_query = 2$/;"	m	class:world_tcp_socket::read_data_handler_result
wakeup	client/net/event_loop.cpp	/^void Event_loop::wakeup()$/;"	f	class:net::Event_loop
wakeup	server/shared/networking/event_loop.cpp	/^void event_loop::wakeup()$/;"	f	class:event_loop
wakeup_channel_	client/net/event_loop.h	/^  	Scoped_ptr<Channel> wakeup_channel_;$/;"	m	class:net::Event_loop
wakeup_channel_	server/shared/networking/event_loop.h	/^  	std::unique_ptr<channel> wakeup_channel_;$/;"	m	class:event_loop
wakeup_fd_	client/net/event_loop.h	/^  	int wakeup_fd_;$/;"	m	class:net::Event_loop
wakeup_fd_	server/shared/networking/event_loop.h	/^  	int wakeup_fd_;$/;"	m	class:event_loop
want_keyboard_input_	client/gui/core/event/dispatcher.h	/^				bool want_keyboard_input_;$/;"	m	class:gui::event::Dispatcher
want_new_music	client/sound.cpp	/^	bool want_new_music = false;$/;"	m	namespace:__anon27	file:
warn	client/log.cpp	/^	Logger& warn()$/;"	f	namespace:lg
warning	common/debugging/errors.cpp	/^void warning(const char* file, int line, const char* function, const char* message)$/;"	f
weapon_details_sep	client/font/constants.h	/^		weapon_details_sep = "-";$/;"	v
weapon_numbers_sep	client/font/constants.h	/^		weapon_numbers_sep = "x",$/;"	v
width	client/font/text_surface.cpp	/^size_t Text_surface::width() const$/;"	f	class:Text_surface
wildcard_string_match	client/serialization/string_utils.cpp	/^bool wildcard_string_match(const std::string& str, const std::string& match)$/;"	f
wildcard_string_match	common/serialization/string_utils.cpp	/^bool wildcard_string_match(const std::string& str, const std::string& match)$/;"	f
window	client/video.h	/^		std::unique_ptr<Window> window;$/;"	m	class:Video
window_	client/sdl/window.h	/^		SDL_Window* window_;$/;"	m	class:Window
with_callback	server/database/database/query_callback.cpp	/^query_callback&& query_callback::with_callback(std::function<void(query_result)>&& callback)$/;"	f	class:query_callback
with_chaining_callback	server/database/database/query_callback.cpp	/^query_callback&& query_callback::with_chaining_callback(std::function<void(query_callback&, query_result)>&& callback)$/;"	f	class:query_callback
with_chaining_prepared_callback	server/database/database/query_callback.cpp	/^query_callback&& query_callback::with_chaining_prepared_callback(std::function<void(query_callback&, prepared_query_result)>&& callback)$/;"	f	class:query_callback
with_prepared_callback	server/database/database/query_callback.cpp	/^query_callback&& query_callback::with_prepared_callback(std::function<void(prepared_query_result)>&& callback)$/;"	f	class:query_callback
worker_	server/database/database/mysql_connection.h	/^	std::unique_ptr<database_worker> worker_; \/\/ 核心工作者任务。$/;"	m	class:mysql_connection
worker_thread	server/database/database/database_worker.cpp	/^void database_worker::worker_thread()$/;"	f	class:database_worker
worker_thread_	server/database/database/database_worker.h	/^	std::thread worker_thread_;$/;"	m	class:database_worker
workers_	client/old/threadpool.h	/^		std::vector<std::thread> workers_;$/;"	m	class:Threadpool
world_database_connection	server/database/database/implementation/world_database.cpp	/^world_database_connection::world_database_connection(mysql_connection_info& conn_info) : mysql_connection(conn_info) {}$/;"	f	class:world_database_connection
world_database_connection	server/database/database/implementation/world_database.cpp	/^world_database_connection::world_database_connection(producer_consumer_queue<sql_operation*>* q, mysql_connection_info& conn_info) : mysql_connection(q, conn_info) {}$/;"	f	class:world_database_connection
world_database_connection	server/database/database/implementation/world_database.h	/^class world_database_connection : public mysql_connection$/;"	c
world_packet	server/game/server/packet.cpp	/^namespace world_packet$/;"	n	file:
world_packet	server/game/server/world_packet.h	/^	world_packet() : byte_buffer(0), opcode_(NULL_OPCODE), connection_(CONNECTION_TYPE_DEFAULT) {}$/;"	f	class:world_packet
world_packet	server/game/server/world_packet.h	/^	world_packet(const world_packet& right) : byte_buffer(right), opcode_(right.opcode_), connection_(packet.connection_) {}$/;"	f	class:world_packet
world_packet	server/game/server/world_packet.h	/^	world_packet(message_buffer&& buffer, connection_type connection) : byte_buffer(std::move(buffer)), opcode_(UNKNOWN_OPCODE), connection_(connection) {}$/;"	f	class:world_packet
world_packet	server/game/server/world_packet.h	/^	world_packet(uint16_t opcode, size_t res = 200, connection_type connection = CONNECTION_TYPE_DEFAULT) : byte_buffer(res), opcode_(opcode), connection_(connection) {}$/;"	f	class:world_packet
world_packet	server/game/server/world_packet.h	/^	world_packet(world_packet&& packet) : byte_buffer(std::move(packet)), opcode_(packet.opcode), connection_(right.connection_) {}$/;"	f	class:world_packet
world_packet	server/game/server/world_packet.h	/^class world_packet : public byte_buffer$/;"	c
world_packet_	server/game/server/packet.h	/^	world_packet world_packet_;$/;"	m	class:world_packets::packet
world_packets	server/game/server/packet.h	/^namespace world_packets$/;"	n
world_server_DEPENDENCIES	client/old/Makefile	/^world_server_DEPENDENCIES =$/;"	m
world_server_LDADD	client/old/Makefile	/^world_server_LDADD = -lstdc++fs $/;"	m
world_server_OBJECTS	client/old/Makefile	/^world_server_OBJECTS = $(am_world_server_OBJECTS)$/;"	m
world_server_SOURCES	client/old/Makefile	/^world_server_SOURCES = main.cpp \\$/;"	m
world_session_	server/game/server/world_tcp_socket.h	/^	world_session* world_session_;$/;"	m	class:world_tcp_socket::read_data_handler_result
world_session_lock_	server/game/server/world_tcp_socket.h	/^	std::mutex world_session_lock_;$/;"	m	class:world_tcp_socket::read_data_handler_result
world_socket_mgr	server/game/server/world_tcp_socket_mgr.cpp	/^world_socket_mgr::world_socket_mgr() : base_socket_mgr(), socket_system_send_buffer_size(-1), socket_application_send_buffer_size_(65536) {}$/;"	f	class:world_socket_mgr
world_tcp_socket	server/game/server/world_tcp_socket.h	/^class world_tcp_socket : public tcp_socket<world_tcp_socket>$/;"	c
world_tcp_socket_mgr	server/game/server/world_tcp_socket_mgr.h	/^class world_tcp_socket_mgr$/;"	c
wpos	server/shared/packets/byte_buffer.h	/^	size_t wpos() const { return wpos_; }$/;"	f	class:byte_buffer
wpos	server/shared/packets/byte_buffer.h	/^	size_t wpos(size_t wpos)$/;"	f	class:byte_buffer
wpos_	common/utility/message_buffer.h	/^	size_type wpos_;$/;"	m	class:message_buffer
wpos_	server/shared/packets/byte_buffer.h	/^	size_t wpos_;$/;"	m	class:byte_buffer
writable_bytes	client/net/buffer.h	/^	size_t writable_bytes() const { return buffer_.size() - writer_index_; }$/;"	f	class:net::Buffer
write	client/net/net_utils.cpp	/^ssize_t write(int fd, const void *buf, size_t count) {}$/;"	f	namespace:net
write	client/serialization/ucs4_convert_impl.h	/^			static inline void write(Write out, ucs4::Char ch)$/;"	f	struct:ucs4_convert_impl::Utf32_impl
write	client/serialization/ucs4_convert_impl.h	/^			static inline void write(Writer out, ucs4::Char ch)$/;"	f	struct:ucs4_convert_impl::Utf16_impl
write	client/serialization/ucs4_convert_impl.h	/^	        static inline void write(Writer& out, ucs4::Char ch)$/;"	f	struct:ucs4_convert_impl::Utf8_impl
write	client/sound_music_track.cpp	/^	void Music_track::write(Config& parent_node, bool append) const$/;"	f	class:sound::Music_track
write	common/logging/appender.cpp	/^void appender::write(log_message* message)$/;"	f	class:appender
write	common/logging/log.cpp	/^void log::write(std::unique_ptr<log_message>&& msg) const$/;"	f	class:log
write	common/logging/logger.cpp	/^void logger::write(log_message* message) const$/;"	f	class:logger
write	common/logging/old_logging/log_file.cpp	/^size_t Append_file::write(const char* logline, size_t len)$/;"	f	class:lg::Append_file
write	common/utility/message_buffer.h	/^	void write(const void* data, std::size_t size)$/;"	f	class:message_buffer
write	common/utility/start_process.cpp	/^	std::streamsize write(const char* str, std::streamsize size)$/;"	f	class:__anon14::log_sink
write	server/game/server/packet.cpp	/^const world_packet* client_packet::write()$/;"	f	class:world_packet::client_packet
write	server/process/start_process.cpp	/^	std::streamsize write(const char* str, std::streamsize size)$/;"	f	class:__anon11::log_sink
write_bit	server/shared/packets/byte_buffer.h	/^	bool write_bit(bool bit)$/;"	f	class:byte_buffer
write_bits	server/shared/packets/byte_buffer.h	/^	void write_bits(size_t value, int32_t bits)$/;"	f	class:byte_buffer
write_callback_	client/net/channel.h	/^	Event_callback write_callback_;$/;"	m	class:net::Channel
write_callback_	server/shared/networking/channel.h	/^	event_callback write_callback_;$/;"	m	class:channel
write_complete_callback_	client/net/tcp_connection.h	/^  Write_complete_callback write_complete_callback_;$/;"	m	class:net::Tcp_connection
write_complete_callback_	client/net/tcp_server.h	/^	Write_complete_callback write_complete_callback_;$/;"	m	class:net::Tcp_server
write_complete_callback_	server/shared/networking/tcp_server.h	/^	Write_complete_callback write_complete_callback_;$/;"	m	class:net::Tcp_server
write_completed	common/utility/message_buffer.h	/^	void write_completed(size_type bytes) { wpos_ += bytes; }$/;"	f	class:message_buffer
write_event_	client/net/channel.cpp	/^const int Channel::write_event_ = POLLOUT;$/;"	m	class:net::Channel	file:
write_event_	client/net/channel.h	/^	static const int write_event_;$/;"	m	class:net::Channel
write_event_	server/shared/networking/channel.cpp	/^const int channel::write_event_ = POLLOUT;$/;"	m	class:channel	file:
write_event_	server/shared/networking/channel.h	/^	static const int write_event_;$/;"	m	class:channel
write_file	client/filesystem.cpp	/^	void write_file(const std::string& name, const std::string& data)$/;"	f	namespace:filesystem
write_file	client/filesystem.cpp	/^bool write_file(const char* file, const char* text)$/;"	f
write_file	client/filesystem.cpp	/^void write_file(const std::string& file, const std::string& text)$/;"	f
write_handler_wrapper	server/shared/networking/tcp_socket.cpp	/^void tcp_socket::write_handler_wrapper()$/;"	f	class:tcp_socket
write_ini	common/configuration/ini_parser.cpp	/^bool ini_parser::write_ini(const std::string& file, std::string& error)$/;"	f	class:ini_parser
write_packet_to_buffer	server/game/server/world_tcp_socket.cpp	/^void world_tcp_socket::write_packet_to_buffer(encryptable_packet const& packet, message_buffer& buffer)$/;"	f	class:world_tcp_socket
write_pos_	client/old/byte_buffer.h	/^		size_t write_pos_;$/;"	m	class:Byte_buffer
write_queue_	server/shared/networking/tcp_socket.h	/^	std::queue<message_buffer> write_queue_;$/;"	m	class:tcp_socket
write_stream	common/logging/appender_console.cpp	/^void appender_console::write_stream(const log_message* message)$/;"	f	class:appender_console
write_stream	common/logging/appender_file.cpp	/^void appender_file::write_stream(const log_message* message)$/;"	f	class:appender_file
write_string	server/shared/packets/byte_buffer.h	/^	void write_string(const char* str, size_t len)$/;"	f	class:byte_buffer
write_string	server/shared/packets/byte_buffer.h	/^	void write_string(const std::string& str)$/;"	f	class:byte_buffer
write_type	client/filesystem.cpp	/^	static constexpr uint32_t write_type = 8;$/;"	m	namespace:filesystem	file:
writer_index_	client/net/buffer.h	/^	size_t writer_index_;$/;"	m	class:net::Buffer
written_bytes	common/logging/old_logging/log_file.h	/^	off_t written_bytes() const { return written_bytes_; }$/;"	f	class:lg::Append_file
written_bytes_	common/logging/old_logging/log_file.h	/^	off_t written_bytes_;$/;"	m	class:lg::Append_file
x	client/sdl/point.h	/^	int x;$/;"	m	struct:Point
y	client/sdl/point.h	/^	int y;$/;"	m	struct:Point
yield	client/thread/thread.h	/^inline void yield() { pthread_yield(); }$/;"	f
z_stream	server/game/server/world_tcp_socket.h	/^typedef struct z_stream_s z_stream;$/;"	t	typeref:struct:z_stream_s
~Acceptor	client/net/acceptor.cpp	/^Acceptor::~Acceptor()$/;"	f	class:net::Acceptor
~Append_file	common/logging/old_logging/log_file.cpp	/^Append_file::~Append_file()$/;"	f	class:lg::Append_file
~Async_log	common/logging/old_logging/async_log.h	/^	~Async_log()$/;"	f	class:lg::Async_log
~Channel	client/net/channel.cpp	/^Channel::~Channel()$/;"	f	class:net::Channel
~Character	client/old/player.h	/^		virtual ~Character(){}$/;"	f	class:Character
~Commandline	client/cmdln.cpp	/^Commandline::~Commandline()$/;"	f	class:Commandline
~Condition_variable	client/thread/condition_variable.cpp	/^Condition_variable::~Condition_variable()$/;"	f	class:Condition_variable
~Config	client/config.cpp	/^Config::~Config()$/;"	f	class:Config
~Connection_pool	client/old/connection_pool.h	/^		~Connection_pool()$/;"	f	class:Connection_pool
~Connection_pool	client/old/mysql_pool.cpp	/^	Connection_pool::~Connection_pool()$/;"	f	class:db::Connection_pool
~Context	client/events.cpp	/^        Context::~Context()$/;"	f	class:events::Context
~Database	client/old/mysql_pool.cpp	/^	Database::~Database() { close(); }$/;"	f	class:db::Database
~Dispatcher	client/gui/core/event/dispatcher.cpp	/^		Dispatcher::~Dispatcher()$/;"	f	class:gui::event::Dispatcher
~Dispatcher	client/old/dispatcher.cpp	/^	Dispatcher::~Dispatcher()$/;"	f	class:event::Dispatcher
~Epoll_handler	client/old/epoll_handler.cpp	/^	Epoll_handler::~Epoll_handler()$/;"	f	class:event::Epoll_handler
~Epoll_handler	client/old/event.cpp	/^	Epoll_handler::~Epoll_handler()$/;"	f	class:event::Epoll_handler
~Event_context	client/events.cpp	/^        Event_context::~Event_context()$/;"	f	class:events::Event_context
~Event_loop	client/net/event_loop.cpp	/^Event_loop::~Event_loop()$/;"	f	class:net::Event_loop
~Event_loop_thread	client/net/event_loop_thread.cpp	/^Event_loop_thread::~Event_loop_thread()$/;"	f	class:net::Event_loop_thread
~Event_loop_threadpool	client/net/event_loop_threadpool.cpp	/^Event_loop_threadpool::~Event_loop_threadpool()$/;"	f	class:net::Event_loop_threadpool
~Hotkey_base	client/hotkey/hotkey_item.h	/^			virtual ~Hotkey_base() {}$/;"	f	class:hotkey::Hotkey_base
~Lock_guard	client/thread/mutex.h	/^		~Lock_guard() { device_.unlock(); }$/;"	f	class:Lock_guard
~Log_buffer	common/logging/old_logging/log_buffer.h	/^	~Log_buffer() {}$/;"	f	class:lg::Log_buffer
~Logger	common/logging/old_logging/logging.cpp	/^Logger::~Logger()$/;"	f	class:lg::Logger
~Manager	client/cursor.cpp	/^	Manager::~Manager()$/;"	f	class:cursor::Manager
~Manager	client/gui/core/event/handler.cpp	/^		Manager::~Manager()$/;"	f	class:gui::event::Manager
~Message	client/gui/core/event/message.h	/^			virtual ~Message() {}$/;"	f	struct:gui::event::Message
~Mouse_motion	client/gui/core/event/distributor.cpp	/^		Mouse_motion::~Mouse_motion()$/;"	f	class:gui::event::Mouse_motion
~Mutex	client/thread/mutex.h	/^		~Mutex(){};\/\/?wrong? = delete;$/;"	f	class:Mutex
~Mutex_base	client/thread/mutex.h	/^		~Mutex_base() { pthread_mutex_destroy(&mutex_); }$/;"	f	class:Mutex_base
~Notifier	client/thread/condition_variable.cpp	/^	~Notifier()$/;"	f	struct:final
~Pango_font	client/font/pango/font.h	/^			~Pango_font() { pango_font_description_free(font_); }$/;"	f	class:font::Pango_font
~Placer_base	client/gui/core/placer.h	/^	virtual ~Placer_base() {}$/;"	f	class:gui::Placer_base
~Poller	client/net/poller.cpp	/^Poller::~Poller()$/;"	f	class:net::Poller
~Pump_monitor	client/events.cpp	/^        Pump_monitor::~Pump_monitor()$/;"	f	class:events::Pump_monitor
~Query	client/old/mysql_pool.h	/^			~Query() { finalize(); }$/;"	f	class:db::Query
~Redirect_output_setter	client/log.cpp	/^	Redirect_output_setter::~Redirect_output_setter()$/;"	f	class:lg::Redirect_output_setter
~Render_raii_rect_setter_base	client/sdl/render_utils.h	/^		~Render_raii_rect_setter_base()$/;"	f	class:Render_raii_rect_setter_base
~Render_target_setter	client/sdl/render_utils.h	/^		~Render_target_setter()$/;"	f	class:Render_target_setter
~Resource_locker	client/gui/core/event/distributor.cpp	/^				~Resource_locker()$/;"	f	class:gui::event::Resource_locker
~Rng	client/random.cpp	/^	Rng::~Rng() {}$/;"	f	class:randomness::Rng
~SDL_ttf	client/font/sdl_ttf.cpp	/^SDL_ttf::~SDL_ttf()$/;"	f	class:SDL_ttf
~Scope_logger	client/log.h	/^			~Scope_logger()$/;"	f	class:lg::Scope_logger
~Sdl_event_handler	client/gui/core/event/handler.cpp	/^		Sdl_event_handler::~Sdl_event_handler() {}$/;"	f	class:gui::event::Sdl_event_handler
~Sdl_handler	client/events.cpp	/^        Sdl_handler::~Sdl_handler()$/;"	f	class:events::Sdl_handler
~Server	client/old/server.cpp	/^Server::~Server()$/;"	f	class:Server
~Setter	client/cursor.cpp	/^	Setter::~Setter()$/;"	f	class:cursor::Setter
~Socket	client/net/socket.cpp	/^Socket::~Socket()$/;"	f	class:net::Socket
~Sound_cache_chunk	client/sound.cpp	/^			~Sound_cache_chunk()$/;"	f	class:__anon28::Sound_cache_chunk
~Surface	client/sdl/surface.h	/^		~Surface()$/;"	f	class:Surface
~Tcp_connection	client/net/tcp_connection.cpp	/^Tcp_connection::~Tcp_connection()$/;"	f	class:net::Tcp_connection
~Tcp_server	client/net/tcp_server.cpp	/^Tcp_server::~Tcp_server()$/;"	f	class:net::Tcp_server
~Tcp_server	server/shared/networking/tcp_server.cpp	/^Tcp_server::~Tcp_server()$/;"	f	class:net::Tcp_server
~Thread	client/thread/thread.h	/^		~Thread()$/;"	f	class:Thread
~Threadpool	client/old/threadpool.h	/^		~Threadpool()$/;"	f	class:Threadpool
~Timer_queue	client/net/timer_queue.cpp	/^Timer_queue::~Timer_queue()$/;"	f	class:net::Timer_queue
~Unique_lock	client/thread/mutex.h	/^		~Unique_lock()$/;"	f	class:Unique_lock
~Value	client/json.h	/^	~Value() { clear(); }$/;"	f	class:Format::Value
~Video	client/video.cpp	/^Video::~Video()$/;"	f	class:Video
~Window	client/sdl/window.cpp	/^Window::~Window()$/;"	f	class:Window
~acceptor	server/shared/networking/acceptor.cpp	/^acceptor::~acceptor()$/;"	f	class:acceptor
~appender	common/logging/appender.h	/^	virtual ~appender() {}$/;"	f	class:appender
~appender_DB	server/database/logging/appender_DB.h	/^        ~appender_DB() {}$/;"	f	class:appender_DB
~appender_file	common/logging/appender_file.h	/^	~appender_file() { close_file(); }$/;"	f	class:appender_file
~basic_json	client/utils/json.h	/^    ~basic_json() $/;"	f	class:basic_json
~basic_statement_task	server/database/database/adhoc_statement.cpp	/^basic_statement_task::~basic_statement_task()$/;"	f	class:basic_statement_task
~big_number	common/cryptography/big_number.cpp	/^big_number::~big_number()$/;"	f	class:big_number
~byte_buffer	server/shared/packets/byte_buffer.h	/^	virtual ~byte_buffer() {}$/;"	f	class:byte_buffer
~channel	server/shared/networking/channel.cpp	/^channel::~channel()$/;"	f	class:channel
~character_database_connection	server/database/database/implementation/character_database.cpp	/^character_database_connection::~character_database_connection()$/;"	f	class:character_database_connection
~database_worker	server/database/database/database_worker.cpp	/^database_worker::~database_worker()$/;"	f	class:database_worker
~database_worker_pool	server/database/database/database_worker_pool.cpp	/^database_worker_pool<T>::~database_worker_pool()$/;"	f	class:database_worker_pool
~epoll	server/shared/networking/epoll.cpp	/^epoll::~epoll()$/;"	f	class:epoll
~event_loop	server/shared/networking/event_loop.cpp	/^event_loop::~event_loop()$/;"	f	class:event_loop
~event_loop_thread	server/shared/networking/event_loop_thread.cpp	/^event_loop_thread::~event_loop_thread()$/;"	f	class:event_loop_thread
~event_loop_threadpool	server/shared/networking/event_loop_threadpool.cpp	/^event_loop_threadpool::~event_loop_threadpool()$/;"	f	class:event_loop_threadpool
~field	server/database/database/field.cpp	/^field::~field()$/;"	f	class:field
~file_descriptor	server/process/file_descriptor.cpp	/^file_descriptor::~file_descriptor() $/;"	f	class:file_descriptor
~hotfix_database_connection	server/database/database/implementation/hotfix_database.cpp	/^hotfix_database_connection::~hotfix_database_connection() {}$/;"	f	class:hotfix_database_connection
~log	common/logging/log.cpp	/^log::~log()$/;"	f	class:log
~log_operation	common/logging/log_operation.h	/^	~log_operation() {}$/;"	f	class:log_operation
~login_database_connection	server/database/database/implementation/login_database.cpp	/^login_database_connection::~login_database_connection() {}$/;"	f	class:login_database_connection
~mysql_connection	server/database/database/mysql_connection.cpp	/^mysql_connection::~mysql_connection() { close(); }$/;"	f	class:mysql_connection
~mysql_prepared_statement	server/database/database/mysql_prepared_statement.cpp	/^mysql_prepared_statement::~mysql_prepared_statement()$/;"	f	class:mysql_prepared_statement
~network_thread	server/shared/networking/network_thread.h	/^	virtual ~network_thread()$/;"	f	class:network_thread
~opcode_handler	server/game/server/protocol/opcodes.h	/^	virtual ~opcode_handler() {}$/;"	f	struct:opcode_handler
~opcode_table	server/game/server/protocol/opcodes.cpp	/^opcode_table::~opcode_table()$/;"	f	class:opcode_table
~packet_log	server/game/server/protocol/packet_log.cpp	/^packet_log::~packet_log()$/;"	f	class:packet_log
~prepared_result_set	server/database/database/query_result.cpp	/^prepared_result_set::~prepared_result_set()$/;"	f	class:prepared_result_set
~prepared_statement_base	server/database/database/prepared_statement.cpp	/^prepared_statement_base::~prepared_statement_base() {}$/;"	f	class:prepared_statement_base
~prepared_statement_task	server/database/database/prepared_statement.cpp	/^prepared_statement_task::~prepared_statement_task()$/;"	f	class:prepared_statement_task
~query_callback	server/database/database/query_callback.cpp	/^query_callback::~query_callback() { destroy_active_member(this); }$/;"	f	class:query_callback
~query_callback_data	server/database/database/query_callback.cpp	/^	~query_callback_data() { destroy_active_member(this); }$/;"	f	struct:query_callback::query_callback_data
~result_set	server/database/database/query_result.cpp	/^result_set::~result_set()$/;"	f	class:result_set
~scope_changer	client/hotkey/hotkey_command.cpp	/^	Scope_changer::~scope_changer() { scope_active_ = prev_scope_active_; }$/;"	f	class:hotkey::Scope_changer
~socket	server/shared/networking/socket.cpp	/^socket::~socket()$/;"	f	class:socket
~sql_operation	server/database/database/sql_operation.h	/^	virtual ~sql_operation() {}$/;"	f	class:sql_operation
~sql_query_holder_base	server/database/database/query_holder.cpp	/^sql_query_holder_base::~sql_query_holder_base()$/;"	f	class:sql_query_holder_base
~sql_query_holder_task	server/database/database/query_holder.cpp	/^sql_query_holder_task::~sql_query_holder_task()$/;"	f	class:sql_query_holder_task
~tcp_socket	server/shared/networking/tcp_socket.cpp	/^tcp_socket::~tcp_socket()$/;"	f	class:tcp_socket
~tcp_socket_mgr	server/shared/networking/tcp_socket_mgr.h	/^	virtual ~tcp_socket_mgr()$/;"	f	class:tcp_socket_mgr
~timer_queue	server/shared/networking/timer_queue.cpp	/^timer_queue::~timer_queue()$/;"	f	class:timer_queue
~tokenizer	common/utility/util.h	/^    ~tokenizer() { delete[] str_; }$/;"	f	class:tokenizer
~transaction_base	server/database/database/transaction.h	/^	virtual ~transaction_base() { cleanup(); }$/;"	f	class:transaction_base
~transaction_task	server/database/database/transaction.h	/^	~transaction_task() {}$/;"	f	class:transaction_task
~update_exception	server/database/update/db_update.h	/^	~update_exception() throw() {}$/;"	f	class:update_exception
~world_database_connection	server/database/database/implementation/world_database.cpp	/^world_database_connection::~world_database_connection() {}$/;"	f	class:world_database_connection
~world_socket_mgr	server/game/server/world_tcp_socket_mgr.cpp	/^world_socket_mgr::~world_socket_mgr()$/;"	f	class:world_socket_mgr
~world_tcp_socket	server/game/server/world_tcp_socket.cpp	/^world_tcp_socket::~world_tcp_socket()$/;"	f	class:world_tcp_socket
