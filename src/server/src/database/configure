#!/bin/sh

TMPN="./conftest-$$" # $$ 当前Shell进程ID。对于 Shell 脚本，就是这些脚本所在的进程ID。
TMPH=$TMPN.h

# default parameters
CXXFLAGS="-pthread -Wall -Wextra -Werror=non-virtual-dtor -Wno-unused-local-typedefs -Wno-maybe-uninitialized -Wold-style-cast -Wtrampolines"
extra_cxxflags=""
debug="no"
sysroot=""
static="no"

# find source path
source_path=${0%configure} # 获取文件路径 /home/mylw/server/
source_path=${source_path%/}
source_path_used="yes"
if test -z "$source_path" -o "$source_path" = "." ; then # 2个表达式有一个为true
    source_path=`pwd`	# pwd 显示当前工作目录
    source_path_used="no"
fi

for opt do
  eval opt=\"$opt\"
  case "$opt" in
  -extra-cxxflags=*) extra_cxxflags="${opt#--extra-cxxflags=}"
  ;;
  -static) static="yes"
  ;;
  -debug) debug="yes"
  ;;
  -std=c++*) extra_cxxflags=$opt$extra_cxxflags
  ;;
  --config-*) confvars="$confvars ${opt#--config-}"; suggest="no"
  ;;
  --help|-h) show_help="yes"
  ;;
  *) echo "configure: WARNING: unrecognized option $opt"
  ;;
  esac
done

if [ x"$static" = "xyes" ]; then
  CXXFLAGS="-static "$CXXFLAGS
fi

if [ x"$debug" = "xyes" ]; then
  CXXFLAGS="$extra_cxxflags $CXXFLAGS -d -O0"
else
  CXXFLAGS="$extra_cxxflags $CXXFLAGS -O2"
fi

if test x"$show_help" = "xyes" ; then
cat << EOF
Usage: configure [options]
Options: [defaults in brackets after descriptions]

Standard options:
  --help                   print this message

Build options (experts only):
  -debug                  Build Qt with debugging turned on [no]
  -static                 Build static Qt libraries [no] (yes for UIKit)
  -c++std <edition>       Select C++ standard <edition> [c++1z/c++14/c++11]
EOF
#echo "NOTE: The object files are build at the place where configure is launched"
exit 1
fi

fcho() { if test -n "$2"; then echo "$1$2"; fi }

#echo "Source path         $source_path"
echo "C++ compiler          g++"
echo "Creating config.mak"

cat >config.mak <<EOF
# Automatically generated by configure - do not modify
CXXFLAGS=$CXXFLAGS
EOF

print_inc() {
  if test -n "$2"; then
    echo "#ifndef $1" >> $TMPH
    echo "# define $1 \"$2\"" >> $TMPH
    echo "#endif" >> $TMPH
  fi
}

print_mak() {
  if test -n "$2"; then
    echo "NATIVE_DEFINES+=-D$1=\"\\\"$2\\\"\"" >> config.mak
  fi
}

print_mak_int() {
  if test -n "$2"; then
    echo "NATIVE_DEFINES+=-D$1=$2" >> config.mak
  fi
}

echo "/* Automatically generated by configure - do not modify */" > $TMPH

print_inc CONFIG_SYSROOT "$sysroot"

for v in $confvars ; do
  if test "${v%=*}" = "$v"; then
    echo "CONFIG_$v=yes" >> config.mak
  else
    echo "CONFIG_$v" >> config.mak
  fi
done

rm -f $TMPN* $CONFTEST

# ---------------------------------------------------------------------------
# build tree in object directory if source path is different from current one

fn_makelink()
{
    tgt=$1/$2
    case $2 in
    */*) dn=${2%/*}
	 test -d $dn || mkdir -p $dn
	 case $1 in
	 /*) ;;
	  *) while test $dn ; do
		tgt=../$tgt; dn=${dn#${dn%%/*}}; dn=${dn#/}
	     done
	     ;;
	 esac
	 ;;
    esac

    ln -sfn $tgt $2 || ( echo "ln failed. Using cp instead."; cp -f $1/$2 $2 )
}

if test "$source_path_used" = "yes" ; then
  FILES="Makefile lib/Makefile tests/Makefile tests/tests2/Makefile tests/pp/Makefile"
  for f in $FILES ; do
    fn_makelink $source_path $f
  done
fi

